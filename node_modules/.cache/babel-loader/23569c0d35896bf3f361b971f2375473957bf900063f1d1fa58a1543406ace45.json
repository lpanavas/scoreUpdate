{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lpana\\\\OneDrive\\\\Documents\\\\gameIterations\\\\scoreUpdate\\\\src\\\\pages\\\\ResultsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResultsPage = _ref => {\n  _s();\n  let {\n    onRestartGame,\n    outputData,\n    selectedCards\n  } = _ref;\n  const [rankings, setRankings] = useState(null);\n  useEffect(() => {\n    let rankings = {};\n    let ratings = {};\n    const K = 40;\n\n    // Initialize rankings object and ratings with player's cards\n    cards.forEach(card => {\n      rankings[card] = {\n        wins: 0,\n        losses: 0,\n        ties: 0,\n        opponents: {}\n      };\n      ratings[card] = 1800; // default rating\n    });\n\n    allGameData.forEach(game => {\n      const matchup = game.outputData.CardMatchups;\n\n      // Initialize the opponents\n      if (rankings[matchup.Card1] && rankings[matchup.Card2]) {\n        if (!rankings[matchup.Card1].opponents[matchup.Card2]) {\n          rankings[matchup.Card1].opponents[matchup.Card2] = {\n            wins: 0,\n            losses: 0,\n            ties: 0\n          };\n        }\n        if (!rankings[matchup.Card2].opponents[matchup.Card1]) {\n          rankings[matchup.Card2].opponents[matchup.Card1] = {\n            wins: 0,\n            losses: 0,\n            ties: 0\n          };\n        }\n        if (matchup.Answer === \"Skip\") {\n          // It's a tie\n          rankings[matchup.Card1].ties += 1;\n          rankings[matchup.Card2].ties += 1;\n          rankings[matchup.Card1].opponents[matchup.Card2].ties += 1;\n          rankings[matchup.Card2].opponents[matchup.Card1].ties += 1;\n        } else {\n          // There is a winner\n          const winner = matchup.Answer;\n          const loser = winner === matchup.Card1 ? matchup.Card2 : matchup.Card1;\n          rankings[winner].wins += 1;\n          rankings[loser].losses += 1;\n          rankings[winner].opponents[loser].losses += 1;\n          rankings[loser].opponents[winner].wins += 1;\n        }\n      }\n    });\n\n    // Calculate ratings using the relative logistic method\n    const numPlayers = cards.length;\n    const totalGames = allGameData.length;\n    for (let i = 0; i < numPlayers; i++) {\n      const playerA = cards[i];\n      for (let j = 0; j < numPlayers; j++) {\n        if (i !== j) {\n          const playerB = cards[j];\n          if (rankings[playerA].opponents[playerB]) {\n            const totalGamesAgainstOpponent = rankings[playerA].opponents[playerB].wins + rankings[playerA].opponents[playerB].losses + rankings[playerA].opponents[playerB].ties;\n            const winRatio = rankings[playerA].opponents[playerB].wins / totalGamesAgainstOpponent;\n            const lossRatio = rankings[playerA].opponents[playerB].losses / totalGamesAgainstOpponent;\n            const ratingDifference = ratings[playerB] - ratings[playerA];\n            const expectedScore = pnorm(ratingDifference, 0, 2000 / 7, 1);\n            const actualScore = winRatio + 0.5 * rankings[playerA].opponents[playerB].ties / totalGamesAgainstOpponent;\n            const delta = K * (actualScore - expectedScore);\n            ratings[playerA] += delta;\n          }\n        }\n      }\n    }\n    console.log(ratings);\n    res.json({\n      rankings,\n      ratings\n    });\n  }, [outputData]);\n  useEffect(() => {\n    // Convert selected cards to an array of card IDs\n    const cardIds = selectedCards.map(card => card.ID);\n\n    // Define the demographics\n    const demographics = {\n      Race: \"White\"\n    };\n\n    // Send request to server\n    axios.post(\"/data/rankings\", {\n      cards: cardIds,\n      demographics: demographics\n    }).then(response => {\n      setRankings(response.data);\n    }).catch(error => {\n      console.error(\"Error:\", error);\n    });\n  }, [selectedCards]);\n  console.log(rankings);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), rankings && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Elo Scores:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(rankings.ratings, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onRestartGame,\n      children: \"Restart Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s(ResultsPage, \"h6B3KjPXAqlw15prrLf59+tovwg=\");\n_c = ResultsPage;\nexport default ResultsPage;\nvar _c;\n$RefreshReg$(_c, \"ResultsPage\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","ResultsPage","_ref","_s","onRestartGame","outputData","selectedCards","rankings","setRankings","ratings","K","cards","forEach","card","wins","losses","ties","opponents","allGameData","game","matchup","CardMatchups","Card1","Card2","Answer","winner","loser","numPlayers","length","totalGames","i","playerA","j","playerB","totalGamesAgainstOpponent","winRatio","lossRatio","ratingDifference","expectedScore","pnorm","actualScore","delta","console","log","res","json","cardIds","map","ID","demographics","Race","post","then","response","data","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","onClick","_c","$RefreshReg$"],"sources":["C:/Users/lpana/OneDrive/Documents/gameIterations/scoreUpdate/src/pages/ResultsPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst ResultsPage = ({ onRestartGame, outputData, selectedCards }) => {\r\n  const [rankings, setRankings] = useState(null);\r\n\r\n  useEffect(() => {\r\n    let rankings = {};\r\n    let ratings = {};\r\n    const K = 40;\r\n\r\n    // Initialize rankings object and ratings with player's cards\r\n    cards.forEach((card) => {\r\n      rankings[card] = { wins: 0, losses: 0, ties: 0, opponents: {} };\r\n      ratings[card] = 1800; // default rating\r\n    });\r\n\r\n    allGameData.forEach((game) => {\r\n      const matchup = game.outputData.CardMatchups;\r\n\r\n      // Initialize the opponents\r\n      if (rankings[matchup.Card1] && rankings[matchup.Card2]) {\r\n        if (!rankings[matchup.Card1].opponents[matchup.Card2]) {\r\n          rankings[matchup.Card1].opponents[matchup.Card2] = {\r\n            wins: 0,\r\n            losses: 0,\r\n            ties: 0,\r\n          };\r\n        }\r\n\r\n        if (!rankings[matchup.Card2].opponents[matchup.Card1]) {\r\n          rankings[matchup.Card2].opponents[matchup.Card1] = {\r\n            wins: 0,\r\n            losses: 0,\r\n            ties: 0,\r\n          };\r\n        }\r\n\r\n        if (matchup.Answer === \"Skip\") {\r\n          // It's a tie\r\n          rankings[matchup.Card1].ties += 1;\r\n          rankings[matchup.Card2].ties += 1;\r\n          rankings[matchup.Card1].opponents[matchup.Card2].ties += 1;\r\n          rankings[matchup.Card2].opponents[matchup.Card1].ties += 1;\r\n        } else {\r\n          // There is a winner\r\n          const winner = matchup.Answer;\r\n          const loser =\r\n            winner === matchup.Card1 ? matchup.Card2 : matchup.Card1;\r\n\r\n          rankings[winner].wins += 1;\r\n          rankings[loser].losses += 1;\r\n\r\n          rankings[winner].opponents[loser].losses += 1;\r\n          rankings[loser].opponents[winner].wins += 1;\r\n        }\r\n      }\r\n    });\r\n\r\n    // Calculate ratings using the relative logistic method\r\n    const numPlayers = cards.length;\r\n    const totalGames = allGameData.length;\r\n    for (let i = 0; i < numPlayers; i++) {\r\n      const playerA = cards[i];\r\n\r\n      for (let j = 0; j < numPlayers; j++) {\r\n        if (i !== j) {\r\n          const playerB = cards[j];\r\n\r\n          if (rankings[playerA].opponents[playerB]) {\r\n            const totalGamesAgainstOpponent =\r\n              rankings[playerA].opponents[playerB].wins +\r\n              rankings[playerA].opponents[playerB].losses +\r\n              rankings[playerA].opponents[playerB].ties;\r\n\r\n            const winRatio =\r\n              rankings[playerA].opponents[playerB].wins /\r\n              totalGamesAgainstOpponent;\r\n            const lossRatio =\r\n              rankings[playerA].opponents[playerB].losses /\r\n              totalGamesAgainstOpponent;\r\n\r\n            const ratingDifference = ratings[playerB] - ratings[playerA];\r\n            const expectedScore = pnorm(ratingDifference, 0, 2000 / 7, 1);\r\n            const actualScore =\r\n              winRatio +\r\n              (0.5 * rankings[playerA].opponents[playerB].ties) /\r\n                totalGamesAgainstOpponent;\r\n\r\n            const delta = K * (actualScore - expectedScore);\r\n            ratings[playerA] += delta;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(ratings);\r\n    res.json({ rankings, ratings });\r\n  }, [outputData]);\r\n\r\n  useEffect(() => {\r\n    // Convert selected cards to an array of card IDs\r\n    const cardIds = selectedCards.map((card) => card.ID);\r\n\r\n    // Define the demographics\r\n    const demographics = { Race: \"White\" };\r\n\r\n    // Send request to server\r\n    axios\r\n      .post(\"/data/rankings\", { cards: cardIds, demographics: demographics })\r\n      .then((response) => {\r\n        setRankings(response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error:\", error);\r\n      });\r\n  }, [selectedCards]);\r\n\r\n  console.log(rankings);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Results</h1>\r\n      {/* print eloScores if rankings exist */}\r\n      {rankings && (\r\n        <div>\r\n          <h2>Elo Scores:</h2>\r\n          <pre>{JSON.stringify(rankings.ratings, null, 2)}</pre>\r\n        </div>\r\n      )}\r\n      <button onClick={onRestartGame}>Restart Game</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResultsPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}