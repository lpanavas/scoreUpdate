{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lpana\\\\OneDrive\\\\Documents\\\\gameIterations\\\\scoreUpdate\\\\src\\\\components\\\\Rankings.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Button from \"./Button\";\nimport \"./styles/Rankings.css\";\nimport chroma from \"chroma-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Rankings = _ref => {\n  _s();\n  let {\n    outputData,\n    selectedCards\n  } = _ref;\n  const [rankings, setRankings] = useState(null);\n  const [userRankings, setUserRankings] = useState(null);\n  const [publicRankings, setPublicRankings] = useState(null);\n  const [selectedDemographic, setSelectedDemographic] = useState({\n    Race: \"White\"\n  });\n  useEffect(() => {\n    console.log(\"outputData changed:\", outputData);\n  }, [outputData]);\n  useEffect(() => {\n    let rankings = {};\n    let ratings = {};\n    const K = 40;\n    const cards = selectedCards.map(card => card.ID);\n    // Initialize rankings object and ratings with player's cards\n    cards.forEach(card => {\n      rankings[card] = {\n        wins: 0,\n        losses: 0,\n        ties: 0,\n        opponents: {}\n      };\n      ratings[card] = 1800; // default rating\n    });\n\n    const matchups = outputData.CardMatchups;\n\n    // Iterate through all the matchups\n    matchups.forEach(matchup => {\n      // Initialize the opponents\n      if (rankings[matchup.Card1] && rankings[matchup.Card2]) {\n        if (!rankings[matchup.Card1].opponents[matchup.Card2]) {\n          rankings[matchup.Card1].opponents[matchup.Card2] = {\n            wins: 0,\n            losses: 0,\n            ties: 0\n          };\n        }\n        if (!rankings[matchup.Card2].opponents[matchup.Card1]) {\n          rankings[matchup.Card2].opponents[matchup.Card1] = {\n            wins: 0,\n            losses: 0,\n            ties: 0\n          };\n        }\n        if (matchup.Answer === \"Skip\") {\n          // It's a tie\n          rankings[matchup.Card1].ties += 1;\n          rankings[matchup.Card2].ties += 1;\n          rankings[matchup.Card1].opponents[matchup.Card2].ties += 1;\n          rankings[matchup.Card2].opponents[matchup.Card1].ties += 1;\n        } else {\n          // There is a winner\n          const winner = matchup.Answer;\n          const loser = winner === matchup.Card1 ? matchup.Card2 : matchup.Card1;\n          rankings[winner].wins += 1;\n          rankings[loser].losses += 1;\n          rankings[winner].opponents[loser].losses += 1;\n          rankings[loser].opponents[winner].wins += 1;\n        }\n      }\n    });\n\n    // Calculate ratings using the relative logistic method\n    const numPlayers = cards.length;\n    for (let i = 0; i < numPlayers; i++) {\n      const playerA = cards[i];\n      for (let j = 0; j < numPlayers; j++) {\n        if (i !== j) {\n          const playerB = cards[j];\n          if (rankings[playerA].opponents[playerB]) {\n            const totalGamesAgainstOpponent = rankings[playerA].opponents[playerB].wins + rankings[playerA].opponents[playerB].losses + rankings[playerA].opponents[playerB].ties;\n            const winRatio = rankings[playerA].opponents[playerB].wins / totalGamesAgainstOpponent;\n            const lossRatio = rankings[playerA].opponents[playerB].losses / totalGamesAgainstOpponent;\n            const ratingDifference = ratings[playerB] - ratings[playerA];\n            const expectedScore = pnorm(ratingDifference, 0, 2000 / 7, 1);\n            const actualScore = winRatio + 0.5 * rankings[playerA].opponents[playerB].ties / totalGamesAgainstOpponent;\n            const delta = K * (actualScore - expectedScore);\n            ratings[playerA] += delta;\n          }\n        }\n      }\n    }\n    console.log(ratings);\n    const sortedUserRankings = Object.entries(ratings).sort((a, b) => b[1] - a[1]);\n    setUserRankings(sortedUserRankings);\n  }, [outputData]);\n  function pnorm(x, mean, sd, upperTail) {\n    const q = (x - mean) / sd;\n    return upperTail ? (1 - Math.atan(q) / Math.PI) * 0.5 : Math.atan(q) / Math.PI + 0.5;\n  }\n  useEffect(() => {\n    // Convert selected cards to an array of card IDs\n    const cardIds = selectedCards.map(card => card.ID);\n\n    // Define the demographics\n    const demographics = selectedDemographic;\n\n    // Send request to server\n    axios.post(\"/data/rankings\", {\n      cards: cardIds,\n      demographics: demographics\n    }).then(response => {\n      const sortedPublicRankings = Object.entries(response.data.ratings).sort((a, b) => b[1] - a[1]);\n      setRankings(sortedPublicRankings);\n      setPublicRankings(sortedPublicRankings);\n    }).catch(error => {\n      console.error(\"Error:\", error);\n    });\n  }, [selectedCards, selectedDemographic]);\n  const cardIdToTitle = {};\n  selectedCards.forEach(card => {\n    cardIdToTitle[card.ID] = card.title;\n  });\n  // Create a color scale\n  const colorScale = chroma.scale([\"#9780FF\", \"#ff5c97\"]).mode(\"lch\").colors(selectedCards.length);\n  const cardIdToColor = {};\n  selectedCards.forEach((card, index) => {\n    cardIdToColor[card.ID] = colorScale[index];\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"rankings\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rankings-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Explore your game results and see how you compare with others. See how you ranked the technologies and how it matches up to others.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"middle-rankings\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"middle-rankings-columns\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Your Rankings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"middle-rankings-columns\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"demographicType\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"demographicType\",\n          value: selectedDemographic,\n          onChange: e => setSelectedDemographic(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Demographic Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"gender\",\n            children: \"Gender\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"race\",\n            children: \"Race\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"tech\",\n            children: \"Tech Experience\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"education\",\n            children: \"Education Level\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bottom-rankings\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rankings-columns\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"acceptable\",\n          children: \"Most Acceptable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), userRankings ? userRankings.map(_ref2 => {\n          let [id, rank] = _ref2;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-ranking\",\n            style: {\n              borderColor: cardIdToColor[id],\n              borderWidth: \".5vw\",\n              borderStyle: \"solid\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"card-text\",\n              children: cardIdToTitle[id].replace(\"AI system designed for \", \"\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 17\n            }, this)\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 15\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"acceptable\",\n          children: \"Least Acceptable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rankings-columns\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"acceptable\",\n          children: \"Most Acceptable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), publicRankings ? publicRankings.map(_ref3 => {\n          let [id, rank] = _ref3;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-ranking\",\n            style: {\n              borderColor: cardIdToColor[id],\n              borderWidth: \".5vw\",\n              borderStyle: \"solid\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"card-text\",\n              children: cardIdToTitle[id].replace(\"AI system designed for \", \"\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 17\n            }, this)\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"acceptable\",\n          children: \"Least Acceptable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n};\n_s(Rankings, \"yX5uoNLH0bkH0vltluGBr8CdXnc=\");\n_c = Rankings;\nexport default Rankings;\nvar _c;\n$RefreshReg$(_c, \"Rankings\");","map":{"version":3,"names":["React","useEffect","useState","axios","Button","chroma","jsxDEV","_jsxDEV","Rankings","_ref","_s","outputData","selectedCards","rankings","setRankings","userRankings","setUserRankings","publicRankings","setPublicRankings","selectedDemographic","setSelectedDemographic","Race","console","log","ratings","K","cards","map","card","ID","forEach","wins","losses","ties","opponents","matchups","CardMatchups","matchup","Card1","Card2","Answer","winner","loser","numPlayers","length","i","playerA","j","playerB","totalGamesAgainstOpponent","winRatio","lossRatio","ratingDifference","expectedScore","pnorm","actualScore","delta","sortedUserRankings","Object","entries","sort","a","b","x","mean","sd","upperTail","q","Math","atan","PI","cardIds","demographics","post","then","response","sortedPublicRankings","data","catch","error","cardIdToTitle","title","colorScale","scale","mode","colors","cardIdToColor","index","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","value","onChange","e","target","_ref2","rank","style","borderColor","borderWidth","borderStyle","replace","_ref3","_c","$RefreshReg$"],"sources":["C:/Users/lpana/OneDrive/Documents/gameIterations/scoreUpdate/src/components/Rankings.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Button from \"./Button\";\r\nimport \"./styles/Rankings.css\";\r\nimport chroma from \"chroma-js\";\r\n\r\nconst Rankings = ({ outputData, selectedCards }) => {\r\n  const [rankings, setRankings] = useState(null);\r\n  const [userRankings, setUserRankings] = useState(null);\r\n  const [publicRankings, setPublicRankings] = useState(null);\r\n  const [selectedDemographic, setSelectedDemographic] = useState({\r\n    Race: \"White\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log(\"outputData changed:\", outputData);\r\n  }, [outputData]);\r\n\r\n  useEffect(() => {\r\n    let rankings = {};\r\n    let ratings = {};\r\n    const K = 40;\r\n    const cards = selectedCards.map((card) => card.ID);\r\n    // Initialize rankings object and ratings with player's cards\r\n    cards.forEach((card) => {\r\n      rankings[card] = { wins: 0, losses: 0, ties: 0, opponents: {} };\r\n      ratings[card] = 1800; // default rating\r\n    });\r\n\r\n    const matchups = outputData.CardMatchups;\r\n\r\n    // Iterate through all the matchups\r\n    matchups.forEach((matchup) => {\r\n      // Initialize the opponents\r\n      if (rankings[matchup.Card1] && rankings[matchup.Card2]) {\r\n        if (!rankings[matchup.Card1].opponents[matchup.Card2]) {\r\n          rankings[matchup.Card1].opponents[matchup.Card2] = {\r\n            wins: 0,\r\n            losses: 0,\r\n            ties: 0,\r\n          };\r\n        }\r\n\r\n        if (!rankings[matchup.Card2].opponents[matchup.Card1]) {\r\n          rankings[matchup.Card2].opponents[matchup.Card1] = {\r\n            wins: 0,\r\n            losses: 0,\r\n            ties: 0,\r\n          };\r\n        }\r\n\r\n        if (matchup.Answer === \"Skip\") {\r\n          // It's a tie\r\n          rankings[matchup.Card1].ties += 1;\r\n          rankings[matchup.Card2].ties += 1;\r\n          rankings[matchup.Card1].opponents[matchup.Card2].ties += 1;\r\n          rankings[matchup.Card2].opponents[matchup.Card1].ties += 1;\r\n        } else {\r\n          // There is a winner\r\n          const winner = matchup.Answer;\r\n          const loser =\r\n            winner === matchup.Card1 ? matchup.Card2 : matchup.Card1;\r\n\r\n          rankings[winner].wins += 1;\r\n          rankings[loser].losses += 1;\r\n\r\n          rankings[winner].opponents[loser].losses += 1;\r\n          rankings[loser].opponents[winner].wins += 1;\r\n        }\r\n      }\r\n    });\r\n\r\n    // Calculate ratings using the relative logistic method\r\n    const numPlayers = cards.length;\r\n\r\n    for (let i = 0; i < numPlayers; i++) {\r\n      const playerA = cards[i];\r\n\r\n      for (let j = 0; j < numPlayers; j++) {\r\n        if (i !== j) {\r\n          const playerB = cards[j];\r\n\r\n          if (rankings[playerA].opponents[playerB]) {\r\n            const totalGamesAgainstOpponent =\r\n              rankings[playerA].opponents[playerB].wins +\r\n              rankings[playerA].opponents[playerB].losses +\r\n              rankings[playerA].opponents[playerB].ties;\r\n\r\n            const winRatio =\r\n              rankings[playerA].opponents[playerB].wins /\r\n              totalGamesAgainstOpponent;\r\n            const lossRatio =\r\n              rankings[playerA].opponents[playerB].losses /\r\n              totalGamesAgainstOpponent;\r\n\r\n            const ratingDifference = ratings[playerB] - ratings[playerA];\r\n            const expectedScore = pnorm(ratingDifference, 0, 2000 / 7, 1);\r\n            const actualScore =\r\n              winRatio +\r\n              (0.5 * rankings[playerA].opponents[playerB].ties) /\r\n                totalGamesAgainstOpponent;\r\n\r\n            const delta = K * (actualScore - expectedScore);\r\n            ratings[playerA] += delta;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    console.log(ratings);\r\n    const sortedUserRankings = Object.entries(ratings).sort(\r\n      (a, b) => b[1] - a[1]\r\n    );\r\n\r\n    setUserRankings(sortedUserRankings);\r\n  }, [outputData]);\r\n\r\n  function pnorm(x, mean, sd, upperTail) {\r\n    const q = (x - mean) / sd;\r\n    return upperTail\r\n      ? (1 - Math.atan(q) / Math.PI) * 0.5\r\n      : Math.atan(q) / Math.PI + 0.5;\r\n  }\r\n\r\n  useEffect(() => {\r\n    // Convert selected cards to an array of card IDs\r\n    const cardIds = selectedCards.map((card) => card.ID);\r\n\r\n    // Define the demographics\r\n    const demographics = selectedDemographic;\r\n\r\n    // Send request to server\r\n    axios\r\n      .post(\"/data/rankings\", { cards: cardIds, demographics: demographics })\r\n      .then((response) => {\r\n        const sortedPublicRankings = Object.entries(response.data.ratings).sort(\r\n          (a, b) => b[1] - a[1]\r\n        );\r\n        setRankings(sortedPublicRankings);\r\n        setPublicRankings(sortedPublicRankings);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error:\", error);\r\n      });\r\n  }, [selectedCards, selectedDemographic]);\r\n\r\n  const cardIdToTitle = {};\r\n  selectedCards.forEach((card) => {\r\n    cardIdToTitle[card.ID] = card.title;\r\n  });\r\n  // Create a color scale\r\n  const colorScale = chroma\r\n    .scale([\"#9780FF\", \"#ff5c97\"])\r\n    .mode(\"lch\")\r\n    .colors(selectedCards.length);\r\n\r\n  const cardIdToColor = {};\r\n  selectedCards.forEach((card, index) => {\r\n    cardIdToColor[card.ID] = colorScale[index];\r\n  });\r\n\r\n  return (\r\n    <div className=\"rankings\">\r\n      <div className=\"rankings-header\">\r\n        <h1>Results</h1>\r\n        <h3>\r\n          Explore your game results and see how you compare with others. See how\r\n          you ranked the technologies and how it matches up to others.\r\n        </h3>\r\n      </div>\r\n      <div className=\"middle-rankings\">\r\n        <div className=\"middle-rankings-columns\">\r\n          <h2>Your Rankings</h2>\r\n        </div>\r\n        <div className=\"middle-rankings-columns\">\r\n          <label htmlFor=\"demographicType\"></label>\r\n          <select\r\n            id=\"demographicType\"\r\n            value={selectedDemographic}\r\n            onChange={(e) => setSelectedDemographic(e.target.value)}\r\n          >\r\n            <option value=\"\">Select Demographic Type</option>\r\n            <option value=\"gender\">Gender</option>\r\n            <option value=\"race\">Race</option>\r\n            <option value=\"tech\">Tech Experience</option>\r\n            <option value=\"education\">Education Level</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n      <div className=\"bottom-rankings\">\r\n        <div className=\"rankings-columns\">\r\n          <p className=\"acceptable\">Most Acceptable</p>\r\n          {userRankings ? (\r\n            userRankings.map(([id, rank]) => (\r\n              <div\r\n                className=\"card-ranking\"\r\n                key={id}\r\n                style={{\r\n                  borderColor: cardIdToColor[id],\r\n                  borderWidth: \".5vw\",\r\n                  borderStyle: \"solid\",\r\n                }}\r\n              >\r\n                <p className=\"card-text\">\r\n                  {cardIdToTitle[id].replace(\"AI system designed for \", \"\")}\r\n                </p>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <p>Loading...</p>\r\n          )}{\" \"}\r\n          <p className=\"acceptable\">Least Acceptable</p>\r\n        </div>\r\n        <div className=\"rankings-columns\">\r\n          <p className=\"acceptable\">Most Acceptable</p>\r\n\r\n          {publicRankings ? (\r\n            publicRankings.map(([id, rank]) => (\r\n              <div\r\n                className=\"card-ranking\"\r\n                key={id}\r\n                style={{\r\n                  borderColor: cardIdToColor[id],\r\n                  borderWidth: \".5vw\",\r\n                  borderStyle: \"solid\",\r\n                }}\r\n              >\r\n                <p className=\"card-text\">\r\n                  {cardIdToTitle[id].replace(\"AI system designed for \", \"\")}\r\n                </p>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <p>Loading...</p>\r\n          )}\r\n          <p className=\"acceptable\">Least Acceptable</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Rankings;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}