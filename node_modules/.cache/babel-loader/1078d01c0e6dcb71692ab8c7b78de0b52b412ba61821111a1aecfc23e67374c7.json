{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lpana\\\\OneDrive\\\\Documents\\\\gameIterations\\\\scoreUpdate\\\\src\\\\components\\\\ScoreLine.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = {\n  0: {\n    low_score: 0,\n    average_score: 0,\n    high_score: 49\n  },\n  1: {\n    low_score: 0,\n    average_score: 19,\n    high_score: 49\n  },\n  2: {\n    low_score: 0,\n    average_score: 38,\n    high_score: 98\n  },\n  3: {\n    low_score: 0,\n    average_score: 55,\n    high_score: 147\n  },\n  4: {\n    low_score: 0,\n    average_score: 70,\n    high_score: 179\n  },\n  5: {\n    low_score: 0,\n    average_score: 85,\n    high_score: 228\n  },\n  6: {\n    low_score: 0,\n    average_score: 102,\n    high_score: 272\n  }\n};\nconst maxHighScore = Math.max(...Object.values(data).map(d => d.high_score));\nfunction ScoreLine(_ref) {\n  _s();\n  let {\n    userScore,\n    stage\n  } = _ref;\n  const ref = useRef();\n  console.log(userScore, stage);\n  useEffect(() => {\n    const svg = d3.select(ref.current);\n    const svgWidth = +svg.node().getBoundingClientRect().width;\n    const score = data[stage];\n    const xScale = d3.scaleLinear().domain([0, score.high_score]).range([0, svgWidth]);\n    const colorScale = d3.scaleLinear().domain([0, maxHighScore]).range([\"blue\", \"red\"]);\n\n    // If it's the first time, add all elements. If not, only update necessary ones.\n    if (svg.select(\"line\").empty()) {\n      // Add line for current stage\n      svg.append(\"line\").attr(\"x1\", xScale(0)) // low end of the line always at 0\n      .attr(\"x2\", xScale(maxHighScore)) // high end of the line always at max high score\n      .attr(\"y1\", 50).attr(\"y2\", 50).attr(\"stroke\", colorScale(score.average_score)).attr(\"stroke-width\", 2);\n\n      // Add vertical line for average\n      svg.append(\"line\").attr(\"class\", \"avg-line\").attr(\"x1\", xScale(score.average_score)).attr(\"x2\", xScale(score.average_score)).attr(\"y1\", 40).attr(\"y2\", 60).attr(\"stroke\", \"black\").attr(\"stroke-width\", 1);\n\n      // Add circle for user score\n      svg.append(\"circle\").attr(\"class\", \"user-circle\").attr(\"cx\", xScale(userScore)).attr(\"cy\", 50).attr(\"r\", 5).attr(\"fill\", \"green\");\n\n      // Add text for low, average, high\n      svg.append(\"text\").attr(\"class\", \"low-text\").attr(\"x\", 0).attr(\"y\", 80).text(\"Low\");\n      svg.append(\"text\").attr(\"class\", \"avg-text\").attr(\"x\", xScale(score.average_score)).attr(\"y\", 80).text(\"Avg\");\n      svg.append(\"text\").attr(\"class\", \"high-text\").attr(\"x\", svgWidth).attr(\"y\", 80).attr(\"style\", \"text-anchor: end;\").text(\"High\");\n    }\n\n    // Update elements\n    svg.select(\"line\").attr(\"stroke\", colorScale(score.average_score));\n    svg.select(\".user-circle\").transition().duration(1000).attr(\"cx\", xScale(userScore));\n    svg.select(\".avg-line\").transition().duration(1000).attr(\"x1\", xScale(score.average_score)).attr(\"x2\", xScale(score.average_score));\n    svg.select(\".avg-text\").attr(\"x\", xScale(score.average_score)).text(\"Avg\");\n  }, [userScore, stage]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: ref,\n    style: {\n      width: \"100%\",\n      height: \"200px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 10\n  }, this);\n}\n_s(ScoreLine, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n_c = ScoreLine;\nexport default ScoreLine;\nvar _c;\n$RefreshReg$(_c, \"ScoreLine\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","data","low_score","average_score","high_score","maxHighScore","Math","max","Object","values","map","d","ScoreLine","_ref","_s","userScore","stage","ref","console","log","svg","select","current","svgWidth","node","getBoundingClientRect","width","score","xScale","scaleLinear","domain","range","colorScale","empty","append","attr","text","transition","duration","style","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/lpana/OneDrive/Documents/gameIterations/scoreUpdate/src/components/ScoreLine.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst data = {\r\n  0: { low_score: 0, average_score: 0, high_score: 49 },\r\n  1: { low_score: 0, average_score: 19, high_score: 49 },\r\n  2: { low_score: 0, average_score: 38, high_score: 98 },\r\n  3: { low_score: 0, average_score: 55, high_score: 147 },\r\n  4: { low_score: 0, average_score: 70, high_score: 179 },\r\n  5: { low_score: 0, average_score: 85, high_score: 228 },\r\n  6: { low_score: 0, average_score: 102, high_score: 272 },\r\n};\r\n\r\nconst maxHighScore = Math.max(...Object.values(data).map((d) => d.high_score));\r\n\r\nfunction ScoreLine({ userScore, stage }) {\r\n  const ref = useRef();\r\n  console.log(userScore, stage);\r\n  useEffect(() => {\r\n    const svg = d3.select(ref.current);\r\n    const svgWidth = +svg.node().getBoundingClientRect().width;\r\n    const score = data[stage];\r\n    const xScale = d3\r\n      .scaleLinear()\r\n      .domain([0, score.high_score])\r\n      .range([0, svgWidth]);\r\n    const colorScale = d3\r\n      .scaleLinear()\r\n      .domain([0, maxHighScore])\r\n      .range([\"blue\", \"red\"]);\r\n\r\n    // If it's the first time, add all elements. If not, only update necessary ones.\r\n    if (svg.select(\"line\").empty()) {\r\n      // Add line for current stage\r\n      svg\r\n        .append(\"line\")\r\n        .attr(\"x1\", xScale(0)) // low end of the line always at 0\r\n        .attr(\"x2\", xScale(maxHighScore)) // high end of the line always at max high score\r\n        .attr(\"y1\", 50)\r\n        .attr(\"y2\", 50)\r\n        .attr(\"stroke\", colorScale(score.average_score))\r\n        .attr(\"stroke-width\", 2);\r\n\r\n      // Add vertical line for average\r\n      svg\r\n        .append(\"line\")\r\n        .attr(\"class\", \"avg-line\")\r\n        .attr(\"x1\", xScale(score.average_score))\r\n        .attr(\"x2\", xScale(score.average_score))\r\n        .attr(\"y1\", 40)\r\n        .attr(\"y2\", 60)\r\n        .attr(\"stroke\", \"black\")\r\n        .attr(\"stroke-width\", 1);\r\n\r\n      // Add circle for user score\r\n      svg\r\n        .append(\"circle\")\r\n        .attr(\"class\", \"user-circle\")\r\n        .attr(\"cx\", xScale(userScore))\r\n        .attr(\"cy\", 50)\r\n        .attr(\"r\", 5)\r\n        .attr(\"fill\", \"green\");\r\n\r\n      // Add text for low, average, high\r\n      svg\r\n        .append(\"text\")\r\n        .attr(\"class\", \"low-text\")\r\n        .attr(\"x\", 0)\r\n        .attr(\"y\", 80)\r\n        .text(\"Low\");\r\n      svg\r\n        .append(\"text\")\r\n        .attr(\"class\", \"avg-text\")\r\n        .attr(\"x\", xScale(score.average_score))\r\n        .attr(\"y\", 80)\r\n        .text(\"Avg\");\r\n      svg\r\n        .append(\"text\")\r\n        .attr(\"class\", \"high-text\")\r\n        .attr(\"x\", svgWidth)\r\n        .attr(\"y\", 80)\r\n        .attr(\"style\", \"text-anchor: end;\")\r\n        .text(\"High\");\r\n    }\r\n\r\n    // Update elements\r\n    svg.select(\"line\").attr(\"stroke\", colorScale(score.average_score));\r\n    svg\r\n      .select(\".user-circle\")\r\n      .transition()\r\n      .duration(1000)\r\n      .attr(\"cx\", xScale(userScore));\r\n    svg\r\n      .select(\".avg-line\")\r\n      .transition()\r\n      .duration(1000)\r\n      .attr(\"x1\", xScale(score.average_score))\r\n      .attr(\"x2\", xScale(score.average_score));\r\n    svg.select(\".avg-text\").attr(\"x\", xScale(score.average_score)).text(\"Avg\");\r\n  }, [userScore, stage]);\r\n\r\n  return <svg ref={ref} style={{ width: \"100%\", height: \"200px\" }} />;\r\n}\r\n\r\nexport default ScoreLine;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}