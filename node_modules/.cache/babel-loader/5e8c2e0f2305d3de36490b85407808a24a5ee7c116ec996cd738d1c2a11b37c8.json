{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lpana\\\\OneDrive\\\\Documents\\\\gameIterations\\\\scoreUpdate\\\\src\\\\components\\\\Rankings.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Button from \"./Button\";\nimport FlipMove from \"react-flip-move\";\nimport Modal from \"react-modal\";\nimport \"./styles/Rankings.css\";\nimport chroma from \"chroma-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Rankings = _ref => {\n  _s();\n  let {\n    outputData,\n    selectedCards\n  } = _ref;\n  const [rankings, setRankings] = useState(null);\n  const [userRankings, setUserRankings] = useState(null);\n  const [publicRankings, setPublicRankings] = useState(null);\n  const [demographic, setDemographic] = useState({\n    type: \"\",\n    value: \"\"\n  });\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedCardData, setSelectedCardData] = useState({});\n  useEffect(() => {\n    console.log(\"outputData changed:\", outputData);\n  }, [outputData]);\n  useEffect(() => {\n    const cardIds = selectedCards.map(card => card.ID);\n    axios.post(\"/data/rankings\", {\n      cards: cardIds,\n      demographics: demographic\n    }).then(response => {\n      const sortedPublicRankings = Object.entries(response.data.ratings).sort((a, b) => b[1] - a[1]);\n      setRankings(sortedPublicRankings);\n      setPublicRankings(sortedPublicRankings);\n      console.log(sortedPublicRankings);\n    }).catch(error => {\n      console.error(\"Error:\", error);\n    });\n  }, []);\n  useEffect(() => {\n    let rankings = {};\n    let ratings = {};\n    const K = 40;\n    const cards = selectedCards.map(card => card.ID);\n    // Initialize rankings object and ratings with player's cards\n    cards.forEach(card => {\n      rankings[card] = {\n        wins: 0,\n        losses: 0,\n        ties: 0,\n        opponents: {}\n      };\n      ratings[card] = 1800; // default rating\n    });\n\n    const matchups = outputData.CardMatchups;\n\n    // Iterate through all the matchups\n    matchups.forEach(matchup => {\n      // Initialize the opponents\n      if (rankings[matchup.Card1] && rankings[matchup.Card2]) {\n        if (!rankings[matchup.Card1].opponents[matchup.Card2]) {\n          rankings[matchup.Card1].opponents[matchup.Card2] = {\n            wins: 0,\n            losses: 0,\n            ties: 0\n          };\n        }\n        if (!rankings[matchup.Card2].opponents[matchup.Card1]) {\n          rankings[matchup.Card2].opponents[matchup.Card1] = {\n            wins: 0,\n            losses: 0,\n            ties: 0\n          };\n        }\n        if (matchup.Answer === \"Skip\") {\n          // It's a tie\n          rankings[matchup.Card1].ties += 1;\n          rankings[matchup.Card2].ties += 1;\n          rankings[matchup.Card1].opponents[matchup.Card2].ties += 1;\n          rankings[matchup.Card2].opponents[matchup.Card1].ties += 1;\n        } else {\n          // There is a winner\n          const winner = matchup.Answer;\n          const loser = winner === matchup.Card1 ? matchup.Card2 : matchup.Card1;\n          rankings[winner].wins += 1;\n          rankings[loser].losses += 1;\n          rankings[winner].opponents[loser].losses += 1;\n          rankings[loser].opponents[winner].wins += 1;\n        }\n      }\n    });\n\n    // Calculate ratings using the relative logistic method\n    const numPlayers = cards.length;\n    for (let i = 0; i < numPlayers; i++) {\n      const playerA = cards[i];\n      for (let j = 0; j < numPlayers; j++) {\n        if (i !== j) {\n          const playerB = cards[j];\n          if (rankings[playerA].opponents[playerB]) {\n            const totalGamesAgainstOpponent = rankings[playerA].opponents[playerB].wins + rankings[playerA].opponents[playerB].losses + rankings[playerA].opponents[playerB].ties;\n            const winRatio = rankings[playerA].opponents[playerB].wins / totalGamesAgainstOpponent;\n            const lossRatio = rankings[playerA].opponents[playerB].losses / totalGamesAgainstOpponent;\n            const ratingDifference = ratings[playerB] - ratings[playerA];\n            const expectedScore = pnorm(ratingDifference, 0, 2000 / 7, 1);\n            const actualScore = winRatio + 0.5 * rankings[playerA].opponents[playerB].ties / totalGamesAgainstOpponent;\n            const delta = K * (actualScore - expectedScore);\n            ratings[playerA] += delta;\n          }\n        }\n      }\n    }\n    const sortedUserRankings = Object.entries(ratings).sort((a, b) => a[1] - b[1]);\n    setUserRankings(sortedUserRankings);\n  }, [outputData]);\n  function pnorm(x, mean, sd, upperTail) {\n    const q = (x - mean) / sd;\n    return upperTail ? (1 - Math.atan(q) / Math.PI) * 0.5 : Math.atan(q) / Math.PI + 0.5;\n  }\n  useEffect(() => {\n    // Convert selected cards to an array of card IDs\n    const cardIds = selectedCards.map(card => card.ID);\n\n    // Define the demographics\n    const demographics = {\n      [demographic.type]: demographic.value\n    };\n\n    // Check if both type and value are set\n    if (demographic.type && demographic.value) {\n      // Send request to server\n      axios.post(\"/data/rankings\", {\n        cards: cardIds,\n        demographics: demographics\n      }).then(response => {\n        const sortedPublicRankings = Object.entries(response.data.ratings).sort((a, b) => a[1] - b[1]);\n        setRankings(sortedPublicRankings);\n        setPublicRankings(sortedPublicRankings);\n        console.log(sortedPublicRankings);\n      }).catch(error => {\n        console.error(\"Error:\", error);\n      });\n    }\n  }, [selectedCards, demographic.type, demographic.value]);\n  const cardIdToTitle = {};\n  selectedCards.forEach(card => {\n    cardIdToTitle[card.ID] = card.title;\n  });\n  // Create a color scale\n  const colorScale = chroma.scale([\"#9780FF\", \"#ff5c97\"]).mode(\"lch\").colors(selectedCards.length);\n  const cardIdToColor = {};\n  selectedCards.forEach((card, index) => {\n    cardIdToColor[card.ID] = colorScale[index];\n  });\n  const openModal = cardData => {\n    setSelectedCardData(cardData);\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"rankings\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rankings-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Explore your game results and see how you compare with others. See how you ranked the technologies and how it matches up to others.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"middle-rankings\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"middle-rankings-single-column\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"middle-rankings-columns\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"demographic-selection\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"demographicType\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"rankings-selection\",\n              id: \"demographicType\",\n              value: demographic.type,\n              onChange: e => setDemographic({\n                ...demographic,\n                type: e.target.value,\n                value: \"\"\n              }),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Demographic Type\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Gender\",\n                children: \"Gender\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Race\",\n                children: \"Race\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Tech\",\n                children: \"Tech Experience\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Education\",\n                children: \"Education Level\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"middle-rankings-columns\",\n          children: demographic.type && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"demographic-selection\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"demographicValue\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 17\n            }, this), demographic.type === \"Gender\" && /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"rankings-selection\",\n              id: \"demographicValue\",\n              value: demographic.value,\n              onChange: e => setDemographic({\n                ...demographic,\n                value: e.target.value\n              }),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Gender\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Male\",\n                children: \"Male\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Female\",\n                children: \"Female\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Other\",\n                children: \"Other\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Prefer not to say\",\n                children: \"Prefer not to say\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 19\n            }, this), demographic.type === \"Race\" && /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"rankings-selection\",\n              id: \"demographicValue\",\n              value: demographic.value,\n              onChange: e => setDemographic({\n                ...demographic,\n                value: e.target.value\n              }),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Race\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"White\",\n                children: \"White\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Black\",\n                children: \"Black\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Asian\",\n                children: \"Asian\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 263,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Other\",\n                children: \"Other\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 19\n            }, this), demographic.type === \"Tech\" && /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"rankings-selection\",\n              id: \"demographicValue\",\n              value: demographic.value,\n              onChange: e => setDemographic({\n                ...demographic,\n                value: e.target.value\n              }),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Tech Experience\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 276,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Beginner\",\n                children: \"Beginner\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Intermediate\",\n                children: \"Intermediate\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Expert\",\n                children: \"Expert\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 19\n            }, this), demographic.type === \"Education\" && /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"rankings-selection\",\n              id: \"demographicValue\",\n              value: demographic.value,\n              onChange: e => setDemographic({\n                ...demographic,\n                value: e.target.value\n              }),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Education Level\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 291,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"High School\",\n                children: \"High School\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 292,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Bachelors\",\n                children: \"Bachelors\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Masters\",\n                children: \"Masters\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 294,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"PhD\",\n                children: \"PhD\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"top-rankings\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"top-rankings-columns\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Your Rankings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"top-rankings-columns\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Public Rankings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bottom-rankings\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rankings-columns\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"card-text\",\n          children: \"Most Acceptable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this), userRankings ? userRankings.map(_ref2 => {\n          let [id, rank] = _ref2;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-ranking\",\n            onClick: () => openModal({\n              id\n            }),\n            style: {\n              borderColor: cardIdToColor[id],\n              borderWidth: \".5vw\",\n              borderStyle: \"solid\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"card-text\",\n              children: cardIdToTitle[id].replace(\"AI system designed for \", \"\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 17\n            }, this)\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 15\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"card-text\",\n          children: \"Least Acceptable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FlipMove, {\n        className: \"rankings-columns\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"card-text\",\n          children: \"Most Acceptable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }, this), publicRankings ? publicRankings.map(_ref3 => {\n          let [id, rank] = _ref3;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-ranking\",\n            onClick: () => openModal({\n              id\n            }),\n            style: {\n              borderColor: cardIdToColor[id],\n              borderWidth: \".5vw\",\n              borderStyle: \"solid\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"card-text\",\n              children: cardIdToTitle[id].replace(\"AI system designed for \", \"\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 17\n            }, this)\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 15\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"card-text\",\n          children: \"Least Acceptable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: closeModal,\n      contentLabel: \"Card Information\"\n      // className=\"my-modal\"\n      // overlayClassName=\"my-modal-overlay\"\n      ,\n      style: {\n        overlay: {\n          backgroundColor: \"rgba(0, 0, 0, 0.5)\"\n        },\n        content: {\n          top: \"50%\",\n          left: \"50%\",\n          right: \"auto\",\n          bottom: \"auto\",\n          marginRight: \"-50%\",\n          transform: \"translate(-50%, -50%)\",\n          width: \"60vw\",\n          height: \"70vh\",\n          borderRadius: \"1em\"\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"modal-title\",\n        children: \"Card Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"modal-text\",\n        children: [\"Card ID: \", selectedCardData.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"modal-text\",\n        children: [\"Card Rank: \", selectedCardData.rank]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"modal-close-btn\",\n        onClick: closeModal,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n};\n_s(Rankings, \"1JC0zwUsstf1tevOAP6DV9H6lZg=\");\n_c = Rankings;\nexport default Rankings;\nvar _c;\n$RefreshReg$(_c, \"Rankings\");","map":{"version":3,"names":["React","useEffect","useState","axios","Button","FlipMove","Modal","chroma","jsxDEV","_jsxDEV","Rankings","_ref","_s","outputData","selectedCards","rankings","setRankings","userRankings","setUserRankings","publicRankings","setPublicRankings","demographic","setDemographic","type","value","isModalOpen","setIsModalOpen","selectedCardData","setSelectedCardData","console","log","cardIds","map","card","ID","post","cards","demographics","then","response","sortedPublicRankings","Object","entries","data","ratings","sort","a","b","catch","error","K","forEach","wins","losses","ties","opponents","matchups","CardMatchups","matchup","Card1","Card2","Answer","winner","loser","numPlayers","length","i","playerA","j","playerB","totalGamesAgainstOpponent","winRatio","lossRatio","ratingDifference","expectedScore","pnorm","actualScore","delta","sortedUserRankings","x","mean","sd","upperTail","q","Math","atan","PI","cardIdToTitle","title","colorScale","scale","mode","colors","cardIdToColor","index","openModal","cardData","closeModal","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","e","target","_ref2","rank","onClick","style","borderColor","borderWidth","borderStyle","replace","_ref3","isOpen","onRequestClose","contentLabel","overlay","backgroundColor","content","top","left","right","bottom","marginRight","transform","width","height","borderRadius","_c","$RefreshReg$"],"sources":["C:/Users/lpana/OneDrive/Documents/gameIterations/scoreUpdate/src/components/Rankings.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Button from \"./Button\";\r\nimport FlipMove from \"react-flip-move\";\r\nimport Modal from \"react-modal\";\r\n\r\nimport \"./styles/Rankings.css\";\r\nimport chroma from \"chroma-js\";\r\n\r\nconst Rankings = ({ outputData, selectedCards }) => {\r\n  const [rankings, setRankings] = useState(null);\r\n  const [userRankings, setUserRankings] = useState(null);\r\n  const [publicRankings, setPublicRankings] = useState(null);\r\n  const [demographic, setDemographic] = useState({ type: \"\", value: \"\" });\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [selectedCardData, setSelectedCardData] = useState({});\r\n\r\n  useEffect(() => {\r\n    console.log(\"outputData changed:\", outputData);\r\n  }, [outputData]);\r\n\r\n  useEffect(() => {\r\n    const cardIds = selectedCards.map((card) => card.ID);\r\n\r\n    axios\r\n      .post(\"/data/rankings\", { cards: cardIds, demographics: demographic })\r\n      .then((response) => {\r\n        const sortedPublicRankings = Object.entries(response.data.ratings).sort(\r\n          (a, b) => b[1] - a[1]\r\n        );\r\n        setRankings(sortedPublicRankings);\r\n        setPublicRankings(sortedPublicRankings);\r\n        console.log(sortedPublicRankings);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error:\", error);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let rankings = {};\r\n    let ratings = {};\r\n    const K = 40;\r\n    const cards = selectedCards.map((card) => card.ID);\r\n    // Initialize rankings object and ratings with player's cards\r\n    cards.forEach((card) => {\r\n      rankings[card] = { wins: 0, losses: 0, ties: 0, opponents: {} };\r\n      ratings[card] = 1800; // default rating\r\n    });\r\n\r\n    const matchups = outputData.CardMatchups;\r\n\r\n    // Iterate through all the matchups\r\n    matchups.forEach((matchup) => {\r\n      // Initialize the opponents\r\n      if (rankings[matchup.Card1] && rankings[matchup.Card2]) {\r\n        if (!rankings[matchup.Card1].opponents[matchup.Card2]) {\r\n          rankings[matchup.Card1].opponents[matchup.Card2] = {\r\n            wins: 0,\r\n            losses: 0,\r\n            ties: 0,\r\n          };\r\n        }\r\n\r\n        if (!rankings[matchup.Card2].opponents[matchup.Card1]) {\r\n          rankings[matchup.Card2].opponents[matchup.Card1] = {\r\n            wins: 0,\r\n            losses: 0,\r\n            ties: 0,\r\n          };\r\n        }\r\n\r\n        if (matchup.Answer === \"Skip\") {\r\n          // It's a tie\r\n          rankings[matchup.Card1].ties += 1;\r\n          rankings[matchup.Card2].ties += 1;\r\n          rankings[matchup.Card1].opponents[matchup.Card2].ties += 1;\r\n          rankings[matchup.Card2].opponents[matchup.Card1].ties += 1;\r\n        } else {\r\n          // There is a winner\r\n          const winner = matchup.Answer;\r\n          const loser =\r\n            winner === matchup.Card1 ? matchup.Card2 : matchup.Card1;\r\n\r\n          rankings[winner].wins += 1;\r\n          rankings[loser].losses += 1;\r\n\r\n          rankings[winner].opponents[loser].losses += 1;\r\n          rankings[loser].opponents[winner].wins += 1;\r\n        }\r\n      }\r\n    });\r\n\r\n    // Calculate ratings using the relative logistic method\r\n    const numPlayers = cards.length;\r\n\r\n    for (let i = 0; i < numPlayers; i++) {\r\n      const playerA = cards[i];\r\n\r\n      for (let j = 0; j < numPlayers; j++) {\r\n        if (i !== j) {\r\n          const playerB = cards[j];\r\n\r\n          if (rankings[playerA].opponents[playerB]) {\r\n            const totalGamesAgainstOpponent =\r\n              rankings[playerA].opponents[playerB].wins +\r\n              rankings[playerA].opponents[playerB].losses +\r\n              rankings[playerA].opponents[playerB].ties;\r\n\r\n            const winRatio =\r\n              rankings[playerA].opponents[playerB].wins /\r\n              totalGamesAgainstOpponent;\r\n            const lossRatio =\r\n              rankings[playerA].opponents[playerB].losses /\r\n              totalGamesAgainstOpponent;\r\n\r\n            const ratingDifference = ratings[playerB] - ratings[playerA];\r\n            const expectedScore = pnorm(ratingDifference, 0, 2000 / 7, 1);\r\n            const actualScore =\r\n              winRatio +\r\n              (0.5 * rankings[playerA].opponents[playerB].ties) /\r\n                totalGamesAgainstOpponent;\r\n\r\n            const delta = K * (actualScore - expectedScore);\r\n            ratings[playerA] += delta;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const sortedUserRankings = Object.entries(ratings).sort(\r\n      (a, b) => a[1] - b[1]\r\n    );\r\n\r\n    setUserRankings(sortedUserRankings);\r\n  }, [outputData]);\r\n\r\n  function pnorm(x, mean, sd, upperTail) {\r\n    const q = (x - mean) / sd;\r\n    return upperTail\r\n      ? (1 - Math.atan(q) / Math.PI) * 0.5\r\n      : Math.atan(q) / Math.PI + 0.5;\r\n  }\r\n\r\n  useEffect(() => {\r\n    // Convert selected cards to an array of card IDs\r\n    const cardIds = selectedCards.map((card) => card.ID);\r\n\r\n    // Define the demographics\r\n    const demographics = {\r\n      [demographic.type]: demographic.value,\r\n    };\r\n\r\n    // Check if both type and value are set\r\n    if (demographic.type && demographic.value) {\r\n      // Send request to server\r\n      axios\r\n        .post(\"/data/rankings\", { cards: cardIds, demographics: demographics })\r\n        .then((response) => {\r\n          const sortedPublicRankings = Object.entries(\r\n            response.data.ratings\r\n          ).sort((a, b) => a[1] - b[1]);\r\n          setRankings(sortedPublicRankings);\r\n          setPublicRankings(sortedPublicRankings);\r\n          console.log(sortedPublicRankings);\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error:\", error);\r\n        });\r\n    }\r\n  }, [selectedCards, demographic.type, demographic.value]);\r\n\r\n  const cardIdToTitle = {};\r\n  selectedCards.forEach((card) => {\r\n    cardIdToTitle[card.ID] = card.title;\r\n  });\r\n  // Create a color scale\r\n  const colorScale = chroma\r\n    .scale([\"#9780FF\", \"#ff5c97\"])\r\n    .mode(\"lch\")\r\n    .colors(selectedCards.length);\r\n\r\n  const cardIdToColor = {};\r\n  selectedCards.forEach((card, index) => {\r\n    cardIdToColor[card.ID] = colorScale[index];\r\n  });\r\n\r\n  const openModal = (cardData) => {\r\n    setSelectedCardData(cardData);\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"rankings\">\r\n      <div className=\"rankings-header\">\r\n        <h1>Results</h1>\r\n        <h3>\r\n          Explore your game results and see how you compare with others. See how\r\n          you ranked the technologies and how it matches up to others.\r\n        </h3>\r\n      </div>\r\n\r\n      <div className=\"middle-rankings\">\r\n        <div className=\"middle-rankings-single-column\">\r\n          <div className=\"middle-rankings-columns\">\r\n            <div className=\"demographic-selection\">\r\n              <label htmlFor=\"demographicType\"></label>\r\n              <select\r\n                className=\"rankings-selection\"\r\n                id=\"demographicType\"\r\n                value={demographic.type}\r\n                onChange={(e) =>\r\n                  setDemographic({\r\n                    ...demographic,\r\n                    type: e.target.value,\r\n                    value: \"\",\r\n                  })\r\n                }\r\n              >\r\n                <option value=\"\">Select Demographic Type</option>\r\n                <option value=\"Gender\">Gender</option>\r\n                <option value=\"Race\">Race</option>\r\n                <option value=\"Tech\">Tech Experience</option>\r\n                <option value=\"Education\">Education Level</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <div className=\"middle-rankings-columns\">\r\n            {demographic.type && (\r\n              <div className=\"demographic-selection\">\r\n                <label htmlFor=\"demographicValue\"></label>\r\n                {demographic.type === \"Gender\" && (\r\n                  <select\r\n                    className=\"rankings-selection\"\r\n                    id=\"demographicValue\"\r\n                    value={demographic.value}\r\n                    onChange={(e) =>\r\n                      setDemographic({ ...demographic, value: e.target.value })\r\n                    }\r\n                  >\r\n                    <option value=\"\">Select Gender</option>\r\n                    <option value=\"Male\">Male</option>\r\n                    <option value=\"Female\">Female</option>\r\n                    <option value=\"Other\">Other</option>\r\n                    <option value=\"Prefer not to say\">Prefer not to say</option>\r\n                  </select>\r\n                )}\r\n                {demographic.type === \"Race\" && (\r\n                  <select\r\n                    className=\"rankings-selection\"\r\n                    id=\"demographicValue\"\r\n                    value={demographic.value}\r\n                    onChange={(e) =>\r\n                      setDemographic({ ...demographic, value: e.target.value })\r\n                    }\r\n                  >\r\n                    <option value=\"\">Select Race</option>\r\n                    <option value=\"White\">White</option>\r\n                    <option value=\"Black\">Black</option>\r\n                    <option value=\"Asian\">Asian</option>\r\n                    <option value=\"Other\">Other</option>\r\n                  </select>\r\n                )}\r\n                {demographic.type === \"Tech\" && (\r\n                  <select\r\n                    className=\"rankings-selection\"\r\n                    id=\"demographicValue\"\r\n                    value={demographic.value}\r\n                    onChange={(e) =>\r\n                      setDemographic({ ...demographic, value: e.target.value })\r\n                    }\r\n                  >\r\n                    <option value=\"\">Select Tech Experience</option>\r\n                    <option value=\"Beginner\">Beginner</option>\r\n                    <option value=\"Intermediate\">Intermediate</option>\r\n                    <option value=\"Expert\">Expert</option>\r\n                  </select>\r\n                )}\r\n                {demographic.type === \"Education\" && (\r\n                  <select\r\n                    className=\"rankings-selection\"\r\n                    id=\"demographicValue\"\r\n                    value={demographic.value}\r\n                    onChange={(e) =>\r\n                      setDemographic({ ...demographic, value: e.target.value })\r\n                    }\r\n                  >\r\n                    <option value=\"\">Select Education Level</option>\r\n                    <option value=\"High School\">High School</option>\r\n                    <option value=\"Bachelors\">Bachelors</option>\r\n                    <option value=\"Masters\">Masters</option>\r\n                    <option value=\"PhD\">PhD</option>\r\n                  </select>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"top-rankings\">\r\n          <div className=\"top-rankings-columns\">\r\n            <h3>Your Rankings</h3>\r\n          </div>\r\n          <div className=\"top-rankings-columns\">\r\n            <h3>Public Rankings</h3>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"bottom-rankings\">\r\n        <div className=\"rankings-columns\">\r\n          <p className=\"card-text\">Most Acceptable</p>\r\n          {userRankings ? (\r\n            userRankings.map(([id, rank]) => (\r\n              <div\r\n                className=\"card-ranking\"\r\n                key={id}\r\n                onClick={() => openModal({ id })}\r\n                style={{\r\n                  borderColor: cardIdToColor[id],\r\n                  borderWidth: \".5vw\",\r\n                  borderStyle: \"solid\",\r\n                }}\r\n              >\r\n                <p className=\"card-text\">\r\n                  {cardIdToTitle[id].replace(\"AI system designed for \", \"\")}\r\n                </p>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <p>Loading...</p>\r\n          )}{\" \"}\r\n          <p className=\"card-text\">Least Acceptable</p>\r\n        </div>\r\n        <FlipMove className=\"rankings-columns\">\r\n          <p className=\"card-text\">Most Acceptable</p>\r\n\r\n          {publicRankings ? (\r\n            publicRankings.map(([id, rank]) => (\r\n              <div\r\n                className=\"card-ranking\"\r\n                key={id}\r\n                onClick={() => openModal({ id })}\r\n                style={{\r\n                  borderColor: cardIdToColor[id],\r\n                  borderWidth: \".5vw\",\r\n                  borderStyle: \"solid\",\r\n                }}\r\n              >\r\n                <p className=\"card-text\">\r\n                  {cardIdToTitle[id].replace(\"AI system designed for \", \"\")}\r\n                </p>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <p>Loading...</p>\r\n          )}\r\n\r\n          <p className=\"card-text\">Least Acceptable</p>\r\n        </FlipMove>\r\n      </div>\r\n      <Modal\r\n        isOpen={isModalOpen}\r\n        onRequestClose={closeModal}\r\n        contentLabel=\"Card Information\"\r\n        // className=\"my-modal\"\r\n        // overlayClassName=\"my-modal-overlay\"\r\n        style={{\r\n          overlay: {\r\n            backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n          },\r\n          content: {\r\n            top: \"50%\",\r\n            left: \"50%\",\r\n            right: \"auto\",\r\n            bottom: \"auto\",\r\n            marginRight: \"-50%\",\r\n            transform: \"translate(-50%, -50%)\",\r\n            width: \"60vw\",\r\n            height: \"70vh\",\r\n            borderRadius: \"1em\",\r\n          },\r\n        }}\r\n      >\r\n        <h2 className=\"modal-title\">Card Information</h2>\r\n        <p className=\"modal-text\">Card ID: {selectedCardData.id}</p>\r\n        <p className=\"modal-text\">Card Rank: {selectedCardData.rank}</p>\r\n        <button className=\"modal-close-btn\" onClick={closeModal}>\r\n          Close\r\n        </button>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Rankings;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}