{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lpana\\\\OneDrive\\\\Documents\\\\gameIterations\\\\scoreUpdate\\\\src\\\\pages\\\\ResultsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResultsPage = _ref => {\n  _s();\n  let {\n    onRestartGame,\n    outputData,\n    selectedCards\n  } = _ref;\n  const [rankings, setRankings] = useState(null);\n\n  //   useEffect(() => {\n  //     let rankings = {};\n  //     let ratings = {};\n  //     const K = 40;\n\n  //     // Initialize rankings object and ratings with player's cards\n  //     cards.forEach((card) => {\n  //       rankings[card] = { wins: 0, losses: 0, ties: 0, opponents: {} };\n  //       ratings[card] = 1800; // default rating\n  //     });\n\n  //     allGameData.forEach((game) => {\n  //       const matchup = game.outputData.CardMatchups;\n\n  //       // Initialize the opponents\n  //       if (rankings[matchup.Card1] && rankings[matchup.Card2]) {\n  //         if (!rankings[matchup.Card1].opponents[matchup.Card2]) {\n  //           rankings[matchup.Card1].opponents[matchup.Card2] = {\n  //             wins: 0,\n  //             losses: 0,\n  //             ties: 0,\n  //           };\n  //         }\n\n  //         if (!rankings[matchup.Card2].opponents[matchup.Card1]) {\n  //           rankings[matchup.Card2].opponents[matchup.Card1] = {\n  //             wins: 0,\n  //             losses: 0,\n  //             ties: 0,\n  //           };\n  //         }\n\n  //         if (matchup.Answer === \"Skip\") {\n  //           // It's a tie\n  //           rankings[matchup.Card1].ties += 1;\n  //           rankings[matchup.Card2].ties += 1;\n  //           rankings[matchup.Card1].opponents[matchup.Card2].ties += 1;\n  //           rankings[matchup.Card2].opponents[matchup.Card1].ties += 1;\n  //         } else {\n  //           // There is a winner\n  //           const winner = matchup.Answer;\n  //           const loser =\n  //             winner === matchup.Card1 ? matchup.Card2 : matchup.Card1;\n\n  //           rankings[winner].wins += 1;\n  //           rankings[loser].losses += 1;\n\n  //           rankings[winner].opponents[loser].losses += 1;\n  //           rankings[loser].opponents[winner].wins += 1;\n  //         }\n  //       }\n  //     });\n\n  //     // Calculate ratings using the relative logistic method\n  //     const numPlayers = cards.length;\n  //     const totalGames = allGameData.length;\n  //     for (let i = 0; i < numPlayers; i++) {\n  //       const playerA = cards[i];\n\n  //       for (let j = 0; j < numPlayers; j++) {\n  //         if (i !== j) {\n  //           const playerB = cards[j];\n\n  //           if (rankings[playerA].opponents[playerB]) {\n  //             const totalGamesAgainstOpponent =\n  //               rankings[playerA].opponents[playerB].wins +\n  //               rankings[playerA].opponents[playerB].losses +\n  //               rankings[playerA].opponents[playerB].ties;\n\n  //             const winRatio =\n  //               rankings[playerA].opponents[playerB].wins /\n  //               totalGamesAgainstOpponent;\n  //             const lossRatio =\n  //               rankings[playerA].opponents[playerB].losses /\n  //               totalGamesAgainstOpponent;\n\n  //             const ratingDifference = ratings[playerB] - ratings[playerA];\n  //             const expectedScore = pnorm(ratingDifference, 0, 2000 / 7, 1);\n  //             const actualScore =\n  //               winRatio +\n  //               (0.5 * rankings[playerA].opponents[playerB].ties) /\n  //                 totalGamesAgainstOpponent;\n\n  //             const delta = K * (actualScore - expectedScore);\n  //             ratings[playerA] += delta;\n  //           }\n  //         }\n  //       }\n  //     }\n\n  //     console.log(ratings);\n  //     res.json({ rankings, ratings });\n  //   }, [outputData]);\n\n  function pnorm(x, mean, sd, upperTail) {\n    const q = (x - mean) / sd;\n    return upperTail ? (1 - Math.atan(q) / Math.PI) * 0.5 : Math.atan(q) / Math.PI + 0.5;\n  }\n  useEffect(() => {\n    // Convert selected cards to an array of card IDs\n    const cardIds = selectedCards.map(card => card.ID);\n\n    // Define the demographics\n    const demographics = {\n      Race: \"White\"\n    };\n\n    // Send request to server\n    axios.post(\"/data/rankings\", {\n      cards: cardIds,\n      demographics: demographics\n    }).then(response => {\n      setRankings(response.data);\n    }).catch(error => {\n      console.error(\"Error:\", error);\n    });\n  }, [selectedCards]);\n  console.log(rankings);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), rankings && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Elo Scores:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(rankings.ratings, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onRestartGame,\n      children: \"Restart Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_s(ResultsPage, \"slpVq7mU8bslm7kXMD4idVIheYQ=\");\n_c = ResultsPage;\nexport default ResultsPage;\nvar _c;\n$RefreshReg$(_c, \"ResultsPage\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","ResultsPage","_ref","_s","onRestartGame","outputData","selectedCards","rankings","setRankings","pnorm","x","mean","sd","upperTail","q","Math","atan","PI","cardIds","map","card","ID","demographics","Race","post","cards","then","response","data","catch","error","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","ratings","onClick","_c","$RefreshReg$"],"sources":["C:/Users/lpana/OneDrive/Documents/gameIterations/scoreUpdate/src/pages/ResultsPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst ResultsPage = ({ onRestartGame, outputData, selectedCards }) => {\r\n  const [rankings, setRankings] = useState(null);\r\n\r\n  //   useEffect(() => {\r\n  //     let rankings = {};\r\n  //     let ratings = {};\r\n  //     const K = 40;\r\n\r\n  //     // Initialize rankings object and ratings with player's cards\r\n  //     cards.forEach((card) => {\r\n  //       rankings[card] = { wins: 0, losses: 0, ties: 0, opponents: {} };\r\n  //       ratings[card] = 1800; // default rating\r\n  //     });\r\n\r\n  //     allGameData.forEach((game) => {\r\n  //       const matchup = game.outputData.CardMatchups;\r\n\r\n  //       // Initialize the opponents\r\n  //       if (rankings[matchup.Card1] && rankings[matchup.Card2]) {\r\n  //         if (!rankings[matchup.Card1].opponents[matchup.Card2]) {\r\n  //           rankings[matchup.Card1].opponents[matchup.Card2] = {\r\n  //             wins: 0,\r\n  //             losses: 0,\r\n  //             ties: 0,\r\n  //           };\r\n  //         }\r\n\r\n  //         if (!rankings[matchup.Card2].opponents[matchup.Card1]) {\r\n  //           rankings[matchup.Card2].opponents[matchup.Card1] = {\r\n  //             wins: 0,\r\n  //             losses: 0,\r\n  //             ties: 0,\r\n  //           };\r\n  //         }\r\n\r\n  //         if (matchup.Answer === \"Skip\") {\r\n  //           // It's a tie\r\n  //           rankings[matchup.Card1].ties += 1;\r\n  //           rankings[matchup.Card2].ties += 1;\r\n  //           rankings[matchup.Card1].opponents[matchup.Card2].ties += 1;\r\n  //           rankings[matchup.Card2].opponents[matchup.Card1].ties += 1;\r\n  //         } else {\r\n  //           // There is a winner\r\n  //           const winner = matchup.Answer;\r\n  //           const loser =\r\n  //             winner === matchup.Card1 ? matchup.Card2 : matchup.Card1;\r\n\r\n  //           rankings[winner].wins += 1;\r\n  //           rankings[loser].losses += 1;\r\n\r\n  //           rankings[winner].opponents[loser].losses += 1;\r\n  //           rankings[loser].opponents[winner].wins += 1;\r\n  //         }\r\n  //       }\r\n  //     });\r\n\r\n  //     // Calculate ratings using the relative logistic method\r\n  //     const numPlayers = cards.length;\r\n  //     const totalGames = allGameData.length;\r\n  //     for (let i = 0; i < numPlayers; i++) {\r\n  //       const playerA = cards[i];\r\n\r\n  //       for (let j = 0; j < numPlayers; j++) {\r\n  //         if (i !== j) {\r\n  //           const playerB = cards[j];\r\n\r\n  //           if (rankings[playerA].opponents[playerB]) {\r\n  //             const totalGamesAgainstOpponent =\r\n  //               rankings[playerA].opponents[playerB].wins +\r\n  //               rankings[playerA].opponents[playerB].losses +\r\n  //               rankings[playerA].opponents[playerB].ties;\r\n\r\n  //             const winRatio =\r\n  //               rankings[playerA].opponents[playerB].wins /\r\n  //               totalGamesAgainstOpponent;\r\n  //             const lossRatio =\r\n  //               rankings[playerA].opponents[playerB].losses /\r\n  //               totalGamesAgainstOpponent;\r\n\r\n  //             const ratingDifference = ratings[playerB] - ratings[playerA];\r\n  //             const expectedScore = pnorm(ratingDifference, 0, 2000 / 7, 1);\r\n  //             const actualScore =\r\n  //               winRatio +\r\n  //               (0.5 * rankings[playerA].opponents[playerB].ties) /\r\n  //                 totalGamesAgainstOpponent;\r\n\r\n  //             const delta = K * (actualScore - expectedScore);\r\n  //             ratings[playerA] += delta;\r\n  //           }\r\n  //         }\r\n  //       }\r\n  //     }\r\n\r\n  //     console.log(ratings);\r\n  //     res.json({ rankings, ratings });\r\n  //   }, [outputData]);\r\n\r\n  function pnorm(x, mean, sd, upperTail) {\r\n    const q = (x - mean) / sd;\r\n    return upperTail\r\n      ? (1 - Math.atan(q) / Math.PI) * 0.5\r\n      : Math.atan(q) / Math.PI + 0.5;\r\n  }\r\n\r\n  useEffect(() => {\r\n    // Convert selected cards to an array of card IDs\r\n    const cardIds = selectedCards.map((card) => card.ID);\r\n\r\n    // Define the demographics\r\n    const demographics = { Race: \"White\" };\r\n\r\n    // Send request to server\r\n    axios\r\n      .post(\"/data/rankings\", { cards: cardIds, demographics: demographics })\r\n      .then((response) => {\r\n        setRankings(response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error:\", error);\r\n      });\r\n  }, [selectedCards]);\r\n\r\n  console.log(rankings);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Results</h1>\r\n      {/* print eloScores if rankings exist */}\r\n      {rankings && (\r\n        <div>\r\n          <h2>Elo Scores:</h2>\r\n          <pre>{JSON.stringify(rankings.ratings, null, 2)}</pre>\r\n        </div>\r\n      )}\r\n      <button onClick={onRestartGame}>Restart Game</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResultsPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}