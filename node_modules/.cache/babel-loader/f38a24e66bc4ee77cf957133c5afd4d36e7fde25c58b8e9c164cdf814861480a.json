{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lpana\\\\OneDrive\\\\Documents\\\\gameIterations\\\\scoreUpdate\\\\src\\\\components\\\\PairwiseGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport TechnologyCard from \"./TechnologyCard\";\nimport Rankings from \"./Rankings\";\nimport ScoreBar from \"./ScoreBar\";\nimport Comparisons from \"../data/comparisons.json\";\nimport MoralDescriptors from \"./MoralDescriptors\";\nimport Button from \"./Button\";\nimport DemographicCollection from \"./DemographicCollection\";\nimport \"./styles/PairwiseGame.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst moralDescriptors = [\"Authority\", \"Fair\"];\nconst PairwiseGame = _ref => {\n  _s();\n  let {\n    technologies,\n    finishGame,\n    skipDemographics,\n    demographics,\n    setDemographics\n  } = _ref;\n  const [shuffledTechnologies, setShuffledTechnologies] = useState([]);\n  const [currentPairIndex, setCurrentPairIndex] = useState(0);\n  const [rankings, setRankings] = useState({});\n  const [selectedDescriptors, setSelectedDescriptors] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [selectedCard, setSelectedCard] = useState(null);\n  const [unselectedCard, setUnselectedCard] = useState(null);\n  const [descriptorStage, setDescriptorStage] = useState(\"firstDescriptors\");\n  const [progress, setProgress] = useState(0);\n  const [selectionMade, setSelectionMade] = useState(false);\n  const [selectedPercent, setSelectedPercent] = useState(0);\n  const [unselectedPercent, setUnselectedPercent] = useState(0);\n  const [firstClickTime, setFirstClickTime] = useState(null);\n  const [descriptorClickTimes, setDescriptorClickTimes] = useState([]);\n  const [score, setScore] = useState(0);\n  const [selectedIndex, setSelectedIndex] = useState(null);\n  const [scoreIndex, setScoreIndex] = useState(0);\n  const [agreementAnswer, setAgreementAnswer] = useState(null);\n  const [showDescriptorImages, setShowDescriptorImages] = useState(false);\n  const [agreementResult, setAgreementResult] = useState(null);\n  const [showAgreementResult, setShowAgreementResult] = useState(false);\n  // Add these to your current list of useState calls\n  const [cardMatchups, setCardMatchups] = useState([]);\n  const [moralChoices, setMoralChoices] = useState({});\n  useEffect(() => {\n    if (technologies.length > 0) {\n      // Shuffle technologies array\n      let shuffledTechnologies = [...technologies];\n      for (let i = shuffledTechnologies.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [shuffledTechnologies[i], shuffledTechnologies[j]] = [shuffledTechnologies[j], shuffledTechnologies[i]];\n      }\n\n      // Create pairs from the shuffled technologies array\n      let tempShuffledTechnologies = [];\n      for (let i = 0; i < shuffledTechnologies.length; i += 2) {\n        tempShuffledTechnologies.push([shuffledTechnologies[i], shuffledTechnologies[i + 1]]);\n      }\n\n      // Limit the length of tempShuffledTechnologies to match the length of technologies\n      tempShuffledTechnologies = tempShuffledTechnologies.slice(0, technologies.length);\n      setShuffledTechnologies(tempShuffledTechnologies);\n\n      // Use the original technologies array for the initial rankings\n      let initialRankings = {};\n      technologies.forEach(tech => {\n        initialRankings[tech.title] = {\n          descriptors: [],\n          wins: 0,\n          losses: 0,\n          ties: 0,\n          opponents: {} // Keep track of wins, losses, and ties against each opponent\n        };\n      });\n\n      setRankings(initialRankings);\n    }\n  }, [technologies]);\n  useEffect(() => {\n    if (currentPairIndex >= technologies.length / 2) {\n      const finalData = {\n        UserID: 123,\n        // this should be fetched dynamically\n        CardMatchups: cardMatchups,\n        Moral: moralChoices\n      };\n\n      // Output the final JSON\n      console.log(JSON.stringify(finalData, null, 2));\n      setGameOver(true);\n      if (skipDemographics && currentPairIndex >= shuffledTechnologies.length) {\n        finishGame(); // Call the finishGame function\n      }\n    }\n  }, [currentPairIndex, technologies.length, shuffledTechnologies.length, skipDemographics, finishGame]);\n  useEffect(() => {\n    calculateProgress();\n  }, [currentPairIndex]);\n  const calculateProgress = () => {\n    const totalPairs = Math.floor(technologies.length / 2);\n    const currentProgress = currentPairIndex / totalPairs * 100;\n    setProgress(currentProgress);\n  };\n  const handleChoice = chosenIndex => {\n    console.log(chosenIndex);\n    // Adjustments to handle new shuffledTechnologies format\n    setDescriptorClickTimes([]);\n    setFirstClickTime(Date.now());\n    if (selectedCard !== null) {\n      return; // If a card is already selected, do nothing\n    }\n\n    const chosenCard = chosenIndex % 2 === 0 ? 0 : 1;\n    setSelectedCard(shuffledTechnologies[currentPairIndex][chosenCard]);\n    setSelectedIndex(chosenIndex);\n    setUnselectedCard(shuffledTechnologies[currentPairIndex][(chosenCard + 1) % 2]);\n    setSelectionMade(true);\n    setAgreementAnswer(null);\n  };\n  const renderTechnologyCard = index => {\n    const tech = shuffledTechnologies[currentPairIndex][index];\n    const percent = {\n      selectedCard: selectedPercent,\n      unselectedCard: unselectedPercent\n    };\n    return /*#__PURE__*/_jsxDEV(TechnologyCard, {\n      tech: tech,\n      handleChoice: handleChoice,\n      index: index,\n      percent: percent,\n      selectionMade: selectionMade,\n      agreementAnswer: agreementAnswer,\n      isClicked: index === selectedIndex\n    }, tech.title, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this);\n  };\n  const handleAgreementAnswer = answer => {\n    const percentCard = selectedCard;\n    const unpercentCard = unselectedCard;\n    setAgreementResult(\"Correct\");\n    setScore(prevScore => prevScore + 10);\n    setSelectedPercent(49);\n    setUnselectedPercent(51);\n    setCardMatchups([...cardMatchups, {\n      Card1: shuffledTechnologies[currentPairIndex][0].ID,\n      Card2: shuffledTechnologies[currentPairIndex][1].ID,\n      Answer: selectedCard.title,\n      Majority: answer\n    }]);\n\n    // const foundComparison = Comparisons.comparisons.find(\n    //   (comp) =>\n    //     comp.title1 === percentCard.title && comp.title2 === unpercentCard.title\n    // );\n\n    // setScoreIndex((scoreIndex) => scoreIndex + 1);\n\n    // // Update the score based on the selectedPercent\n    // if (foundComparison && answer === \"yes\") {\n    //   setAgreementResult(\"Correct\");\n    //   setScore((prevScore) => prevScore + 10);\n    //   setSelectedPercent(foundComparison.percent1);\n    //   setUnselectedPercent(foundComparison.percent2);\n    // }\n    // if (foundComparison && answer === \"no\") {\n    //   setAgreementResult(\"Incorrect\");\n    //   setScore((prevScore) => prevScore);\n    //   setSelectedPercent(foundComparison.percent1);\n    //   setUnselectedPercent(foundComparison.percent2);\n    // }\n    // if (foundComparison && answer === \"unsure\") {\n    //   setAgreementResult(null);\n\n    //   setScore((prevScore) => prevScore);\n    //   setSelectedPercent(foundComparison.percent1);\n    //   setUnselectedPercent(foundComparison.percent2);\n    // }\n\n    // if (!foundComparison && answer === \"yes\") {\n    //   setAgreementResult(\"Incorrect\");\n\n    //   setScore((prevScore) => prevScore);\n    //   const wrongOrder = Comparisons.comparisons.find(\n    //     (comp) =>\n    //       comp.title1 === unpercentCard.title &&\n    //       comp.title2 === percentCard.title\n    //   );\n    //   setSelectedPercent(wrongOrder.percent2);\n    //   setUnselectedPercent(wrongOrder.percent1);\n    //   console.log(wrongOrder);\n    // }\n\n    // if (!foundComparison && answer === \"no\") {\n    //   setAgreementResult(\"Correct\");\n\n    //   setScore((prevScore) => prevScore + 10);\n    //   const wrongOrder = Comparisons.comparisons.find(\n    //     (comp) =>\n    //       comp.title1 === unpercentCard.title &&\n    //       comp.title2 === percentCard.title\n    //   );\n    //   setSelectedPercent(wrongOrder.percent2);\n    //   setUnselectedPercent(wrongOrder.percent1);\n    // }\n\n    // if (!foundComparison && answer === \"unsure\") {\n    //   setAgreementResult(null);\n    //   setScore((prevScore) => prevScore);\n    //   const wrongOrder = Comparisons.comparisons.find(\n    //     (comp) =>\n    //       comp.title1 === unpercentCard.title &&\n    //       comp.title2 === percentCard.title\n    //   );\n    //   setSelectedPercent(wrongOrder.percent2);\n    //   setUnselectedPercent(wrongOrder.percent1);\n    // }\n\n    setShowAgreementResult(true); // Initially set showAgreementResult to true\n    setTimeout(() => {\n      setShowAgreementResult(false); // After a second, set showAgreementResult back to false\n    }, 2000);\n    setShowDescriptorImages(true);\n    setAgreementAnswer(answer);\n  };\n  const handleNextCards = () => {\n    let updatedRankings = {\n      ...rankings\n    };\n    // Check if we should move onto the next stage or finish this round\n\n    const selectedTech = selectedCard.title;\n    const unselectedTech = unselectedCard.title;\n\n    // Update wins, losses, and opponents\n    updatedRankings[selectedTech].wins += 1;\n    updatedRankings[unselectedTech].losses += 1;\n    updatedRankings[selectedTech].opponents[unselectedTech] = (updatedRankings[selectedTech].opponents[unselectedTech] || 0) + 1;\n    updatedRankings[unselectedTech].opponents[selectedTech] = (updatedRankings[unselectedTech].opponents[selectedTech] || 0) - 1;\n\n    // Update the descriptors\n\n    setRankings(updatedRankings);\n    setSelectedDescriptors([]);\n    setSelectedCard(null);\n    setUnselectedCard(null);\n    setCurrentPairIndex(currentPairIndex + 1);\n    setDescriptorStage(\"firstDescriptors\"); // Reset the descriptor stage\n    setSelectionMade(false);\n    setSelectedIndex(null);\n    setAgreementAnswer(null);\n    setShowDescriptorImages(false);\n\n    // Now the effect that triggers game over will run if necessary\n  };\n\n  const handleSkip = () => {\n    let updatedRankings = {\n      ...rankings\n    };\n    const firstTech = shuffledTechnologies[currentPairIndex][0].title;\n    const secondTech = shuffledTechnologies[currentPairIndex][1].title;\n    setCardMatchups([...cardMatchups, {\n      Card1: shuffledTechnologies[currentPairIndex][0].ID,\n      Card2: shuffledTechnologies[currentPairIndex][1].ID,\n      Answer: \"Skip\",\n      Majority: \"Skip\"\n    }]);\n\n    // Update ties and opponents\n    updatedRankings[firstTech].ties += 1;\n    updatedRankings[secondTech].ties += 1;\n    updatedRankings[firstTech].opponents[secondTech] = updatedRankings[firstTech].opponents[secondTech] || 0;\n    updatedRankings[secondTech].opponents[firstTech] = updatedRankings[secondTech].opponents[firstTech] || 0;\n    setScoreIndex(scoreIndex => scoreIndex + 1);\n    setRankings(updatedRankings);\n    setSelectedDescriptors([]);\n    setSelectedCard(null);\n    setUnselectedCard(null);\n    setCurrentPairIndex(currentPairIndex + 1);\n    setDescriptorStage(\"firstDescriptors\"); // Reset the descriptor stage\n    setSelectionMade(false);\n    setAgreementAnswer(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pairwise-game\",\n    children: [!gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar-inner\",\n        style: {\n          width: `${progress}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 9\n    }, this), !gameOver && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Which technology has more risk?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottomHalf\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"technology-pair\",\n          children: [currentPairIndex < shuffledTechnologies.length && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [renderTechnologyCard(0), renderTechnologyCard(1)]\n          }, void 0, true), selectedCard ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"descriptors\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              text: \"Skip\",\n              onClick: handleSkip\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 13\n        }, this), selectedCard && agreementAnswer && showAgreementResult && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"agreement-question\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Do most people agree with you?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-container\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: agreementResult === \"Correct\" ? \"correct\" : \"incorrect\",\n              children: agreementResult\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 15\n        }, this), selectedCard && !agreementAnswer && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"agreement-question\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Do most people agree with you?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleAgreementAnswer(\"yes\"),\n              children: \"Yes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleAgreementAnswer(\"no\"),\n              children: \"No\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleAgreementAnswer(\"unsure\"),\n              children: \"Unsure\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 15\n        }, this), selectedCard && showDescriptorImages && !showAgreementResult && /*#__PURE__*/_jsxDEV(MoralDescriptors, {\n          moralDescriptors: moralDescriptors,\n          handleNextCards: handleNextCards,\n          setMoralChoices: setMoralChoices,\n          selectedCard: selectedCard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(ScoreBar, {\n          score: score,\n          currentPairIndex: currentPairIndex\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), gameOver && !skipDemographics && /*#__PURE__*/_jsxDEV(DemographicCollection, {\n      finishGame: finishGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 330,\n    columnNumber: 5\n  }, this);\n};\n_s(PairwiseGame, \"7+v64WhGYuvYKWt77/9zhHgVUBQ=\");\n_c = PairwiseGame;\nexport default PairwiseGame;\nvar _c;\n$RefreshReg$(_c, \"PairwiseGame\");","map":{"version":3,"names":["React","useState","useEffect","TechnologyCard","Rankings","ScoreBar","Comparisons","MoralDescriptors","Button","DemographicCollection","jsxDEV","_jsxDEV","Fragment","_Fragment","moralDescriptors","PairwiseGame","_ref","_s","technologies","finishGame","skipDemographics","demographics","setDemographics","shuffledTechnologies","setShuffledTechnologies","currentPairIndex","setCurrentPairIndex","rankings","setRankings","selectedDescriptors","setSelectedDescriptors","gameOver","setGameOver","selectedCard","setSelectedCard","unselectedCard","setUnselectedCard","descriptorStage","setDescriptorStage","progress","setProgress","selectionMade","setSelectionMade","selectedPercent","setSelectedPercent","unselectedPercent","setUnselectedPercent","firstClickTime","setFirstClickTime","descriptorClickTimes","setDescriptorClickTimes","score","setScore","selectedIndex","setSelectedIndex","scoreIndex","setScoreIndex","agreementAnswer","setAgreementAnswer","showDescriptorImages","setShowDescriptorImages","agreementResult","setAgreementResult","showAgreementResult","setShowAgreementResult","cardMatchups","setCardMatchups","moralChoices","setMoralChoices","length","i","j","Math","floor","random","tempShuffledTechnologies","push","slice","initialRankings","forEach","tech","title","descriptors","wins","losses","ties","opponents","finalData","UserID","CardMatchups","Moral","console","log","JSON","stringify","calculateProgress","totalPairs","currentProgress","handleChoice","chosenIndex","Date","now","chosenCard","renderTechnologyCard","index","percent","isClicked","fileName","_jsxFileName","lineNumber","columnNumber","handleAgreementAnswer","answer","percentCard","unpercentCard","prevScore","Card1","ID","Card2","Answer","Majority","setTimeout","handleNextCards","updatedRankings","selectedTech","unselectedTech","handleSkip","firstTech","secondTech","className","children","style","width","text","onClick","_c","$RefreshReg$"],"sources":["C:/Users/lpana/OneDrive/Documents/gameIterations/scoreUpdate/src/components/PairwiseGame.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport TechnologyCard from \"./TechnologyCard\";\r\nimport Rankings from \"./Rankings\";\r\nimport ScoreBar from \"./ScoreBar\";\r\nimport Comparisons from \"../data/comparisons.json\";\r\n\r\nimport MoralDescriptors from \"./MoralDescriptors\";\r\nimport Button from \"./Button\";\r\nimport DemographicCollection from \"./DemographicCollection\";\r\nimport \"./styles/PairwiseGame.css\";\r\n\r\nconst moralDescriptors = [\"Authority\", \"Fair\"];\r\n\r\nconst PairwiseGame = ({\r\n  technologies,\r\n  finishGame,\r\n  skipDemographics,\r\n  demographics,\r\n  setDemographics,\r\n}) => {\r\n  const [shuffledTechnologies, setShuffledTechnologies] = useState([]);\r\n\r\n  const [currentPairIndex, setCurrentPairIndex] = useState(0);\r\n  const [rankings, setRankings] = useState({});\r\n  const [selectedDescriptors, setSelectedDescriptors] = useState([]);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [selectedCard, setSelectedCard] = useState(null);\r\n  const [unselectedCard, setUnselectedCard] = useState(null);\r\n  const [descriptorStage, setDescriptorStage] = useState(\"firstDescriptors\");\r\n  const [progress, setProgress] = useState(0);\r\n  const [selectionMade, setSelectionMade] = useState(false);\r\n  const [selectedPercent, setSelectedPercent] = useState(0);\r\n  const [unselectedPercent, setUnselectedPercent] = useState(0);\r\n  const [firstClickTime, setFirstClickTime] = useState(null);\r\n  const [descriptorClickTimes, setDescriptorClickTimes] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n  const [selectedIndex, setSelectedIndex] = useState(null);\r\n  const [scoreIndex, setScoreIndex] = useState(0);\r\n  const [agreementAnswer, setAgreementAnswer] = useState(null);\r\n  const [showDescriptorImages, setShowDescriptorImages] = useState(false);\r\n  const [agreementResult, setAgreementResult] = useState(null);\r\n  const [showAgreementResult, setShowAgreementResult] = useState(false);\r\n  // Add these to your current list of useState calls\r\n  const [cardMatchups, setCardMatchups] = useState([]);\r\n  const [moralChoices, setMoralChoices] = useState({});\r\n\r\n  useEffect(() => {\r\n    if (technologies.length > 0) {\r\n      // Shuffle technologies array\r\n      let shuffledTechnologies = [...technologies];\r\n      for (let i = shuffledTechnologies.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n        [shuffledTechnologies[i], shuffledTechnologies[j]] = [\r\n          shuffledTechnologies[j],\r\n          shuffledTechnologies[i],\r\n        ];\r\n      }\r\n\r\n      // Create pairs from the shuffled technologies array\r\n      let tempShuffledTechnologies = [];\r\n      for (let i = 0; i < shuffledTechnologies.length; i += 2) {\r\n        tempShuffledTechnologies.push([\r\n          shuffledTechnologies[i],\r\n          shuffledTechnologies[i + 1],\r\n        ]);\r\n      }\r\n\r\n      // Limit the length of tempShuffledTechnologies to match the length of technologies\r\n      tempShuffledTechnologies = tempShuffledTechnologies.slice(\r\n        0,\r\n        technologies.length\r\n      );\r\n      setShuffledTechnologies(tempShuffledTechnologies);\r\n\r\n      // Use the original technologies array for the initial rankings\r\n      let initialRankings = {};\r\n      technologies.forEach((tech) => {\r\n        initialRankings[tech.title] = {\r\n          descriptors: [],\r\n          wins: 0,\r\n          losses: 0,\r\n          ties: 0,\r\n          opponents: {}, // Keep track of wins, losses, and ties against each opponent\r\n        };\r\n      });\r\n      setRankings(initialRankings);\r\n    }\r\n  }, [technologies]);\r\n\r\n  useEffect(() => {\r\n    if (currentPairIndex >= technologies.length / 2) {\r\n      const finalData = {\r\n        UserID: 123, // this should be fetched dynamically\r\n        CardMatchups: cardMatchups,\r\n        Moral: moralChoices,\r\n      };\r\n\r\n      // Output the final JSON\r\n      console.log(JSON.stringify(finalData, null, 2));\r\n\r\n      setGameOver(true);\r\n\r\n      if (skipDemographics && currentPairIndex >= shuffledTechnologies.length) {\r\n        finishGame(); // Call the finishGame function\r\n      }\r\n    }\r\n  }, [\r\n    currentPairIndex,\r\n    technologies.length,\r\n    shuffledTechnologies.length,\r\n    skipDemographics,\r\n    finishGame,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    calculateProgress();\r\n  }, [currentPairIndex]);\r\n\r\n  const calculateProgress = () => {\r\n    const totalPairs = Math.floor(technologies.length / 2);\r\n    const currentProgress = (currentPairIndex / totalPairs) * 100;\r\n    setProgress(currentProgress);\r\n  };\r\n\r\n  const handleChoice = (chosenIndex) => {\r\n    console.log(chosenIndex);\r\n    // Adjustments to handle new shuffledTechnologies format\r\n    setDescriptorClickTimes([]);\r\n    setFirstClickTime(Date.now());\r\n\r\n    if (selectedCard !== null) {\r\n      return; // If a card is already selected, do nothing\r\n    }\r\n\r\n    const chosenCard = chosenIndex % 2 === 0 ? 0 : 1;\r\n\r\n    setSelectedCard(shuffledTechnologies[currentPairIndex][chosenCard]);\r\n\r\n    setSelectedIndex(chosenIndex);\r\n\r\n    setUnselectedCard(\r\n      shuffledTechnologies[currentPairIndex][(chosenCard + 1) % 2]\r\n    );\r\n\r\n    setSelectionMade(true);\r\n    setAgreementAnswer(null);\r\n  };\r\n\r\n  const renderTechnologyCard = (index) => {\r\n    const tech = shuffledTechnologies[currentPairIndex][index];\r\n    const percent = {\r\n      selectedCard: selectedPercent,\r\n      unselectedCard: unselectedPercent,\r\n    };\r\n\r\n    return (\r\n      <TechnologyCard\r\n        key={tech.title}\r\n        tech={tech}\r\n        handleChoice={handleChoice}\r\n        index={index}\r\n        percent={percent}\r\n        selectionMade={selectionMade}\r\n        agreementAnswer={agreementAnswer}\r\n        isClicked={index === selectedIndex}\r\n      />\r\n    );\r\n  };\r\n\r\n  const handleAgreementAnswer = (answer) => {\r\n    const percentCard = selectedCard;\r\n    const unpercentCard = unselectedCard;\r\n    setAgreementResult(\"Correct\");\r\n    setScore((prevScore) => prevScore + 10);\r\n    setSelectedPercent(49);\r\n    setUnselectedPercent(51);\r\n\r\n    setCardMatchups([\r\n      ...cardMatchups,\r\n      {\r\n        Card1: shuffledTechnologies[currentPairIndex][0].ID,\r\n        Card2: shuffledTechnologies[currentPairIndex][1].ID,\r\n        Answer: selectedCard.title,\r\n        Majority: answer,\r\n      },\r\n    ]);\r\n\r\n    // const foundComparison = Comparisons.comparisons.find(\r\n    //   (comp) =>\r\n    //     comp.title1 === percentCard.title && comp.title2 === unpercentCard.title\r\n    // );\r\n\r\n    // setScoreIndex((scoreIndex) => scoreIndex + 1);\r\n\r\n    // // Update the score based on the selectedPercent\r\n    // if (foundComparison && answer === \"yes\") {\r\n    //   setAgreementResult(\"Correct\");\r\n    //   setScore((prevScore) => prevScore + 10);\r\n    //   setSelectedPercent(foundComparison.percent1);\r\n    //   setUnselectedPercent(foundComparison.percent2);\r\n    // }\r\n    // if (foundComparison && answer === \"no\") {\r\n    //   setAgreementResult(\"Incorrect\");\r\n    //   setScore((prevScore) => prevScore);\r\n    //   setSelectedPercent(foundComparison.percent1);\r\n    //   setUnselectedPercent(foundComparison.percent2);\r\n    // }\r\n    // if (foundComparison && answer === \"unsure\") {\r\n    //   setAgreementResult(null);\r\n\r\n    //   setScore((prevScore) => prevScore);\r\n    //   setSelectedPercent(foundComparison.percent1);\r\n    //   setUnselectedPercent(foundComparison.percent2);\r\n    // }\r\n\r\n    // if (!foundComparison && answer === \"yes\") {\r\n    //   setAgreementResult(\"Incorrect\");\r\n\r\n    //   setScore((prevScore) => prevScore);\r\n    //   const wrongOrder = Comparisons.comparisons.find(\r\n    //     (comp) =>\r\n    //       comp.title1 === unpercentCard.title &&\r\n    //       comp.title2 === percentCard.title\r\n    //   );\r\n    //   setSelectedPercent(wrongOrder.percent2);\r\n    //   setUnselectedPercent(wrongOrder.percent1);\r\n    //   console.log(wrongOrder);\r\n    // }\r\n\r\n    // if (!foundComparison && answer === \"no\") {\r\n    //   setAgreementResult(\"Correct\");\r\n\r\n    //   setScore((prevScore) => prevScore + 10);\r\n    //   const wrongOrder = Comparisons.comparisons.find(\r\n    //     (comp) =>\r\n    //       comp.title1 === unpercentCard.title &&\r\n    //       comp.title2 === percentCard.title\r\n    //   );\r\n    //   setSelectedPercent(wrongOrder.percent2);\r\n    //   setUnselectedPercent(wrongOrder.percent1);\r\n    // }\r\n\r\n    // if (!foundComparison && answer === \"unsure\") {\r\n    //   setAgreementResult(null);\r\n    //   setScore((prevScore) => prevScore);\r\n    //   const wrongOrder = Comparisons.comparisons.find(\r\n    //     (comp) =>\r\n    //       comp.title1 === unpercentCard.title &&\r\n    //       comp.title2 === percentCard.title\r\n    //   );\r\n    //   setSelectedPercent(wrongOrder.percent2);\r\n    //   setUnselectedPercent(wrongOrder.percent1);\r\n    // }\r\n\r\n    setShowAgreementResult(true); // Initially set showAgreementResult to true\r\n    setTimeout(() => {\r\n      setShowAgreementResult(false); // After a second, set showAgreementResult back to false\r\n    }, 2000);\r\n\r\n    setShowDescriptorImages(true);\r\n    setAgreementAnswer(answer);\r\n  };\r\n  const handleNextCards = () => {\r\n    let updatedRankings = { ...rankings };\r\n    // Check if we should move onto the next stage or finish this round\r\n\r\n    const selectedTech = selectedCard.title;\r\n    const unselectedTech = unselectedCard.title;\r\n\r\n    // Update wins, losses, and opponents\r\n    updatedRankings[selectedTech].wins += 1;\r\n    updatedRankings[unselectedTech].losses += 1;\r\n    updatedRankings[selectedTech].opponents[unselectedTech] =\r\n      (updatedRankings[selectedTech].opponents[unselectedTech] || 0) + 1;\r\n    updatedRankings[unselectedTech].opponents[selectedTech] =\r\n      (updatedRankings[unselectedTech].opponents[selectedTech] || 0) - 1;\r\n\r\n    // Update the descriptors\r\n\r\n    setRankings(updatedRankings);\r\n    setSelectedDescriptors([]);\r\n    setSelectedCard(null);\r\n    setUnselectedCard(null);\r\n    setCurrentPairIndex(currentPairIndex + 1);\r\n    setDescriptorStage(\"firstDescriptors\"); // Reset the descriptor stage\r\n    setSelectionMade(false);\r\n    setSelectedIndex(null);\r\n    setAgreementAnswer(null);\r\n    setShowDescriptorImages(false);\r\n\r\n    // Now the effect that triggers game over will run if necessary\r\n  };\r\n\r\n  const handleSkip = () => {\r\n    let updatedRankings = { ...rankings };\r\n    const firstTech = shuffledTechnologies[currentPairIndex][0].title;\r\n    const secondTech = shuffledTechnologies[currentPairIndex][1].title;\r\n\r\n    setCardMatchups([\r\n      ...cardMatchups,\r\n      {\r\n        Card1: shuffledTechnologies[currentPairIndex][0].ID,\r\n        Card2: shuffledTechnologies[currentPairIndex][1].ID,\r\n        Answer: \"Skip\",\r\n        Majority: \"Skip\",\r\n      },\r\n    ]);\r\n\r\n    // Update ties and opponents\r\n    updatedRankings[firstTech].ties += 1;\r\n    updatedRankings[secondTech].ties += 1;\r\n    updatedRankings[firstTech].opponents[secondTech] =\r\n      updatedRankings[firstTech].opponents[secondTech] || 0;\r\n    updatedRankings[secondTech].opponents[firstTech] =\r\n      updatedRankings[secondTech].opponents[firstTech] || 0;\r\n\r\n    setScoreIndex((scoreIndex) => scoreIndex + 1);\r\n    setRankings(updatedRankings);\r\n    setSelectedDescriptors([]);\r\n    setSelectedCard(null);\r\n    setUnselectedCard(null);\r\n    setCurrentPairIndex(currentPairIndex + 1);\r\n    setDescriptorStage(\"firstDescriptors\"); // Reset the descriptor stage\r\n    setSelectionMade(false);\r\n    setAgreementAnswer(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"pairwise-game\">\r\n      {!gameOver && (\r\n        <div className=\"progress-bar\">\r\n          <div\r\n            className=\"progress-bar-inner\"\r\n            style={{ width: `${progress}%` }}\r\n          ></div>\r\n        </div>\r\n      )}\r\n\r\n      {!gameOver && (\r\n        <>\r\n          <h2>Which technology has more risk?</h2>\r\n          <div className=\"bottomHalf\">\r\n            <div className=\"technology-pair\">\r\n              {currentPairIndex < shuffledTechnologies.length && (\r\n                <>\r\n                  {renderTechnologyCard(0)}\r\n\r\n                  {renderTechnologyCard(1)}\r\n                </>\r\n              )}\r\n              {selectedCard ? null : (\r\n                <div className=\"descriptors\">\r\n                  <Button text=\"Skip\" onClick={handleSkip} />\r\n                </div>\r\n              )}\r\n            </div>\r\n            {selectedCard && agreementAnswer && showAgreementResult && (\r\n              <div className=\"agreement-question\">\r\n                <h3>Do most people agree with you?</h3>\r\n\r\n                <div className=\"button-container\">\r\n                  <p\r\n                    className={\r\n                      agreementResult === \"Correct\" ? \"correct\" : \"incorrect\"\r\n                    }\r\n                  >\r\n                    {agreementResult}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            )}\r\n            {selectedCard && !agreementAnswer && (\r\n              <div className=\"agreement-question\">\r\n                <h3>Do most people agree with you?</h3>\r\n\r\n                <div className=\"button-container\">\r\n                  <button onClick={() => handleAgreementAnswer(\"yes\")}>\r\n                    Yes\r\n                  </button>\r\n                  <button onClick={() => handleAgreementAnswer(\"no\")}>\r\n                    No\r\n                  </button>\r\n                  <button onClick={() => handleAgreementAnswer(\"unsure\")}>\r\n                    Unsure\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n            {selectedCard && showDescriptorImages && !showAgreementResult && (\r\n              <MoralDescriptors\r\n                moralDescriptors={moralDescriptors}\r\n                handleNextCards={handleNextCards}\r\n                setMoralChoices={setMoralChoices}\r\n                selectedCard={selectedCard}\r\n              />\r\n            )}\r\n            <ScoreBar score={score} currentPairIndex={currentPairIndex} />\r\n          </div>\r\n        </>\r\n      )}\r\n      {/* {gameOver && <Rankings rankings={rankings} finishGame={finishGame} />} */}\r\n      {gameOver && !skipDemographics && (\r\n        <DemographicCollection finishGame={finishGame} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PairwiseGame;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}