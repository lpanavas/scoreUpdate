{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lpana\\\\OneDrive\\\\Documents\\\\gameIterations\\\\scoreUpdate\\\\src\\\\components\\\\PairwiseGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport TechnologyCard from \"./TechnologyCard\";\nimport Rankings from \"./Rankings\";\nimport ScoreBar from \"./ScoreBar\";\nimport Comparisons from \"../data/comparisons.json\";\nimport MoralDescriptors from \"./MoralDescriptors\";\nimport Button from \"./Button\";\nimport DemographicCollection from \"./DemographicCollection\";\nimport \"./styles/PairwiseGame.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst moralDescriptors = [\"Authority\", \"Fair\", \"Harm\", \"Loyalty\", \"Purity\"];\nconst PairwiseGame = _ref => {\n  _s();\n  let {\n    technologies,\n    pairwiseData,\n    finishGame,\n    skipDemographics,\n    demographics,\n    setDemographics,\n    setOutputData,\n    userID\n  } = _ref;\n  const [shuffledTechnologies, setShuffledTechnologies] = useState([]);\n  const [currentPairIndex, setCurrentPairIndex] = useState(0);\n  const [rankings, setRankings] = useState({});\n  const [selectedDescriptors, setSelectedDescriptors] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [selectedCard, setSelectedCard] = useState(null);\n  const [unselectedCard, setUnselectedCard] = useState(null);\n  const [descriptorStage, setDescriptorStage] = useState(\"firstDescriptors\");\n  const [progress, setProgress] = useState(0);\n  const [selectionMade, setSelectionMade] = useState(false);\n  const [selectedPercent, setSelectedPercent] = useState(0);\n  const [unselectedPercent, setUnselectedPercent] = useState(0);\n  const [firstClickTime, setFirstClickTime] = useState(null);\n  const [descriptorClickTimes, setDescriptorClickTimes] = useState([]);\n  const [score, setScore] = useState(0);\n  const [selectedIndex, setSelectedIndex] = useState(null);\n  const [scoreIndex, setScoreIndex] = useState(0);\n  const [agreementAnswer, setAgreementAnswer] = useState(null);\n  const [showDescriptorImages, setShowDescriptorImages] = useState(false);\n  const [agreementResult, setAgreementResult] = useState(null);\n  const [showAgreementResult, setShowAgreementResult] = useState(false);\n  // Add these to your current list of useState calls\n  const [cardMatchups, setCardMatchups] = useState([]);\n  const [moralChoices, setMoralChoices] = useState({});\n  const [sendToDemographicData, setSendToDemographicData] = useState();\n  const [riskAnswer, setRiskAnswer] = useState(null);\n  const [riskAnswerOuput, setRiskAnswerOutput] = useState({});\n  useEffect(() => {\n    console.log(pairwiseData);\n    if (technologies.length > 0) {\n      // Shuffle technologies array\n      let shuffledTechnologies = [...technologies];\n      for (let i = shuffledTechnologies.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [shuffledTechnologies[i], shuffledTechnologies[j]] = [shuffledTechnologies[j], shuffledTechnologies[i]];\n      }\n      let tempShuffledTechnologies = [];\n      for (let i = 0; i < shuffledTechnologies.length; i++) {\n        let pair1 = [shuffledTechnologies[i], shuffledTechnologies[(i - 1 + shuffledTechnologies.length) % shuffledTechnologies.length]];\n        tempShuffledTechnologies.push(pair1);\n      }\n\n      // Shuffle tempShuffledTechnologies\n      for (let i = tempShuffledTechnologies.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [tempShuffledTechnologies[i], tempShuffledTechnologies[j]] = [tempShuffledTechnologies[j], tempShuffledTechnologies[i]];\n      }\n      setShuffledTechnologies(tempShuffledTechnologies);\n\n      // Use the original technologies array for the initial rankings\n      let initialRankings = {};\n      technologies.forEach(tech => {\n        initialRankings[tech.title] = {\n          descriptors: [],\n          wins: 0,\n          losses: 0,\n          ties: 0,\n          opponents: {} // Keep track of wins, losses, and ties against each opponent\n        };\n      });\n\n      setRankings(initialRankings);\n    }\n  }, [technologies]);\n  useEffect(() => {\n    if (currentPairIndex >= technologies.length) {\n      setSendToDemographicData({\n        UserID: userID,\n        // this should be fetched dynamically\n        demographics: demographics,\n        risk: riskAnswerOuput,\n        CardMatchups: cardMatchups,\n        Moral: moralChoices\n      });\n\n      // Output the final JSON\n      console.log(skipDemographics);\n      if (skipDemographics && currentPairIndex >= shuffledTechnologies.length) {\n        const finalData = {\n          UserID: userID,\n          // this should be fetched dynamically\n          demographics: demographics,\n          risk: riskAnswerOuput,\n          CardMatchups: cardMatchups,\n          Moral: moralChoices\n        };\n        setOutputData(finalData);\n        finishGame(); // Call the finishGame function\n      }\n\n      setGameOver(true);\n    }\n  }, [currentPairIndex, technologies.length, shuffledTechnologies.length, skipDemographics, finishGame]);\n  useEffect(() => {\n    calculateProgress();\n  }, [currentPairIndex]);\n  const calculateProgress = () => {\n    const totalPairs = Math.floor(technologies.length);\n    const currentProgress = currentPairIndex / totalPairs * 100;\n    setProgress(currentProgress);\n  };\n  const handleChoice = chosenIndex => {\n    // Adjustments to handle new shuffledTechnologies format\n    setDescriptorClickTimes([]);\n    setFirstClickTime(Date.now());\n    if (selectedCard !== null) {\n      return; // If a card is already selected, do nothing\n    }\n\n    const chosenCard = chosenIndex % 2 === 0 ? 0 : 1;\n    setSelectedCard(shuffledTechnologies[currentPairIndex][chosenCard]);\n    setSelectedIndex(chosenIndex);\n    console.log(\"chosenIndex\", chosenIndex);\n    console.log(shuffledTechnologies[currentPairIndex]);\n    setUnselectedCard(shuffledTechnologies[currentPairIndex][(chosenCard + 1) % 2]);\n    setSelectionMade(true);\n    setAgreementAnswer(null);\n  };\n  const renderTechnologyCard = () => {\n    const tech1 = shuffledTechnologies[currentPairIndex][0];\n    const tech2 = shuffledTechnologies[currentPairIndex][1];\n    // Define default percents\n    let selectedPercent = 50;\n    let unselectedPercent = 50;\n\n    // The current pair from shuffledTechnologies\n    let selectedPercent1 = 50;\n    let unselectedPercent1 = 50;\n    let selectedPercent2 = 50;\n    let unselectedPercent2 = 50;\n    const currentPair = shuffledTechnologies[currentPairIndex].map(tech => tech.ID);\n    for (let i = 0; i < pairwiseData.data.length; i++) {\n      const pair = pairwiseData.data[i].pair;\n      if (pair.sort().join(\",\") === currentPair.sort().join(\",\")) {\n        const percentages = pairwiseData.data[i].percentages;\n        selectedPercent1 = percentages[tech1.ID];\n        unselectedPercent1 = 100 - selectedPercent1;\n        selectedPercent2 = percentages[tech2.ID];\n        unselectedPercent2 = 100 - selectedPercent2;\n        break;\n      }\n    }\n    return /*#__PURE__*/_jsxDEV(TechnologyCard, {\n      tech1: tech1,\n      tech2: tech2,\n      handleChoice: handleChoice,\n      percent1: {\n        selectedCard: selectedPercent1,\n        unselectedCard: unselectedPercent1\n      },\n      percent2: {\n        selectedCard: selectedPercent2,\n        unselectedCard: unselectedPercent2\n      },\n      selectionMade: selectionMade,\n      agreementAnswer: agreementAnswer,\n      isClicked1: 0 === selectedIndex,\n      isClicked2: 1 === selectedIndex\n    }, `${tech1.title}-${tech2.title}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this);\n  };\n  const handleRiskAnswer = answer => {\n    setRiskAnswerOutput(prevAnswers => {\n      const updatedAnswers = {\n        ...prevAnswers,\n        [selectedCard.ID]: answer\n      };\n      return updatedAnswers;\n    });\n    setRiskAnswer(null);\n  };\n  const handleAgreementAnswer = answer => {\n    let AgreementResult;\n    let selectedPercent, unselectedPercent;\n\n    // search the pairwiseData\n    for (let i = 0; i < pairwiseData.data.length; i++) {\n      let pair = pairwiseData.data[i].pair;\n\n      // if we found the right pair\n      if (pair.includes(selectedCard.ID) && pair.includes(unselectedCard.ID)) {\n        let percentages = pairwiseData.data[i].percentages;\n        if (selectedCard.ID === \"unsure\" || answer === \"unsure\") {\n          AgreementResult = null;\n        } else if (percentages[selectedCard.ID] === 50 || percentages[selectedCard.ID] > 50 && answer === \"yes\" || percentages[selectedCard.ID] < 50 && answer === \"no\") {\n          console.log(selectedCard.ID);\n          console.log(percentages[selectedCard.ID] > 50);\n          AgreementResult = \"correct\";\n        } else {\n          AgreementResult = \"incorrect\";\n        }\n\n        // get the percentages from the data\n        selectedPercent = percentages[selectedCard.ID];\n        unselectedPercent = percentages[unselectedCard.ID];\n        break;\n      }\n    }\n\n    // If AgreementResult is undefined, then there was no match found\n    if (AgreementResult === undefined) {\n      throw new Error(\"No match found for selected card in pairwise data.\");\n    }\n    if (AgreementResult === \"correct\") {\n      setAgreementResult(\"Correct\");\n      setScore(prevScore => prevScore + 10);\n    } else {\n      setAgreementResult(\"Incorrect\");\n      // setScore remains unchanged\n    }\n\n    // set the percentages to the actual percentages from the data\n    setSelectedPercent(selectedPercent);\n    setUnselectedPercent(unselectedPercent);\n    setRiskAnswer(\"show\");\n    setCardMatchups([...cardMatchups, {\n      Card1: shuffledTechnologies[currentPairIndex][0].ID,\n      Card2: shuffledTechnologies[currentPairIndex][1].ID,\n      Answer: selectedCard.ID,\n      Majority: answer\n    }]);\n    setShowAgreementResult(true); // Initially set showAgreementResult to true\n    setTimeout(() => {\n      setShowAgreementResult(false); // After a second, set showAgreementResult back to false\n    }, 2000);\n    setShowDescriptorImages(true);\n    setAgreementAnswer(answer);\n  };\n  const handleNextCards = () => {\n    let updatedRankings = {\n      ...rankings\n    };\n    // Check if we should move onto the next stage or finish this round\n\n    const selectedTech = selectedCard.title;\n    const unselectedTech = unselectedCard.title;\n\n    // Update wins, losses, and opponents\n    updatedRankings[selectedTech].wins += 1;\n    updatedRankings[unselectedTech].losses += 1;\n    updatedRankings[selectedTech].opponents[unselectedTech] = (updatedRankings[selectedTech].opponents[unselectedTech] || 0) + 1;\n    updatedRankings[unselectedTech].opponents[selectedTech] = (updatedRankings[unselectedTech].opponents[selectedTech] || 0) - 1;\n\n    // Update the descriptors\n    setRankings(updatedRankings);\n    setSelectedDescriptors([]);\n    setSelectedCard(null);\n    setUnselectedCard(null);\n    setCurrentPairIndex(currentPairIndex + 1);\n    setSelectionMade(false);\n    setSelectedIndex(null);\n    setAgreementAnswer(null);\n    setShowDescriptorImages(false);\n    setRiskAnswer(null);\n\n    // Now the effect that triggers game over will run if necessary\n  };\n\n  const handleSkip = () => {\n    let updatedRankings = {\n      ...rankings\n    };\n    const firstTech = shuffledTechnologies[currentPairIndex][0].title;\n    const secondTech = shuffledTechnologies[currentPairIndex][1].title;\n    setCardMatchups([...cardMatchups, {\n      Card1: shuffledTechnologies[currentPairIndex][0].ID,\n      Card2: shuffledTechnologies[currentPairIndex][1].ID,\n      Answer: \"Skip\",\n      Majority: \"Skip\"\n    }]);\n\n    // Update ties and opponents\n    updatedRankings[firstTech].ties += 1;\n    updatedRankings[secondTech].ties += 1;\n    updatedRankings[firstTech].opponents[secondTech] = updatedRankings[firstTech].opponents[secondTech] || 0;\n    updatedRankings[secondTech].opponents[firstTech] = updatedRankings[secondTech].opponents[firstTech] || 0;\n    setScoreIndex(scoreIndex => scoreIndex + 1);\n    setRankings(updatedRankings);\n    setSelectedDescriptors([]);\n    setSelectedCard(null);\n    setUnselectedCard(null);\n    setCurrentPairIndex(currentPairIndex + 1);\n    setDescriptorStage(\"firstDescriptors\"); // Reset the descriptor stage\n    setSelectionMade(false);\n    setAgreementAnswer(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pairwise-game\",\n    children: [!gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar-inner\",\n        style: {\n          width: `${progress}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 9\n    }, this), !gameOver && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Which technology worries you more?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottomHalf\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"technology-pair\",\n          children: [currentPairIndex < shuffledTechnologies.length && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: renderTechnologyCard()\n          }, void 0, false), selectedCard ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"descriptors\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              text: \"Skip\",\n              onClick: handleSkip\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 13\n        }, this), selectedCard && showDescriptorImages && !showAgreementResult && riskAnswer && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"agreement-question\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"How would you classify this technology?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleRiskAnswer(\"Low\"),\n              children: \"Low Risk\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleRiskAnswer(\"High\"),\n              children: \"High Risk\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 411,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleRiskAnswer(\"Unacceptable\"),\n              children: \"Unacceptable Risk\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleRiskAnswer(\"Unsure\"),\n              children: \"Unsure\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 17\n        }, this), selectedCard && !riskAnswer && !agreementAnswer && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"agreement-question\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Do most people agree with you?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleAgreementAnswer(\"yes\"),\n              children: \"Yes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 429,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleAgreementAnswer(\"no\"),\n              children: \"No\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleAgreementAnswer(\"unsure\"),\n              children: \"Unsure\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 435,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 15\n        }, this), selectedCard && agreementAnswer && showAgreementResult && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"agreement-question\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Do most people agree with you?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-container\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: agreementResult === \"Correct\" ? \"correct\" : \"incorrect\",\n              children: agreementResult\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 446,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 15\n        }, this), selectedCard && showDescriptorImages && !showAgreementResult && !riskAnswer && /*#__PURE__*/_jsxDEV(MoralDescriptors, {\n          moralDescriptors: moralDescriptors,\n          handleNextCards: handleNextCards,\n          setMoralChoices: setMoralChoices,\n          selectedCard: selectedCard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(ScoreBar, {\n          score: score,\n          currentPairIndex: currentPairIndex\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), gameOver && !skipDemographics && /*#__PURE__*/_jsxDEV(DemographicCollection, {\n      finishGame: finishGame,\n      setDemographics: setDemographics,\n      sendToDemographicData: sendToDemographicData,\n      setOutputData: setOutputData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 376,\n    columnNumber: 5\n  }, this);\n};\n_s(PairwiseGame, \"QDnYS2vk78Jdd7Gc/Bp8V6nycjg=\");\n_c = PairwiseGame;\nexport default PairwiseGame;\nvar _c;\n$RefreshReg$(_c, \"PairwiseGame\");","map":{"version":3,"names":["React","useState","useEffect","TechnologyCard","Rankings","ScoreBar","Comparisons","MoralDescriptors","Button","DemographicCollection","jsxDEV","_jsxDEV","Fragment","_Fragment","moralDescriptors","PairwiseGame","_ref","_s","technologies","pairwiseData","finishGame","skipDemographics","demographics","setDemographics","setOutputData","userID","shuffledTechnologies","setShuffledTechnologies","currentPairIndex","setCurrentPairIndex","rankings","setRankings","selectedDescriptors","setSelectedDescriptors","gameOver","setGameOver","selectedCard","setSelectedCard","unselectedCard","setUnselectedCard","descriptorStage","setDescriptorStage","progress","setProgress","selectionMade","setSelectionMade","selectedPercent","setSelectedPercent","unselectedPercent","setUnselectedPercent","firstClickTime","setFirstClickTime","descriptorClickTimes","setDescriptorClickTimes","score","setScore","selectedIndex","setSelectedIndex","scoreIndex","setScoreIndex","agreementAnswer","setAgreementAnswer","showDescriptorImages","setShowDescriptorImages","agreementResult","setAgreementResult","showAgreementResult","setShowAgreementResult","cardMatchups","setCardMatchups","moralChoices","setMoralChoices","sendToDemographicData","setSendToDemographicData","riskAnswer","setRiskAnswer","riskAnswerOuput","setRiskAnswerOutput","console","log","length","i","j","Math","floor","random","tempShuffledTechnologies","pair1","push","initialRankings","forEach","tech","title","descriptors","wins","losses","ties","opponents","UserID","risk","CardMatchups","Moral","finalData","calculateProgress","totalPairs","currentProgress","handleChoice","chosenIndex","Date","now","chosenCard","renderTechnologyCard","tech1","tech2","selectedPercent1","unselectedPercent1","selectedPercent2","unselectedPercent2","currentPair","map","ID","data","pair","sort","join","percentages","percent1","percent2","isClicked1","isClicked2","fileName","_jsxFileName","lineNumber","columnNumber","handleRiskAnswer","answer","prevAnswers","updatedAnswers","handleAgreementAnswer","AgreementResult","includes","undefined","Error","prevScore","Card1","Card2","Answer","Majority","setTimeout","handleNextCards","updatedRankings","selectedTech","unselectedTech","handleSkip","firstTech","secondTech","className","children","style","width","text","onClick","_c","$RefreshReg$"],"sources":["C:/Users/lpana/OneDrive/Documents/gameIterations/scoreUpdate/src/components/PairwiseGame.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport TechnologyCard from \"./TechnologyCard\";\r\nimport Rankings from \"./Rankings\";\r\nimport ScoreBar from \"./ScoreBar\";\r\nimport Comparisons from \"../data/comparisons.json\";\r\n\r\nimport MoralDescriptors from \"./MoralDescriptors\";\r\nimport Button from \"./Button\";\r\nimport DemographicCollection from \"./DemographicCollection\";\r\nimport \"./styles/PairwiseGame.css\";\r\n\r\nconst moralDescriptors = [\"Authority\", \"Fair\", \"Harm\", \"Loyalty\", \"Purity\"];\r\n\r\nconst PairwiseGame = ({\r\n  technologies,\r\n  pairwiseData,\r\n  finishGame,\r\n  skipDemographics,\r\n  demographics,\r\n  setDemographics,\r\n  setOutputData,\r\n  userID,\r\n}) => {\r\n  const [shuffledTechnologies, setShuffledTechnologies] = useState([]);\r\n\r\n  const [currentPairIndex, setCurrentPairIndex] = useState(0);\r\n  const [rankings, setRankings] = useState({});\r\n  const [selectedDescriptors, setSelectedDescriptors] = useState([]);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [selectedCard, setSelectedCard] = useState(null);\r\n  const [unselectedCard, setUnselectedCard] = useState(null);\r\n  const [descriptorStage, setDescriptorStage] = useState(\"firstDescriptors\");\r\n  const [progress, setProgress] = useState(0);\r\n  const [selectionMade, setSelectionMade] = useState(false);\r\n  const [selectedPercent, setSelectedPercent] = useState(0);\r\n  const [unselectedPercent, setUnselectedPercent] = useState(0);\r\n  const [firstClickTime, setFirstClickTime] = useState(null);\r\n  const [descriptorClickTimes, setDescriptorClickTimes] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n  const [selectedIndex, setSelectedIndex] = useState(null);\r\n  const [scoreIndex, setScoreIndex] = useState(0);\r\n  const [agreementAnswer, setAgreementAnswer] = useState(null);\r\n  const [showDescriptorImages, setShowDescriptorImages] = useState(false);\r\n  const [agreementResult, setAgreementResult] = useState(null);\r\n  const [showAgreementResult, setShowAgreementResult] = useState(false);\r\n  // Add these to your current list of useState calls\r\n  const [cardMatchups, setCardMatchups] = useState([]);\r\n  const [moralChoices, setMoralChoices] = useState({});\r\n  const [sendToDemographicData, setSendToDemographicData] = useState();\r\n  const [riskAnswer, setRiskAnswer] = useState(null);\r\n  const [riskAnswerOuput, setRiskAnswerOutput] = useState({});\r\n\r\n  useEffect(() => {\r\n    console.log(pairwiseData);\r\n    if (technologies.length > 0) {\r\n      // Shuffle technologies array\r\n      let shuffledTechnologies = [...technologies];\r\n\r\n      for (let i = shuffledTechnologies.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n        [shuffledTechnologies[i], shuffledTechnologies[j]] = [\r\n          shuffledTechnologies[j],\r\n          shuffledTechnologies[i],\r\n        ];\r\n      }\r\n\r\n      let tempShuffledTechnologies = [];\r\n      for (let i = 0; i < shuffledTechnologies.length; i++) {\r\n        let pair1 = [\r\n          shuffledTechnologies[i],\r\n          shuffledTechnologies[\r\n            (i - 1 + shuffledTechnologies.length) % shuffledTechnologies.length\r\n          ],\r\n        ];\r\n        tempShuffledTechnologies.push(pair1);\r\n      }\r\n\r\n      // Shuffle tempShuffledTechnologies\r\n      for (let i = tempShuffledTechnologies.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n        [tempShuffledTechnologies[i], tempShuffledTechnologies[j]] = [\r\n          tempShuffledTechnologies[j],\r\n          tempShuffledTechnologies[i],\r\n        ];\r\n      }\r\n\r\n      setShuffledTechnologies(tempShuffledTechnologies);\r\n\r\n      // Use the original technologies array for the initial rankings\r\n      let initialRankings = {};\r\n      technologies.forEach((tech) => {\r\n        initialRankings[tech.title] = {\r\n          descriptors: [],\r\n          wins: 0,\r\n          losses: 0,\r\n          ties: 0,\r\n          opponents: {}, // Keep track of wins, losses, and ties against each opponent\r\n        };\r\n      });\r\n      setRankings(initialRankings);\r\n    }\r\n  }, [technologies]);\r\n\r\n  useEffect(() => {\r\n    if (currentPairIndex >= technologies.length) {\r\n      setSendToDemographicData({\r\n        UserID: userID, // this should be fetched dynamically\r\n        demographics: demographics,\r\n        risk: riskAnswerOuput,\r\n\r\n        CardMatchups: cardMatchups,\r\n        Moral: moralChoices,\r\n      });\r\n\r\n      // Output the final JSON\r\n      console.log(skipDemographics);\r\n      if (skipDemographics && currentPairIndex >= shuffledTechnologies.length) {\r\n        const finalData = {\r\n          UserID: userID, // this should be fetched dynamically\r\n          demographics: demographics,\r\n          risk: riskAnswerOuput,\r\n          CardMatchups: cardMatchups,\r\n          Moral: moralChoices,\r\n        };\r\n\r\n        setOutputData(finalData);\r\n        finishGame(); // Call the finishGame function\r\n      }\r\n      setGameOver(true);\r\n    }\r\n  }, [\r\n    currentPairIndex,\r\n    technologies.length,\r\n    shuffledTechnologies.length,\r\n    skipDemographics,\r\n    finishGame,\r\n  ]);\r\n  useEffect(() => {\r\n    calculateProgress();\r\n  }, [currentPairIndex]);\r\n\r\n  const calculateProgress = () => {\r\n    const totalPairs = Math.floor(technologies.length);\r\n    const currentProgress = (currentPairIndex / totalPairs) * 100;\r\n    setProgress(currentProgress);\r\n  };\r\n\r\n  const handleChoice = (chosenIndex) => {\r\n    // Adjustments to handle new shuffledTechnologies format\r\n    setDescriptorClickTimes([]);\r\n    setFirstClickTime(Date.now());\r\n\r\n    if (selectedCard !== null) {\r\n      return; // If a card is already selected, do nothing\r\n    }\r\n\r\n    const chosenCard = chosenIndex % 2 === 0 ? 0 : 1;\r\n\r\n    setSelectedCard(shuffledTechnologies[currentPairIndex][chosenCard]);\r\n\r\n    setSelectedIndex(chosenIndex);\r\n    console.log(\"chosenIndex\", chosenIndex);\r\n    console.log(shuffledTechnologies[currentPairIndex]);\r\n\r\n    setUnselectedCard(\r\n      shuffledTechnologies[currentPairIndex][(chosenCard + 1) % 2]\r\n    );\r\n\r\n    setSelectionMade(true);\r\n    setAgreementAnswer(null);\r\n  };\r\n\r\n  const renderTechnologyCard = () => {\r\n    const tech1 = shuffledTechnologies[currentPairIndex][0];\r\n    const tech2 = shuffledTechnologies[currentPairIndex][1];\r\n    // Define default percents\r\n    let selectedPercent = 50;\r\n    let unselectedPercent = 50;\r\n\r\n    // The current pair from shuffledTechnologies\r\n    let selectedPercent1 = 50;\r\n    let unselectedPercent1 = 50;\r\n\r\n    let selectedPercent2 = 50;\r\n    let unselectedPercent2 = 50;\r\n\r\n    const currentPair = shuffledTechnologies[currentPairIndex].map(\r\n      (tech) => tech.ID\r\n    );\r\n\r\n    for (let i = 0; i < pairwiseData.data.length; i++) {\r\n      const pair = pairwiseData.data[i].pair;\r\n\r\n      if (pair.sort().join(\",\") === currentPair.sort().join(\",\")) {\r\n        const percentages = pairwiseData.data[i].percentages;\r\n\r\n        selectedPercent1 = percentages[tech1.ID];\r\n        unselectedPercent1 = 100 - selectedPercent1;\r\n\r\n        selectedPercent2 = percentages[tech2.ID];\r\n        unselectedPercent2 = 100 - selectedPercent2;\r\n\r\n        break;\r\n      }\r\n    }\r\n\r\n    return (\r\n      <TechnologyCard\r\n        key={`${tech1.title}-${tech2.title}`}\r\n        tech1={tech1}\r\n        tech2={tech2}\r\n        handleChoice={handleChoice}\r\n        percent1={{\r\n          selectedCard: selectedPercent1,\r\n          unselectedCard: unselectedPercent1,\r\n        }}\r\n        percent2={{\r\n          selectedCard: selectedPercent2,\r\n          unselectedCard: unselectedPercent2,\r\n        }}\r\n        selectionMade={selectionMade}\r\n        agreementAnswer={agreementAnswer}\r\n        isClicked1={0 === selectedIndex}\r\n        isClicked2={1 === selectedIndex}\r\n      />\r\n    );\r\n  };\r\n\r\n  const handleRiskAnswer = (answer) => {\r\n    setRiskAnswerOutput((prevAnswers) => {\r\n      const updatedAnswers = { ...prevAnswers, [selectedCard.ID]: answer };\r\n      return updatedAnswers;\r\n    });\r\n    setRiskAnswer(null);\r\n  };\r\n\r\n  const handleAgreementAnswer = (answer) => {\r\n    let AgreementResult;\r\n    let selectedPercent, unselectedPercent;\r\n\r\n    // search the pairwiseData\r\n    for (let i = 0; i < pairwiseData.data.length; i++) {\r\n      let pair = pairwiseData.data[i].pair;\r\n\r\n      // if we found the right pair\r\n      if (pair.includes(selectedCard.ID) && pair.includes(unselectedCard.ID)) {\r\n        let percentages = pairwiseData.data[i].percentages;\r\n\r\n        if (selectedCard.ID === \"unsure\" || answer === \"unsure\") {\r\n          AgreementResult = null;\r\n        } else if (\r\n          percentages[selectedCard.ID] === 50 ||\r\n          (percentages[selectedCard.ID] > 50 && answer === \"yes\") ||\r\n          (percentages[selectedCard.ID] < 50 && answer === \"no\")\r\n        ) {\r\n          console.log(selectedCard.ID);\r\n\r\n          console.log(percentages[selectedCard.ID] > 50);\r\n          AgreementResult = \"correct\";\r\n        } else {\r\n          AgreementResult = \"incorrect\";\r\n        }\r\n\r\n        // get the percentages from the data\r\n        selectedPercent = percentages[selectedCard.ID];\r\n        unselectedPercent = percentages[unselectedCard.ID];\r\n\r\n        break;\r\n      }\r\n    }\r\n\r\n    // If AgreementResult is undefined, then there was no match found\r\n    if (AgreementResult === undefined) {\r\n      throw new Error(\"No match found for selected card in pairwise data.\");\r\n    }\r\n\r\n    if (AgreementResult === \"correct\") {\r\n      setAgreementResult(\"Correct\");\r\n      setScore((prevScore) => prevScore + 10);\r\n    } else {\r\n      setAgreementResult(\"Incorrect\");\r\n      // setScore remains unchanged\r\n    }\r\n\r\n    // set the percentages to the actual percentages from the data\r\n    setSelectedPercent(selectedPercent);\r\n    setUnselectedPercent(unselectedPercent);\r\n\r\n    setRiskAnswer(\"show\");\r\n\r\n    setCardMatchups([\r\n      ...cardMatchups,\r\n      {\r\n        Card1: shuffledTechnologies[currentPairIndex][0].ID,\r\n        Card2: shuffledTechnologies[currentPairIndex][1].ID,\r\n        Answer: selectedCard.ID,\r\n        Majority: answer,\r\n      },\r\n    ]);\r\n\r\n    setShowAgreementResult(true); // Initially set showAgreementResult to true\r\n    setTimeout(() => {\r\n      setShowAgreementResult(false); // After a second, set showAgreementResult back to false\r\n    }, 2000);\r\n\r\n    setShowDescriptorImages(true);\r\n    setAgreementAnswer(answer);\r\n  };\r\n\r\n  const handleNextCards = () => {\r\n    let updatedRankings = { ...rankings };\r\n    // Check if we should move onto the next stage or finish this round\r\n\r\n    const selectedTech = selectedCard.title;\r\n    const unselectedTech = unselectedCard.title;\r\n\r\n    // Update wins, losses, and opponents\r\n    updatedRankings[selectedTech].wins += 1;\r\n    updatedRankings[unselectedTech].losses += 1;\r\n    updatedRankings[selectedTech].opponents[unselectedTech] =\r\n      (updatedRankings[selectedTech].opponents[unselectedTech] || 0) + 1;\r\n    updatedRankings[unselectedTech].opponents[selectedTech] =\r\n      (updatedRankings[unselectedTech].opponents[selectedTech] || 0) - 1;\r\n\r\n    // Update the descriptors\r\n    setRankings(updatedRankings);\r\n    setSelectedDescriptors([]);\r\n    setSelectedCard(null);\r\n    setUnselectedCard(null);\r\n    setCurrentPairIndex(currentPairIndex + 1);\r\n    setSelectionMade(false);\r\n    setSelectedIndex(null);\r\n    setAgreementAnswer(null);\r\n    setShowDescriptorImages(false);\r\n    setRiskAnswer(null);\r\n\r\n    // Now the effect that triggers game over will run if necessary\r\n  };\r\n\r\n  const handleSkip = () => {\r\n    let updatedRankings = { ...rankings };\r\n    const firstTech = shuffledTechnologies[currentPairIndex][0].title;\r\n    const secondTech = shuffledTechnologies[currentPairIndex][1].title;\r\n\r\n    setCardMatchups([\r\n      ...cardMatchups,\r\n      {\r\n        Card1: shuffledTechnologies[currentPairIndex][0].ID,\r\n        Card2: shuffledTechnologies[currentPairIndex][1].ID,\r\n        Answer: \"Skip\",\r\n        Majority: \"Skip\",\r\n      },\r\n    ]);\r\n\r\n    // Update ties and opponents\r\n    updatedRankings[firstTech].ties += 1;\r\n    updatedRankings[secondTech].ties += 1;\r\n    updatedRankings[firstTech].opponents[secondTech] =\r\n      updatedRankings[firstTech].opponents[secondTech] || 0;\r\n    updatedRankings[secondTech].opponents[firstTech] =\r\n      updatedRankings[secondTech].opponents[firstTech] || 0;\r\n\r\n    setScoreIndex((scoreIndex) => scoreIndex + 1);\r\n    setRankings(updatedRankings);\r\n    setSelectedDescriptors([]);\r\n    setSelectedCard(null);\r\n    setUnselectedCard(null);\r\n    setCurrentPairIndex(currentPairIndex + 1);\r\n    setDescriptorStage(\"firstDescriptors\"); // Reset the descriptor stage\r\n    setSelectionMade(false);\r\n    setAgreementAnswer(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"pairwise-game\">\r\n      {!gameOver && (\r\n        <div className=\"progress-bar\">\r\n          <div\r\n            className=\"progress-bar-inner\"\r\n            style={{ width: `${progress}%` }}\r\n          ></div>\r\n        </div>\r\n      )}\r\n\r\n      {!gameOver && (\r\n        <>\r\n          <h2>Which technology worries you more?</h2>\r\n          <div className=\"bottomHalf\">\r\n            <div className=\"technology-pair\">\r\n              {currentPairIndex < shuffledTechnologies.length && (\r\n                <>{renderTechnologyCard()}</>\r\n              )}\r\n              {selectedCard ? null : (\r\n                <div className=\"descriptors\">\r\n                  <Button text=\"Skip\" onClick={handleSkip} />\r\n                </div>\r\n              )}\r\n            </div>\r\n            {selectedCard &&\r\n              showDescriptorImages &&\r\n              !showAgreementResult &&\r\n              riskAnswer && (\r\n                <div className=\"agreement-question\">\r\n                  <h3>How would you classify this technology?</h3>\r\n\r\n                  <div className=\"button-container\">\r\n                    <button onClick={() => handleRiskAnswer(\"Low\")}>\r\n                      Low Risk\r\n                    </button>\r\n                    <button onClick={() => handleRiskAnswer(\"High\")}>\r\n                      High Risk\r\n                    </button>\r\n                    <button onClick={() => handleRiskAnswer(\"Unacceptable\")}>\r\n                      Unacceptable Risk\r\n                    </button>\r\n                    <button onClick={() => handleRiskAnswer(\"Unsure\")}>\r\n                      Unsure\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n            {selectedCard && !riskAnswer && !agreementAnswer && (\r\n              <div className=\"agreement-question\">\r\n                <h3>Do most people agree with you?</h3>\r\n\r\n                <div className=\"button-container\">\r\n                  <button onClick={() => handleAgreementAnswer(\"yes\")}>\r\n                    Yes\r\n                  </button>\r\n                  <button onClick={() => handleAgreementAnswer(\"no\")}>\r\n                    No\r\n                  </button>\r\n                  <button onClick={() => handleAgreementAnswer(\"unsure\")}>\r\n                    Unsure\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n            {selectedCard && agreementAnswer && showAgreementResult && (\r\n              <div className=\"agreement-question\">\r\n                <h3>Do most people agree with you?</h3>\r\n\r\n                <div className=\"button-container\">\r\n                  <p\r\n                    className={\r\n                      agreementResult === \"Correct\" ? \"correct\" : \"incorrect\"\r\n                    }\r\n                  >\r\n                    {agreementResult}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            )}\r\n            {selectedCard &&\r\n              showDescriptorImages &&\r\n              !showAgreementResult &&\r\n              !riskAnswer && (\r\n                <MoralDescriptors\r\n                  moralDescriptors={moralDescriptors}\r\n                  handleNextCards={handleNextCards}\r\n                  setMoralChoices={setMoralChoices}\r\n                  selectedCard={selectedCard}\r\n                />\r\n              )}\r\n            <ScoreBar score={score} currentPairIndex={currentPairIndex} />\r\n          </div>\r\n        </>\r\n      )}\r\n      {gameOver && !skipDemographics && (\r\n        <DemographicCollection\r\n          finishGame={finishGame}\r\n          setDemographics={setDemographics}\r\n          sendToDemographicData={sendToDemographicData}\r\n          setOutputData={setOutputData}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default PairwiseGame;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}