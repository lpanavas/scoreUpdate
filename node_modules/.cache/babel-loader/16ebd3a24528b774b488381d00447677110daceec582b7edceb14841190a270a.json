{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lpana\\\\OneDrive\\\\Documents\\\\gameIterations\\\\scoreUpdate\\\\src\\\\components\\\\PairwiseGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useSpring, animated as a } from \"react-spring\"; // Added this line\nimport { useTrail, animated as b } from \"react-spring\";\nimport TechnologyCard from \"./TechnologyCard\";\nimport Rankings from \"./Rankings\";\nimport ScoreBar from \"./ScoreBar\";\nimport Comparisons from \"../data/comparisons.json\";\nimport ScoreLine from \"./ScoreLine\";\nimport TwoScoreLine from \"./TwoScoreLine\";\nimport MoralDescriptors from \"./MoralDescriptors\";\nimport Button from \"./Button\";\nimport \"./styles/PairwiseGame.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst moralDescriptors = [\"Authority\", \"Fair\"];\nconst firstBad = [\"Harmful\", \"Unjust\", \"Disloyal\", \"Disobedient\", \"Indecent\"];\nconst firstGood = [\"Protective\", \"Impartial\", \"Loyal\", \"Respectful\", \"Decent\"];\nconst secondBad = [\"Violent\", \"Discriminatory\", \"Traitor\", \"Defiant\", \"Obscene\"];\nconst secondGood = [\"Caring\", \"Fair\", \"Devoted\", \"Lawful\", \"Virtuous\"];\nconst descriptors = {\n  firstDescriptors: [...firstBad, ...firstGood],\n  secondDescriptors: [...secondBad, ...secondGood]\n};\nconst PairwiseGame = _ref => {\n  _s();\n  let {\n    technologies,\n    finishGame\n  } = _ref;\n  const [shuffledTechnologies, setShuffledTechnologies] = useState([]);\n  const [currentPairIndex, setCurrentPairIndex] = useState(0);\n  const [rankings, setRankings] = useState({});\n  const [selectedDescriptors, setSelectedDescriptors] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [selectedCard, setSelectedCard] = useState(null);\n  const [unselectedCard, setUnselectedCard] = useState(null);\n  const [descriptorStage, setDescriptorStage] = useState(\"firstDescriptors\");\n  const [progress, setProgress] = useState(0);\n  const [selectionMade, setSelectionMade] = useState(false);\n  const [selectedPercent, setSelectedPercent] = useState(0);\n  const [unselectedPercent, setUnselectedPercent] = useState(0);\n  const [firstClickTime, setFirstClickTime] = useState(null);\n  const [descriptorClickTimes, setDescriptorClickTimes] = useState([]);\n  const [score, setScore] = useState(0);\n  const [selectedIndex, setSelectedIndex] = useState(null);\n  const [scoreIndex, setScoreIndex] = useState(0);\n  const [agreementAnswer, setAgreementAnswer] = useState(null);\n  const [showDescriptorImages, setShowDescriptorImages] = useState(false);\n  const [agreementResult, setAgreementResult] = useState(null);\n  useEffect(() => {\n    if (technologies.length > 0) {\n      // Shuffle technologies array\n      let shuffledTechnologies = [...technologies];\n      for (let i = shuffledTechnologies.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [shuffledTechnologies[i], shuffledTechnologies[j]] = [shuffledTechnologies[j], shuffledTechnologies[i]];\n      }\n\n      // Create pairs from the shuffled technologies array\n      let tempShuffledTechnologies = [];\n      for (let i = 0; i < shuffledTechnologies.length; i += 2) {\n        tempShuffledTechnologies.push([shuffledTechnologies[i], shuffledTechnologies[i + 1]]);\n      }\n\n      // Limit the length of tempShuffledTechnologies to match the length of technologies\n      tempShuffledTechnologies = tempShuffledTechnologies.slice(0, technologies.length);\n      setShuffledTechnologies(tempShuffledTechnologies);\n\n      // Use the original technologies array for the initial rankings\n      let initialRankings = {};\n      technologies.forEach(tech => {\n        initialRankings[tech.title] = {\n          descriptors: [],\n          wins: 0,\n          losses: 0,\n          ties: 0,\n          opponents: {} // Keep track of wins, losses, and ties against each opponent\n        };\n      });\n\n      setRankings(initialRankings);\n    }\n  }, [technologies]);\n  useEffect(() => {\n    if (currentPairIndex >= technologies.length / 2) {\n      setGameOver(true);\n    }\n  }, [currentPairIndex, technologies.length]);\n  useEffect(() => {\n    calculateProgress();\n  }, [currentPairIndex]);\n  const calculateProgress = () => {\n    const totalPairs = Math.floor(technologies.length / 2);\n    const currentProgress = currentPairIndex / totalPairs * 100;\n    setProgress(currentProgress);\n  };\n  const handleChoice = chosenIndex => {\n    // Adjustments to handle new shuffledTechnologies format\n    setDescriptorClickTimes([]);\n    setFirstClickTime(Date.now());\n    if (selectedCard !== null) {\n      return; // If a card is already selected, do nothing\n    }\n\n    const chosenCard = chosenIndex % 2 === 0 ? 0 : 1;\n    setSelectedCard(shuffledTechnologies[currentPairIndex][chosenCard]);\n    setSelectedIndex(chosenIndex);\n    setUnselectedCard(shuffledTechnologies[currentPairIndex][(chosenCard + 1) % 2]);\n    setSelectionMade(true);\n    setAgreementAnswer(null);\n  };\n  const renderTechnologyCard = index => {\n    const tech = shuffledTechnologies[currentPairIndex][index];\n    const percent = {\n      selectedCard: selectedPercent,\n      unselectedCard: unselectedPercent\n    };\n    return /*#__PURE__*/_jsxDEV(TechnologyCard, {\n      tech: tech,\n      handleChoice: handleChoice,\n      index: index,\n      percent: percent,\n      selectionMade: selectionMade,\n      agreementAnswer: agreementAnswer,\n      isClicked: index === selectedIndex\n    }, tech.title, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this);\n  };\n  const handleAgreementAnswer = answer => {\n    console.log(selectedCard.title, unselectedCard.title, answer);\n    const percentCard = selectedCard;\n    const unpercentCard = unselectedCard;\n    const foundComparison = Comparisons.comparisons.find(comp => comp.title1 === percentCard.title && comp.title2 === unpercentCard.title);\n    setScoreIndex(scoreIndex => scoreIndex + 1);\n\n    // Update the score based on the selectedPercent\n    if (foundComparison && answer === \"yes\") {\n      setScore(prevScore => prevScore + 10);\n      setSelectedPercent(foundComparison.percent1);\n      setUnselectedPercent(foundComparison.percent2);\n    }\n    if (foundComparison && answer === \"no\") {\n      setScore(prevScore => prevScore);\n      setSelectedPercent(foundComparison.percent1);\n      setUnselectedPercent(foundComparison.percent2);\n    }\n    if (foundComparison && answer === \"unsure\") {\n      setScore(prevScore => prevScore);\n      setSelectedPercent(foundComparison.percent1);\n      setUnselectedPercent(foundComparison.percent2);\n    }\n    if (foundComparison && answer === \"no\") {\n      setScore(prevScore => prevScore);\n      setSelectedPercent(foundComparison.percent1);\n      setUnselectedPercent(foundComparison.percent2);\n    }\n    if (!foundComparison && answer === \"yes\") {\n      setScore(prevScore => prevScore);\n      setSelectedPercent(foundComparison.percent1);\n      setUnselectedPercent(foundComparison.percent2);\n    } else {\n      setScore(prevScore => prevScore);\n      const wrongOrder = Comparisons.comparisons.find(comp => comp.title1 === unpercentCard.title && comp.title2 === percentCard.title);\n      setSelectedPercent(wrongOrder.percent2);\n      setUnselectedPercent(wrongOrder.percent1);\n    }\n    setShowDescriptorImages(true);\n    setAgreementAnswer(answer);\n  };\n  const handleNextCards = () => {\n    let updatedRankings = {\n      ...rankings\n    };\n    // Check if we should move onto the next stage or finish this round\n\n    const selectedTech = selectedCard.title;\n    const unselectedTech = unselectedCard.title;\n\n    // Update wins, losses, and opponents\n    updatedRankings[selectedTech].wins += 1;\n    updatedRankings[unselectedTech].losses += 1;\n    updatedRankings[selectedTech].opponents[unselectedTech] = (updatedRankings[selectedTech].opponents[unselectedTech] || 0) + 1;\n    updatedRankings[unselectedTech].opponents[selectedTech] = (updatedRankings[unselectedTech].opponents[selectedTech] || 0) - 1;\n\n    // Update the descriptors\n\n    setRankings(updatedRankings);\n    setSelectedDescriptors([]);\n    setSelectedCard(null);\n    setUnselectedCard(null);\n    setCurrentPairIndex(currentPairIndex + 1);\n    setDescriptorStage(\"firstDescriptors\"); // Reset the descriptor stage\n    setSelectionMade(false);\n    setSelectedIndex(null);\n    setAgreementAnswer(null);\n    setShowDescriptorImages(false);\n\n    // Now the effect that triggers game over will run if necessary\n  };\n\n  const handleSkip = () => {\n    let updatedRankings = {\n      ...rankings\n    };\n    const firstTech = shuffledTechnologies[currentPairIndex][0].title;\n    const secondTech = shuffledTechnologies[currentPairIndex][1].title;\n\n    // Update ties and opponents\n    updatedRankings[firstTech].ties += 1;\n    updatedRankings[secondTech].ties += 1;\n    updatedRankings[firstTech].opponents[secondTech] = updatedRankings[firstTech].opponents[secondTech] || 0;\n    updatedRankings[secondTech].opponents[firstTech] = updatedRankings[secondTech].opponents[firstTech] || 0;\n    setScoreIndex(scoreIndex => scoreIndex + 1);\n    setRankings(updatedRankings);\n    setSelectedDescriptors([]);\n    setSelectedCard(null);\n    setUnselectedCard(null);\n    setCurrentPairIndex(currentPairIndex + 1);\n    setDescriptorStage(\"firstDescriptors\"); // Reset the descriptor stage\n    setSelectionMade(false);\n    setAgreementAnswer(null);\n  };\n  console.log(showDescriptorImages);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pairwise-game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar-inner\",\n        style: {\n          width: `${progress}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this), !gameOver && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Which technology do you prefer to be used on you or your loved ones? Facial recognition to ...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"technology-pair\",\n        children: [currentPairIndex < shuffledTechnologies.length && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [renderTechnologyCard(0), renderTechnologyCard(1)]\n        }, void 0, true), selectedCard ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"descriptors\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            text: \"Skip\",\n            onClick: handleSkip\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }, this), selectedCard && !agreementAnswer && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"agreement-question\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Do you think most people agree with you?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleAgreementAnswer(\"yes\"),\n            children: \"Yes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleAgreementAnswer(\"no\"),\n            children: \"No\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleAgreementAnswer(\"unsure\"),\n            children: \"Unsure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 13\n      }, this), selectedCard && showDescriptorImages && /*#__PURE__*/_jsxDEV(MoralDescriptors, {\n        moralDescriptors: moralDescriptors,\n        handleNextCards: handleNextCards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ScoreBar, {\n        score: score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), gameOver && /*#__PURE__*/_jsxDEV(Rankings, {\n      rankings: rankings,\n      finishGame: finishGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 5\n  }, this);\n};\n_s(PairwiseGame, \"E5BFn5tMWG3QAV06mk89k63CiB0=\");\n_c = PairwiseGame;\nexport default PairwiseGame;\nvar _c;\n$RefreshReg$(_c, \"PairwiseGame\");","map":{"version":3,"names":["React","useState","useEffect","useSpring","animated","a","useTrail","b","TechnologyCard","Rankings","ScoreBar","Comparisons","ScoreLine","TwoScoreLine","MoralDescriptors","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","moralDescriptors","firstBad","firstGood","secondBad","secondGood","descriptors","firstDescriptors","secondDescriptors","PairwiseGame","_ref","_s","technologies","finishGame","shuffledTechnologies","setShuffledTechnologies","currentPairIndex","setCurrentPairIndex","rankings","setRankings","selectedDescriptors","setSelectedDescriptors","gameOver","setGameOver","selectedCard","setSelectedCard","unselectedCard","setUnselectedCard","descriptorStage","setDescriptorStage","progress","setProgress","selectionMade","setSelectionMade","selectedPercent","setSelectedPercent","unselectedPercent","setUnselectedPercent","firstClickTime","setFirstClickTime","descriptorClickTimes","setDescriptorClickTimes","score","setScore","selectedIndex","setSelectedIndex","scoreIndex","setScoreIndex","agreementAnswer","setAgreementAnswer","showDescriptorImages","setShowDescriptorImages","agreementResult","setAgreementResult","length","i","j","Math","floor","random","tempShuffledTechnologies","push","slice","initialRankings","forEach","tech","title","wins","losses","ties","opponents","calculateProgress","totalPairs","currentProgress","handleChoice","chosenIndex","Date","now","chosenCard","renderTechnologyCard","index","percent","isClicked","fileName","_jsxFileName","lineNumber","columnNumber","handleAgreementAnswer","answer","console","log","percentCard","unpercentCard","foundComparison","comparisons","find","comp","title1","title2","prevScore","percent1","percent2","wrongOrder","handleNextCards","updatedRankings","selectedTech","unselectedTech","handleSkip","firstTech","secondTech","className","children","style","width","text","onClick","_c","$RefreshReg$"],"sources":["C:/Users/lpana/OneDrive/Documents/gameIterations/scoreUpdate/src/components/PairwiseGame.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useSpring, animated as a } from \"react-spring\"; // Added this line\r\nimport { useTrail, animated as b } from \"react-spring\";\r\nimport TechnologyCard from \"./TechnologyCard\";\r\nimport Rankings from \"./Rankings\";\r\nimport ScoreBar from \"./ScoreBar\";\r\nimport Comparisons from \"../data/comparisons.json\";\r\nimport ScoreLine from \"./ScoreLine\";\r\nimport TwoScoreLine from \"./TwoScoreLine\";\r\nimport MoralDescriptors from \"./MoralDescriptors\";\r\nimport Button from \"./Button\";\r\nimport \"./styles/PairwiseGame.css\";\r\n\r\nconst moralDescriptors = [\"Authority\", \"Fair\"];\r\n\r\nconst firstBad = [\"Harmful\", \"Unjust\", \"Disloyal\", \"Disobedient\", \"Indecent\"];\r\nconst firstGood = [\"Protective\", \"Impartial\", \"Loyal\", \"Respectful\", \"Decent\"];\r\nconst secondBad = [\r\n  \"Violent\",\r\n  \"Discriminatory\",\r\n  \"Traitor\",\r\n  \"Defiant\",\r\n  \"Obscene\",\r\n];\r\nconst secondGood = [\"Caring\", \"Fair\", \"Devoted\", \"Lawful\", \"Virtuous\"];\r\nconst descriptors = {\r\n  firstDescriptors: [...firstBad, ...firstGood],\r\n  secondDescriptors: [...secondBad, ...secondGood],\r\n};\r\n\r\nconst PairwiseGame = ({ technologies, finishGame }) => {\r\n  const [shuffledTechnologies, setShuffledTechnologies] = useState([]);\r\n\r\n  const [currentPairIndex, setCurrentPairIndex] = useState(0);\r\n  const [rankings, setRankings] = useState({});\r\n  const [selectedDescriptors, setSelectedDescriptors] = useState([]);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [selectedCard, setSelectedCard] = useState(null);\r\n  const [unselectedCard, setUnselectedCard] = useState(null);\r\n  const [descriptorStage, setDescriptorStage] = useState(\"firstDescriptors\");\r\n  const [progress, setProgress] = useState(0);\r\n  const [selectionMade, setSelectionMade] = useState(false);\r\n  const [selectedPercent, setSelectedPercent] = useState(0);\r\n  const [unselectedPercent, setUnselectedPercent] = useState(0);\r\n  const [firstClickTime, setFirstClickTime] = useState(null);\r\n  const [descriptorClickTimes, setDescriptorClickTimes] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n  const [selectedIndex, setSelectedIndex] = useState(null);\r\n  const [scoreIndex, setScoreIndex] = useState(0);\r\n  const [agreementAnswer, setAgreementAnswer] = useState(null);\r\n  const [showDescriptorImages, setShowDescriptorImages] = useState(false);\r\n  const [agreementResult, setAgreementResult] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (technologies.length > 0) {\r\n      // Shuffle technologies array\r\n      let shuffledTechnologies = [...technologies];\r\n      for (let i = shuffledTechnologies.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n        [shuffledTechnologies[i], shuffledTechnologies[j]] = [\r\n          shuffledTechnologies[j],\r\n          shuffledTechnologies[i],\r\n        ];\r\n      }\r\n\r\n      // Create pairs from the shuffled technologies array\r\n      let tempShuffledTechnologies = [];\r\n      for (let i = 0; i < shuffledTechnologies.length; i += 2) {\r\n        tempShuffledTechnologies.push([\r\n          shuffledTechnologies[i],\r\n          shuffledTechnologies[i + 1],\r\n        ]);\r\n      }\r\n\r\n      // Limit the length of tempShuffledTechnologies to match the length of technologies\r\n      tempShuffledTechnologies = tempShuffledTechnologies.slice(\r\n        0,\r\n        technologies.length\r\n      );\r\n      setShuffledTechnologies(tempShuffledTechnologies);\r\n\r\n      // Use the original technologies array for the initial rankings\r\n      let initialRankings = {};\r\n      technologies.forEach((tech) => {\r\n        initialRankings[tech.title] = {\r\n          descriptors: [],\r\n          wins: 0,\r\n          losses: 0,\r\n          ties: 0,\r\n          opponents: {}, // Keep track of wins, losses, and ties against each opponent\r\n        };\r\n      });\r\n      setRankings(initialRankings);\r\n    }\r\n  }, [technologies]);\r\n\r\n  useEffect(() => {\r\n    if (currentPairIndex >= technologies.length / 2) {\r\n      setGameOver(true);\r\n    }\r\n  }, [currentPairIndex, technologies.length]);\r\n\r\n  useEffect(() => {\r\n    calculateProgress();\r\n  }, [currentPairIndex]);\r\n\r\n  const calculateProgress = () => {\r\n    const totalPairs = Math.floor(technologies.length / 2);\r\n    const currentProgress = (currentPairIndex / totalPairs) * 100;\r\n    setProgress(currentProgress);\r\n  };\r\n\r\n  const handleChoice = (chosenIndex) => {\r\n    // Adjustments to handle new shuffledTechnologies format\r\n    setDescriptorClickTimes([]);\r\n    setFirstClickTime(Date.now());\r\n\r\n    if (selectedCard !== null) {\r\n      return; // If a card is already selected, do nothing\r\n    }\r\n\r\n    const chosenCard = chosenIndex % 2 === 0 ? 0 : 1;\r\n\r\n    setSelectedCard(shuffledTechnologies[currentPairIndex][chosenCard]);\r\n\r\n    setSelectedIndex(chosenIndex);\r\n\r\n    setUnselectedCard(\r\n      shuffledTechnologies[currentPairIndex][(chosenCard + 1) % 2]\r\n    );\r\n\r\n    setSelectionMade(true);\r\n    setAgreementAnswer(null);\r\n  };\r\n\r\n  const renderTechnologyCard = (index) => {\r\n    const tech = shuffledTechnologies[currentPairIndex][index];\r\n    const percent = {\r\n      selectedCard: selectedPercent,\r\n      unselectedCard: unselectedPercent,\r\n    };\r\n\r\n    return (\r\n      <TechnologyCard\r\n        key={tech.title}\r\n        tech={tech}\r\n        handleChoice={handleChoice}\r\n        index={index}\r\n        percent={percent}\r\n        selectionMade={selectionMade}\r\n        agreementAnswer={agreementAnswer}\r\n        isClicked={index === selectedIndex}\r\n      />\r\n    );\r\n  };\r\n\r\n  const handleAgreementAnswer = (answer) => {\r\n    console.log(selectedCard.title, unselectedCard.title, answer);\r\n\r\n    const percentCard = selectedCard;\r\n    const unpercentCard = unselectedCard;\r\n    const foundComparison = Comparisons.comparisons.find(\r\n      (comp) =>\r\n        comp.title1 === percentCard.title && comp.title2 === unpercentCard.title\r\n    );\r\n    setScoreIndex((scoreIndex) => scoreIndex + 1);\r\n\r\n    // Update the score based on the selectedPercent\r\n    if (foundComparison && answer === \"yes\") {\r\n      setScore((prevScore) => prevScore + 10);\r\n      setSelectedPercent(foundComparison.percent1);\r\n      setUnselectedPercent(foundComparison.percent2);\r\n    }\r\n    if (foundComparison && answer === \"no\") {\r\n      setScore((prevScore) => prevScore);\r\n      setSelectedPercent(foundComparison.percent1);\r\n      setUnselectedPercent(foundComparison.percent2);\r\n    }\r\n    if (foundComparison && answer === \"unsure\") {\r\n      setScore((prevScore) => prevScore);\r\n      setSelectedPercent(foundComparison.percent1);\r\n      setUnselectedPercent(foundComparison.percent2);\r\n    }\r\n    if (foundComparison && answer === \"no\") {\r\n      setScore((prevScore) => prevScore);\r\n      setSelectedPercent(foundComparison.percent1);\r\n      setUnselectedPercent(foundComparison.percent2);\r\n    }\r\n\r\n    if (!foundComparison && answer === \"yes\") {\r\n      setScore((prevScore) => prevScore);\r\n      setSelectedPercent(foundComparison.percent1);\r\n      setUnselectedPercent(foundComparison.percent2);\r\n    } else {\r\n      setScore((prevScore) => prevScore);\r\n      const wrongOrder = Comparisons.comparisons.find(\r\n        (comp) =>\r\n          comp.title1 === unpercentCard.title &&\r\n          comp.title2 === percentCard.title\r\n      );\r\n      setSelectedPercent(wrongOrder.percent2);\r\n      setUnselectedPercent(wrongOrder.percent1);\r\n    }\r\n\r\n    setShowDescriptorImages(true);\r\n    setAgreementAnswer(answer);\r\n  };\r\n  const handleNextCards = () => {\r\n    let updatedRankings = { ...rankings };\r\n    // Check if we should move onto the next stage or finish this round\r\n\r\n    const selectedTech = selectedCard.title;\r\n    const unselectedTech = unselectedCard.title;\r\n\r\n    // Update wins, losses, and opponents\r\n    updatedRankings[selectedTech].wins += 1;\r\n    updatedRankings[unselectedTech].losses += 1;\r\n    updatedRankings[selectedTech].opponents[unselectedTech] =\r\n      (updatedRankings[selectedTech].opponents[unselectedTech] || 0) + 1;\r\n    updatedRankings[unselectedTech].opponents[selectedTech] =\r\n      (updatedRankings[unselectedTech].opponents[selectedTech] || 0) - 1;\r\n\r\n    // Update the descriptors\r\n\r\n    setRankings(updatedRankings);\r\n    setSelectedDescriptors([]);\r\n    setSelectedCard(null);\r\n    setUnselectedCard(null);\r\n    setCurrentPairIndex(currentPairIndex + 1);\r\n    setDescriptorStage(\"firstDescriptors\"); // Reset the descriptor stage\r\n    setSelectionMade(false);\r\n    setSelectedIndex(null);\r\n    setAgreementAnswer(null);\r\n    setShowDescriptorImages(false);\r\n\r\n    // Now the effect that triggers game over will run if necessary\r\n  };\r\n\r\n  const handleSkip = () => {\r\n    let updatedRankings = { ...rankings };\r\n    const firstTech = shuffledTechnologies[currentPairIndex][0].title;\r\n    const secondTech = shuffledTechnologies[currentPairIndex][1].title;\r\n\r\n    // Update ties and opponents\r\n    updatedRankings[firstTech].ties += 1;\r\n    updatedRankings[secondTech].ties += 1;\r\n    updatedRankings[firstTech].opponents[secondTech] =\r\n      updatedRankings[firstTech].opponents[secondTech] || 0;\r\n    updatedRankings[secondTech].opponents[firstTech] =\r\n      updatedRankings[secondTech].opponents[firstTech] || 0;\r\n    setScoreIndex((scoreIndex) => scoreIndex + 1);\r\n\r\n    setRankings(updatedRankings);\r\n    setSelectedDescriptors([]);\r\n    setSelectedCard(null);\r\n    setUnselectedCard(null);\r\n    setCurrentPairIndex(currentPairIndex + 1);\r\n    setDescriptorStage(\"firstDescriptors\"); // Reset the descriptor stage\r\n    setSelectionMade(false);\r\n    setAgreementAnswer(null);\r\n  };\r\n  console.log(showDescriptorImages);\r\n  return (\r\n    <div className=\"pairwise-game\">\r\n      <div className=\"progress-bar\">\r\n        <div\r\n          className=\"progress-bar-inner\"\r\n          style={{ width: `${progress}%` }}\r\n        ></div>\r\n      </div>\r\n\r\n      {!gameOver && (\r\n        <>\r\n          <h2>\r\n            Which technology do you prefer to be used on you or your loved ones?\r\n            Facial recognition to ...\r\n          </h2>\r\n\r\n          <div className=\"technology-pair\">\r\n            {currentPairIndex < shuffledTechnologies.length && (\r\n              <>\r\n                {renderTechnologyCard(0)}\r\n\r\n                {renderTechnologyCard(1)}\r\n              </>\r\n            )}\r\n            {selectedCard ? null : (\r\n              <div className=\"descriptors\">\r\n                <Button text=\"Skip\" onClick={handleSkip} />\r\n              </div>\r\n            )}\r\n          </div>\r\n          {selectedCard && !agreementAnswer && (\r\n            <div className=\"agreement-question\">\r\n              <p>Do you think most people agree with you?</p>\r\n              <div className=\"button-container\">\r\n                <button onClick={() => handleAgreementAnswer(\"yes\")}>\r\n                  Yes\r\n                </button>\r\n                <button onClick={() => handleAgreementAnswer(\"no\")}>No</button>\r\n                <button onClick={() => handleAgreementAnswer(\"unsure\")}>\r\n                  Unsure\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {selectedCard && showDescriptorImages && (\r\n            <MoralDescriptors\r\n              moralDescriptors={moralDescriptors}\r\n              handleNextCards={handleNextCards}\r\n            />\r\n          )}\r\n\r\n          <ScoreBar score={score} />\r\n        </>\r\n      )}\r\n      {gameOver && <Rankings rankings={rankings} finishGame={finishGame} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PairwiseGame;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}