{"ast":null,"code":"import _defineProperty from\"C:/Users/lpana/OneDrive/Documents/gameIterations/scoreUpdate/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _objectSpread from\"C:/Users/lpana/OneDrive/Documents/gameIterations/scoreUpdate/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"C:/Users/lpana/OneDrive/Documents/gameIterations/scoreUpdate/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"C:/Users/lpana/OneDrive/Documents/gameIterations/scoreUpdate/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from\"react\";import TechnologyCard from\"./TechnologyCard\";import Rankings from\"./Rankings\";import ScoreBar from\"./ScoreBar\";import Comparisons from\"../data/comparisons.json\";import MoralDescriptors from\"./MoralDescriptors\";import Button from\"./Button\";import DemographicCollection from\"./DemographicCollection\";import\"./styles/PairwiseGame.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var moralDescriptors=[\"Authority\",\"Fair\",\"Harm\",\"Loyalty\",\"Purity\"];var PairwiseGame=function PairwiseGame(_ref){var technologies=_ref.technologies,pairwiseData=_ref.pairwiseData,finishGame=_ref.finishGame,skipDemographics=_ref.skipDemographics,demographics=_ref.demographics,setDemographics=_ref.setDemographics,setOutputData=_ref.setOutputData,userID=_ref.userID;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),shuffledTechnologies=_useState2[0],setShuffledTechnologies=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),currentPairIndex=_useState4[0],setCurrentPairIndex=_useState4[1];var _useState5=useState({}),_useState6=_slicedToArray(_useState5,2),rankings=_useState6[0],setRankings=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),selectedDescriptors=_useState8[0],setSelectedDescriptors=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),gameOver=_useState10[0],setGameOver=_useState10[1];var _useState11=useState(null),_useState12=_slicedToArray(_useState11,2),selectedCard=_useState12[0],setSelectedCard=_useState12[1];var _useState13=useState(null),_useState14=_slicedToArray(_useState13,2),unselectedCard=_useState14[0],setUnselectedCard=_useState14[1];var _useState15=useState(\"firstDescriptors\"),_useState16=_slicedToArray(_useState15,2),descriptorStage=_useState16[0],setDescriptorStage=_useState16[1];var _useState17=useState(0),_useState18=_slicedToArray(_useState17,2),progress=_useState18[0],setProgress=_useState18[1];var _useState19=useState(false),_useState20=_slicedToArray(_useState19,2),selectionMade=_useState20[0],setSelectionMade=_useState20[1];var _useState21=useState(0),_useState22=_slicedToArray(_useState21,2),selectedPercent=_useState22[0],setSelectedPercent=_useState22[1];var _useState23=useState(0),_useState24=_slicedToArray(_useState23,2),unselectedPercent=_useState24[0],setUnselectedPercent=_useState24[1];var _useState25=useState(null),_useState26=_slicedToArray(_useState25,2),firstClickTime=_useState26[0],setFirstClickTime=_useState26[1];var _useState27=useState([]),_useState28=_slicedToArray(_useState27,2),descriptorClickTimes=_useState28[0],setDescriptorClickTimes=_useState28[1];var _useState29=useState(0),_useState30=_slicedToArray(_useState29,2),score=_useState30[0],setScore=_useState30[1];var _useState31=useState(null),_useState32=_slicedToArray(_useState31,2),selectedIndex=_useState32[0],setSelectedIndex=_useState32[1];var _useState33=useState(0),_useState34=_slicedToArray(_useState33,2),scoreIndex=_useState34[0],setScoreIndex=_useState34[1];var _useState35=useState(null),_useState36=_slicedToArray(_useState35,2),agreementAnswer=_useState36[0],setAgreementAnswer=_useState36[1];var _useState37=useState(false),_useState38=_slicedToArray(_useState37,2),showDescriptorImages=_useState38[0],setShowDescriptorImages=_useState38[1];var _useState39=useState(null),_useState40=_slicedToArray(_useState39,2),agreementResult=_useState40[0],setAgreementResult=_useState40[1];var _useState41=useState(false),_useState42=_slicedToArray(_useState41,2),showAgreementResult=_useState42[0],setShowAgreementResult=_useState42[1];// Add these to your current list of useState calls\nvar _useState43=useState([]),_useState44=_slicedToArray(_useState43,2),cardMatchups=_useState44[0],setCardMatchups=_useState44[1];var _useState45=useState({}),_useState46=_slicedToArray(_useState45,2),moralChoices=_useState46[0],setMoralChoices=_useState46[1];var _useState47=useState(),_useState48=_slicedToArray(_useState47,2),sendToDemographicData=_useState48[0],setSendToDemographicData=_useState48[1];var _useState49=useState(null),_useState50=_slicedToArray(_useState49,2),riskAnswer=_useState50[0],setRiskAnswer=_useState50[1];var _useState51=useState({}),_useState52=_slicedToArray(_useState51,2),riskAnswerOuput=_useState52[0],setRiskAnswerOutput=_useState52[1];useEffect(function(){if(technologies.length>0){// Shuffle technologies array\nvar _shuffledTechnologies=_toConsumableArray(technologies);for(var i=_shuffledTechnologies.length-1;i>0;i--){var j=Math.floor(Math.random()*(i+1));var _ref2=[_shuffledTechnologies[j],_shuffledTechnologies[i]];_shuffledTechnologies[i]=_ref2[0];_shuffledTechnologies[j]=_ref2[1];}var tempShuffledTechnologies=[];for(var _i=0;_i<_shuffledTechnologies.length;_i++){var pair1=[_shuffledTechnologies[_i],_shuffledTechnologies[(_i-1+_shuffledTechnologies.length)%_shuffledTechnologies.length]];tempShuffledTechnologies.push(pair1);}// Shuffle tempShuffledTechnologies\nfor(var _i2=tempShuffledTechnologies.length-1;_i2>0;_i2--){var _j=Math.floor(Math.random()*(_i2+1));var _ref3=[tempShuffledTechnologies[_j],tempShuffledTechnologies[_i2]];tempShuffledTechnologies[_i2]=_ref3[0];tempShuffledTechnologies[_j]=_ref3[1];}setShuffledTechnologies(tempShuffledTechnologies);// Use the original technologies array for the initial rankings\nvar initialRankings={};technologies.forEach(function(tech){initialRankings[tech.title]={descriptors:[],wins:0,losses:0,ties:0,opponents:{}// Keep track of wins, losses, and ties against each opponent\n};});setRankings(initialRankings);}},[technologies]);useEffect(function(){if(currentPairIndex>=technologies.length){setSendToDemographicData({UserID:userID,// this should be fetched dynamically\ndemographics:demographics,risk:riskAnswerOuput,CardMatchups:cardMatchups,Moral:moralChoices});// Output the final JSON\nif(skipDemographics&&currentPairIndex>=shuffledTechnologies.length){var finalData={UserID:userID,// this should be fetched dynamically\ndemographics:demographics,risk:riskAnswerOuput,CardMatchups:cardMatchups,Moral:moralChoices};setOutputData(finalData);finishGame();// Call the finishGame function\n}setGameOver(true);}},[currentPairIndex,technologies.length,shuffledTechnologies.length,skipDemographics,finishGame]);useEffect(function(){calculateProgress();},[currentPairIndex]);var calculateProgress=function calculateProgress(){var totalPairs=Math.floor(technologies.length);var currentProgress=currentPairIndex/totalPairs*100;setProgress(currentProgress);};var handleChoice=function handleChoice(chosenIndex){// Adjustments to handle new shuffledTechnologies format\nsetDescriptorClickTimes([]);setFirstClickTime(Date.now());if(selectedCard!==null){return;// If a card is already selected, do nothing\n}var chosenCard=chosenIndex%2===0?0:1;setSelectedCard(shuffledTechnologies[currentPairIndex][chosenCard]);setSelectedIndex(chosenIndex);setUnselectedCard(shuffledTechnologies[currentPairIndex][(chosenCard+1)%2]);setSelectionMade(true);setAgreementAnswer(null);};var renderTechnologyCard=function renderTechnologyCard(){var tech1=shuffledTechnologies[currentPairIndex][0];var tech2=shuffledTechnologies[currentPairIndex][1];// Define default percents\nvar selectedPercent=50;var unselectedPercent=50;// The current pair from shuffledTechnologies\nvar selectedPercent1=50;var unselectedPercent1=50;var selectedPercent2=50;var unselectedPercent2=50;var currentPair=shuffledTechnologies[currentPairIndex].map(function(tech){return tech.ID;});for(var i=0;i<pairwiseData.data.length;i++){var pair=pairwiseData.data[i].pair;if(pair.sort().join(\",\")===currentPair.sort().join(\",\")){var percentages=pairwiseData.data[i].percentages;selectedPercent1=percentages[tech1.ID];unselectedPercent1=100-selectedPercent1;selectedPercent2=percentages[tech2.ID];unselectedPercent2=100-selectedPercent2;break;}}return/*#__PURE__*/_jsx(TechnologyCard,{tech1:tech1,tech2:tech2,handleChoice:handleChoice,percent1:{selectedCard:selectedPercent1,unselectedCard:unselectedPercent1},percent2:{selectedCard:selectedPercent2,unselectedCard:unselectedPercent2},selectionMade:selectionMade,agreementAnswer:agreementAnswer,isClicked1:0===selectedIndex,isClicked2:1===selectedIndex},\"\".concat(tech1.title,\"-\").concat(tech2.title));};var handleRiskAnswer=function handleRiskAnswer(answer){setRiskAnswerOutput(function(prevAnswers){var updatedAnswers=_objectSpread(_objectSpread({},prevAnswers),{},_defineProperty({},selectedCard.ID,answer));return updatedAnswers;});setRiskAnswer(null);};var handleAgreementAnswer=function handleAgreementAnswer(answer){var AgreementResult;var selectedPercent,unselectedPercent;// search the pairwiseData\nfor(var i=0;i<pairwiseData.data.length;i++){var pair=pairwiseData.data[i].pair;// if we found the right pair\nif(pair.includes(selectedCard.ID)&&pair.includes(unselectedCard.ID)){var percentages=pairwiseData.data[i].percentages;if(selectedCard.ID===\"unsure\"||answer===\"unsure\"){AgreementResult=null;}else if(percentages[selectedCard.ID]===50||percentages[selectedCard.ID]>50&&answer===\"yes\"||percentages[selectedCard.ID]<50&&answer===\"no\"){AgreementResult=\"correct\";}else{AgreementResult=\"incorrect\";}// get the percentages from the data\nselectedPercent=percentages[selectedCard.ID];unselectedPercent=percentages[unselectedCard.ID];break;}}// If AgreementResult is undefined, then there was no match found\nif(AgreementResult===undefined){throw new Error(\"No match found for selected card in pairwise data.\");}if(AgreementResult===\"correct\"){setAgreementResult(\"Correct\");setScore(function(prevScore){return prevScore+10;});}else{setAgreementResult(\"Incorrect\");// setScore remains unchanged\n}// set the percentages to the actual percentages from the data\nsetSelectedPercent(selectedPercent);setUnselectedPercent(unselectedPercent);setRiskAnswer(\"show\");setCardMatchups([].concat(_toConsumableArray(cardMatchups),[{Card1:shuffledTechnologies[currentPairIndex][0].ID,Card2:shuffledTechnologies[currentPairIndex][1].ID,Answer:selectedCard.ID,Majority:answer}]));setShowAgreementResult(true);// Initially set showAgreementResult to true\nsetTimeout(function(){setShowAgreementResult(false);// After a second, set showAgreementResult back to false\n},2000);setShowDescriptorImages(true);setAgreementAnswer(answer);};var handleNextCards=function handleNextCards(){var updatedRankings=_objectSpread({},rankings);// Check if we should move onto the next stage or finish this round\nvar selectedTech=selectedCard.title;var unselectedTech=unselectedCard.title;// Update wins, losses, and opponents\nupdatedRankings[selectedTech].wins+=1;updatedRankings[unselectedTech].losses+=1;updatedRankings[selectedTech].opponents[unselectedTech]=(updatedRankings[selectedTech].opponents[unselectedTech]||0)+1;updatedRankings[unselectedTech].opponents[selectedTech]=(updatedRankings[unselectedTech].opponents[selectedTech]||0)-1;// Update the descriptors\nsetRankings(updatedRankings);setSelectedDescriptors([]);setSelectedCard(null);setUnselectedCard(null);setCurrentPairIndex(currentPairIndex+1);setSelectionMade(false);setSelectedIndex(null);setAgreementAnswer(null);setShowDescriptorImages(false);setRiskAnswer(null);// Now the effect that triggers game over will run if necessary\n};var handleSkip=function handleSkip(){var updatedRankings=_objectSpread({},rankings);var firstTech=shuffledTechnologies[currentPairIndex][0].title;var secondTech=shuffledTechnologies[currentPairIndex][1].title;setCardMatchups([].concat(_toConsumableArray(cardMatchups),[{Card1:shuffledTechnologies[currentPairIndex][0].ID,Card2:shuffledTechnologies[currentPairIndex][1].ID,Answer:\"Skip\",Majority:\"Skip\"}]));// Update ties and opponents\nupdatedRankings[firstTech].ties+=1;updatedRankings[secondTech].ties+=1;updatedRankings[firstTech].opponents[secondTech]=updatedRankings[firstTech].opponents[secondTech]||0;updatedRankings[secondTech].opponents[firstTech]=updatedRankings[secondTech].opponents[firstTech]||0;setScoreIndex(function(scoreIndex){return scoreIndex+1;});setRankings(updatedRankings);setSelectedDescriptors([]);setSelectedCard(null);setUnselectedCard(null);setCurrentPairIndex(currentPairIndex+1);setDescriptorStage(\"firstDescriptors\");// Reset the descriptor stage\nsetSelectionMade(false);setAgreementAnswer(null);};return/*#__PURE__*/_jsxs(\"div\",{className:\"pairwise-game\",children:[!gameOver&&/*#__PURE__*/_jsx(\"div\",{className:\"progress-bar\",children:/*#__PURE__*/_jsx(\"div\",{className:\"progress-bar-inner\",style:{width:\"\".concat(progress,\"%\")}})}),!gameOver&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Which technology worries you more?\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"bottomHalf\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"technology-pair\",children:[currentPairIndex<shuffledTechnologies.length&&/*#__PURE__*/_jsx(_Fragment,{children:renderTechnologyCard()}),selectedCard?null:/*#__PURE__*/_jsx(\"div\",{className:\"descriptors\",children:/*#__PURE__*/_jsx(Button,{text:\"Skip\",onClick:handleSkip})})]}),selectedCard&&showDescriptorImages&&!showAgreementResult&&riskAnswer&&/*#__PURE__*/_jsxs(\"div\",{className:\"agreement-question\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"How would you classify this technology?\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"button-container\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return handleRiskAnswer(\"Low\");},children:\"Low Risk\"}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return handleRiskAnswer(\"High\");},children:\"High Risk\"}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return handleRiskAnswer(\"Unacceptable\");},children:\"Unacceptable Risk\"}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return handleRiskAnswer(\"Unsure\");},children:\"Unsure\"})]})]}),selectedCard&&!riskAnswer&&!agreementAnswer&&/*#__PURE__*/_jsxs(\"div\",{className:\"agreement-question\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Do most people agree with you?\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"button-container\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return handleAgreementAnswer(\"yes\");},children:\"Yes\"}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return handleAgreementAnswer(\"no\");},children:\"No\"}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return handleAgreementAnswer(\"unsure\");},children:\"Unsure\"})]})]}),selectedCard&&agreementAnswer&&showAgreementResult&&/*#__PURE__*/_jsxs(\"div\",{className:\"agreement-question\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Do most people agree with you?\"}),/*#__PURE__*/_jsx(\"div\",{className:\"button-container\",children:/*#__PURE__*/_jsx(\"p\",{className:agreementResult===\"Correct\"?\"correct\":\"incorrect\",children:agreementResult})})]}),selectedCard&&showDescriptorImages&&!showAgreementResult&&!riskAnswer&&/*#__PURE__*/_jsx(MoralDescriptors,{moralDescriptors:moralDescriptors,handleNextCards:handleNextCards,setMoralChoices:setMoralChoices,selectedCard:selectedCard}),/*#__PURE__*/_jsx(ScoreBar,{score:score,currentPairIndex:currentPairIndex})]})]}),gameOver&&!skipDemographics&&/*#__PURE__*/_jsx(DemographicCollection,{finishGame:finishGame,setDemographics:setDemographics,sendToDemographicData:sendToDemographicData,setOutputData:setOutputData})]});};export default PairwiseGame;","map":{"version":3,"names":["React","useState","useEffect","TechnologyCard","Rankings","ScoreBar","Comparisons","MoralDescriptors","Button","DemographicCollection","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","moralDescriptors","PairwiseGame","_ref","technologies","pairwiseData","finishGame","skipDemographics","demographics","setDemographics","setOutputData","userID","_useState","_useState2","_slicedToArray","shuffledTechnologies","setShuffledTechnologies","_useState3","_useState4","currentPairIndex","setCurrentPairIndex","_useState5","_useState6","rankings","setRankings","_useState7","_useState8","selectedDescriptors","setSelectedDescriptors","_useState9","_useState10","gameOver","setGameOver","_useState11","_useState12","selectedCard","setSelectedCard","_useState13","_useState14","unselectedCard","setUnselectedCard","_useState15","_useState16","descriptorStage","setDescriptorStage","_useState17","_useState18","progress","setProgress","_useState19","_useState20","selectionMade","setSelectionMade","_useState21","_useState22","selectedPercent","setSelectedPercent","_useState23","_useState24","unselectedPercent","setUnselectedPercent","_useState25","_useState26","firstClickTime","setFirstClickTime","_useState27","_useState28","descriptorClickTimes","setDescriptorClickTimes","_useState29","_useState30","score","setScore","_useState31","_useState32","selectedIndex","setSelectedIndex","_useState33","_useState34","scoreIndex","setScoreIndex","_useState35","_useState36","agreementAnswer","setAgreementAnswer","_useState37","_useState38","showDescriptorImages","setShowDescriptorImages","_useState39","_useState40","agreementResult","setAgreementResult","_useState41","_useState42","showAgreementResult","setShowAgreementResult","_useState43","_useState44","cardMatchups","setCardMatchups","_useState45","_useState46","moralChoices","setMoralChoices","_useState47","_useState48","sendToDemographicData","setSendToDemographicData","_useState49","_useState50","riskAnswer","setRiskAnswer","_useState51","_useState52","riskAnswerOuput","setRiskAnswerOutput","length","_toConsumableArray","i","j","Math","floor","random","_ref2","tempShuffledTechnologies","pair1","push","_ref3","initialRankings","forEach","tech","title","descriptors","wins","losses","ties","opponents","UserID","risk","CardMatchups","Moral","finalData","calculateProgress","totalPairs","currentProgress","handleChoice","chosenIndex","Date","now","chosenCard","renderTechnologyCard","tech1","tech2","selectedPercent1","unselectedPercent1","selectedPercent2","unselectedPercent2","currentPair","map","ID","data","pair","sort","join","percentages","percent1","percent2","isClicked1","isClicked2","concat","handleRiskAnswer","answer","prevAnswers","updatedAnswers","_objectSpread","_defineProperty","handleAgreementAnswer","AgreementResult","includes","undefined","Error","prevScore","Card1","Card2","Answer","Majority","setTimeout","handleNextCards","updatedRankings","selectedTech","unselectedTech","handleSkip","firstTech","secondTech","className","children","style","width","text","onClick"],"sources":["C:/Users/lpana/OneDrive/Documents/gameIterations/scoreUpdate/src/components/PairwiseGame.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport TechnologyCard from \"./TechnologyCard\";\r\nimport Rankings from \"./Rankings\";\r\nimport ScoreBar from \"./ScoreBar\";\r\nimport Comparisons from \"../data/comparisons.json\";\r\n\r\nimport MoralDescriptors from \"./MoralDescriptors\";\r\nimport Button from \"./Button\";\r\nimport DemographicCollection from \"./DemographicCollection\";\r\nimport \"./styles/PairwiseGame.css\";\r\n\r\nconst moralDescriptors = [\"Authority\", \"Fair\", \"Harm\", \"Loyalty\", \"Purity\"];\r\n\r\nconst PairwiseGame = ({\r\n  technologies,\r\n  pairwiseData,\r\n  finishGame,\r\n  skipDemographics,\r\n  demographics,\r\n  setDemographics,\r\n  setOutputData,\r\n  userID,\r\n}) => {\r\n  const [shuffledTechnologies, setShuffledTechnologies] = useState([]);\r\n\r\n  const [currentPairIndex, setCurrentPairIndex] = useState(0);\r\n  const [rankings, setRankings] = useState({});\r\n  const [selectedDescriptors, setSelectedDescriptors] = useState([]);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [selectedCard, setSelectedCard] = useState(null);\r\n  const [unselectedCard, setUnselectedCard] = useState(null);\r\n  const [descriptorStage, setDescriptorStage] = useState(\"firstDescriptors\");\r\n  const [progress, setProgress] = useState(0);\r\n  const [selectionMade, setSelectionMade] = useState(false);\r\n  const [selectedPercent, setSelectedPercent] = useState(0);\r\n  const [unselectedPercent, setUnselectedPercent] = useState(0);\r\n  const [firstClickTime, setFirstClickTime] = useState(null);\r\n  const [descriptorClickTimes, setDescriptorClickTimes] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n  const [selectedIndex, setSelectedIndex] = useState(null);\r\n  const [scoreIndex, setScoreIndex] = useState(0);\r\n  const [agreementAnswer, setAgreementAnswer] = useState(null);\r\n  const [showDescriptorImages, setShowDescriptorImages] = useState(false);\r\n  const [agreementResult, setAgreementResult] = useState(null);\r\n  const [showAgreementResult, setShowAgreementResult] = useState(false);\r\n  // Add these to your current list of useState calls\r\n  const [cardMatchups, setCardMatchups] = useState([]);\r\n  const [moralChoices, setMoralChoices] = useState({});\r\n  const [sendToDemographicData, setSendToDemographicData] = useState();\r\n  const [riskAnswer, setRiskAnswer] = useState(null);\r\n  const [riskAnswerOuput, setRiskAnswerOutput] = useState({});\r\n\r\n  useEffect(() => {\r\n    if (technologies.length > 0) {\r\n      // Shuffle technologies array\r\n      let shuffledTechnologies = [...technologies];\r\n\r\n      for (let i = shuffledTechnologies.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n        [shuffledTechnologies[i], shuffledTechnologies[j]] = [\r\n          shuffledTechnologies[j],\r\n          shuffledTechnologies[i],\r\n        ];\r\n      }\r\n\r\n      let tempShuffledTechnologies = [];\r\n      for (let i = 0; i < shuffledTechnologies.length; i++) {\r\n        let pair1 = [\r\n          shuffledTechnologies[i],\r\n          shuffledTechnologies[\r\n            (i - 1 + shuffledTechnologies.length) % shuffledTechnologies.length\r\n          ],\r\n        ];\r\n        tempShuffledTechnologies.push(pair1);\r\n      }\r\n\r\n      // Shuffle tempShuffledTechnologies\r\n      for (let i = tempShuffledTechnologies.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n        [tempShuffledTechnologies[i], tempShuffledTechnologies[j]] = [\r\n          tempShuffledTechnologies[j],\r\n          tempShuffledTechnologies[i],\r\n        ];\r\n      }\r\n\r\n      setShuffledTechnologies(tempShuffledTechnologies);\r\n\r\n      // Use the original technologies array for the initial rankings\r\n      let initialRankings = {};\r\n      technologies.forEach((tech) => {\r\n        initialRankings[tech.title] = {\r\n          descriptors: [],\r\n          wins: 0,\r\n          losses: 0,\r\n          ties: 0,\r\n          opponents: {}, // Keep track of wins, losses, and ties against each opponent\r\n        };\r\n      });\r\n      setRankings(initialRankings);\r\n    }\r\n  }, [technologies]);\r\n\r\n  useEffect(() => {\r\n    if (currentPairIndex >= technologies.length) {\r\n      setSendToDemographicData({\r\n        UserID: userID, // this should be fetched dynamically\r\n        demographics: demographics,\r\n        risk: riskAnswerOuput,\r\n\r\n        CardMatchups: cardMatchups,\r\n        Moral: moralChoices,\r\n      });\r\n\r\n      // Output the final JSON\r\n      if (skipDemographics && currentPairIndex >= shuffledTechnologies.length) {\r\n        const finalData = {\r\n          UserID: userID, // this should be fetched dynamically\r\n          demographics: demographics,\r\n          risk: riskAnswerOuput,\r\n          CardMatchups: cardMatchups,\r\n          Moral: moralChoices,\r\n        };\r\n\r\n        setOutputData(finalData);\r\n        finishGame(); // Call the finishGame function\r\n      }\r\n      setGameOver(true);\r\n    }\r\n  }, [\r\n    currentPairIndex,\r\n    technologies.length,\r\n    shuffledTechnologies.length,\r\n    skipDemographics,\r\n    finishGame,\r\n  ]);\r\n  useEffect(() => {\r\n    calculateProgress();\r\n  }, [currentPairIndex]);\r\n\r\n  const calculateProgress = () => {\r\n    const totalPairs = Math.floor(technologies.length);\r\n    const currentProgress = (currentPairIndex / totalPairs) * 100;\r\n    setProgress(currentProgress);\r\n  };\r\n\r\n  const handleChoice = (chosenIndex) => {\r\n    // Adjustments to handle new shuffledTechnologies format\r\n    setDescriptorClickTimes([]);\r\n    setFirstClickTime(Date.now());\r\n\r\n    if (selectedCard !== null) {\r\n      return; // If a card is already selected, do nothing\r\n    }\r\n\r\n    const chosenCard = chosenIndex % 2 === 0 ? 0 : 1;\r\n\r\n    setSelectedCard(shuffledTechnologies[currentPairIndex][chosenCard]);\r\n\r\n    setSelectedIndex(chosenIndex);\r\n\r\n    setUnselectedCard(\r\n      shuffledTechnologies[currentPairIndex][(chosenCard + 1) % 2]\r\n    );\r\n\r\n    setSelectionMade(true);\r\n    setAgreementAnswer(null);\r\n  };\r\n\r\n  const renderTechnologyCard = () => {\r\n    const tech1 = shuffledTechnologies[currentPairIndex][0];\r\n    const tech2 = shuffledTechnologies[currentPairIndex][1];\r\n    // Define default percents\r\n    let selectedPercent = 50;\r\n    let unselectedPercent = 50;\r\n\r\n    // The current pair from shuffledTechnologies\r\n    let selectedPercent1 = 50;\r\n    let unselectedPercent1 = 50;\r\n\r\n    let selectedPercent2 = 50;\r\n    let unselectedPercent2 = 50;\r\n\r\n    const currentPair = shuffledTechnologies[currentPairIndex].map(\r\n      (tech) => tech.ID\r\n    );\r\n\r\n    for (let i = 0; i < pairwiseData.data.length; i++) {\r\n      const pair = pairwiseData.data[i].pair;\r\n\r\n      if (pair.sort().join(\",\") === currentPair.sort().join(\",\")) {\r\n        const percentages = pairwiseData.data[i].percentages;\r\n\r\n        selectedPercent1 = percentages[tech1.ID];\r\n        unselectedPercent1 = 100 - selectedPercent1;\r\n\r\n        selectedPercent2 = percentages[tech2.ID];\r\n        unselectedPercent2 = 100 - selectedPercent2;\r\n\r\n        break;\r\n      }\r\n    }\r\n\r\n    return (\r\n      <TechnologyCard\r\n        key={`${tech1.title}-${tech2.title}`}\r\n        tech1={tech1}\r\n        tech2={tech2}\r\n        handleChoice={handleChoice}\r\n        percent1={{\r\n          selectedCard: selectedPercent1,\r\n          unselectedCard: unselectedPercent1,\r\n        }}\r\n        percent2={{\r\n          selectedCard: selectedPercent2,\r\n          unselectedCard: unselectedPercent2,\r\n        }}\r\n        selectionMade={selectionMade}\r\n        agreementAnswer={agreementAnswer}\r\n        isClicked1={0 === selectedIndex}\r\n        isClicked2={1 === selectedIndex}\r\n      />\r\n    );\r\n  };\r\n\r\n  const handleRiskAnswer = (answer) => {\r\n    setRiskAnswerOutput((prevAnswers) => {\r\n      const updatedAnswers = { ...prevAnswers, [selectedCard.ID]: answer };\r\n      return updatedAnswers;\r\n    });\r\n    setRiskAnswer(null);\r\n  };\r\n\r\n  const handleAgreementAnswer = (answer) => {\r\n    let AgreementResult;\r\n    let selectedPercent, unselectedPercent;\r\n\r\n    // search the pairwiseData\r\n    for (let i = 0; i < pairwiseData.data.length; i++) {\r\n      let pair = pairwiseData.data[i].pair;\r\n\r\n      // if we found the right pair\r\n      if (pair.includes(selectedCard.ID) && pair.includes(unselectedCard.ID)) {\r\n        let percentages = pairwiseData.data[i].percentages;\r\n\r\n        if (selectedCard.ID === \"unsure\" || answer === \"unsure\") {\r\n          AgreementResult = null;\r\n        } else if (\r\n          percentages[selectedCard.ID] === 50 ||\r\n          (percentages[selectedCard.ID] > 50 && answer === \"yes\") ||\r\n          (percentages[selectedCard.ID] < 50 && answer === \"no\")\r\n        ) {\r\n          AgreementResult = \"correct\";\r\n        } else {\r\n          AgreementResult = \"incorrect\";\r\n        }\r\n\r\n        // get the percentages from the data\r\n        selectedPercent = percentages[selectedCard.ID];\r\n        unselectedPercent = percentages[unselectedCard.ID];\r\n\r\n        break;\r\n      }\r\n    }\r\n\r\n    // If AgreementResult is undefined, then there was no match found\r\n    if (AgreementResult === undefined) {\r\n      throw new Error(\"No match found for selected card in pairwise data.\");\r\n    }\r\n\r\n    if (AgreementResult === \"correct\") {\r\n      setAgreementResult(\"Correct\");\r\n      setScore((prevScore) => prevScore + 10);\r\n    } else {\r\n      setAgreementResult(\"Incorrect\");\r\n      // setScore remains unchanged\r\n    }\r\n\r\n    // set the percentages to the actual percentages from the data\r\n    setSelectedPercent(selectedPercent);\r\n    setUnselectedPercent(unselectedPercent);\r\n\r\n    setRiskAnswer(\"show\");\r\n\r\n    setCardMatchups([\r\n      ...cardMatchups,\r\n      {\r\n        Card1: shuffledTechnologies[currentPairIndex][0].ID,\r\n        Card2: shuffledTechnologies[currentPairIndex][1].ID,\r\n        Answer: selectedCard.ID,\r\n        Majority: answer,\r\n      },\r\n    ]);\r\n\r\n    setShowAgreementResult(true); // Initially set showAgreementResult to true\r\n    setTimeout(() => {\r\n      setShowAgreementResult(false); // After a second, set showAgreementResult back to false\r\n    }, 2000);\r\n\r\n    setShowDescriptorImages(true);\r\n    setAgreementAnswer(answer);\r\n  };\r\n\r\n  const handleNextCards = () => {\r\n    let updatedRankings = { ...rankings };\r\n    // Check if we should move onto the next stage or finish this round\r\n\r\n    const selectedTech = selectedCard.title;\r\n    const unselectedTech = unselectedCard.title;\r\n\r\n    // Update wins, losses, and opponents\r\n    updatedRankings[selectedTech].wins += 1;\r\n    updatedRankings[unselectedTech].losses += 1;\r\n    updatedRankings[selectedTech].opponents[unselectedTech] =\r\n      (updatedRankings[selectedTech].opponents[unselectedTech] || 0) + 1;\r\n    updatedRankings[unselectedTech].opponents[selectedTech] =\r\n      (updatedRankings[unselectedTech].opponents[selectedTech] || 0) - 1;\r\n\r\n    // Update the descriptors\r\n    setRankings(updatedRankings);\r\n    setSelectedDescriptors([]);\r\n    setSelectedCard(null);\r\n    setUnselectedCard(null);\r\n    setCurrentPairIndex(currentPairIndex + 1);\r\n    setSelectionMade(false);\r\n    setSelectedIndex(null);\r\n    setAgreementAnswer(null);\r\n    setShowDescriptorImages(false);\r\n    setRiskAnswer(null);\r\n\r\n    // Now the effect that triggers game over will run if necessary\r\n  };\r\n\r\n  const handleSkip = () => {\r\n    let updatedRankings = { ...rankings };\r\n    const firstTech = shuffledTechnologies[currentPairIndex][0].title;\r\n    const secondTech = shuffledTechnologies[currentPairIndex][1].title;\r\n\r\n    setCardMatchups([\r\n      ...cardMatchups,\r\n      {\r\n        Card1: shuffledTechnologies[currentPairIndex][0].ID,\r\n        Card2: shuffledTechnologies[currentPairIndex][1].ID,\r\n        Answer: \"Skip\",\r\n        Majority: \"Skip\",\r\n      },\r\n    ]);\r\n\r\n    // Update ties and opponents\r\n    updatedRankings[firstTech].ties += 1;\r\n    updatedRankings[secondTech].ties += 1;\r\n    updatedRankings[firstTech].opponents[secondTech] =\r\n      updatedRankings[firstTech].opponents[secondTech] || 0;\r\n    updatedRankings[secondTech].opponents[firstTech] =\r\n      updatedRankings[secondTech].opponents[firstTech] || 0;\r\n\r\n    setScoreIndex((scoreIndex) => scoreIndex + 1);\r\n    setRankings(updatedRankings);\r\n    setSelectedDescriptors([]);\r\n    setSelectedCard(null);\r\n    setUnselectedCard(null);\r\n    setCurrentPairIndex(currentPairIndex + 1);\r\n    setDescriptorStage(\"firstDescriptors\"); // Reset the descriptor stage\r\n    setSelectionMade(false);\r\n    setAgreementAnswer(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"pairwise-game\">\r\n      {!gameOver && (\r\n        <div className=\"progress-bar\">\r\n          <div\r\n            className=\"progress-bar-inner\"\r\n            style={{ width: `${progress}%` }}\r\n          ></div>\r\n        </div>\r\n      )}\r\n\r\n      {!gameOver && (\r\n        <>\r\n          <h2>Which technology worries you more?</h2>\r\n          <div className=\"bottomHalf\">\r\n            <div className=\"technology-pair\">\r\n              {currentPairIndex < shuffledTechnologies.length && (\r\n                <>{renderTechnologyCard()}</>\r\n              )}\r\n              {selectedCard ? null : (\r\n                <div className=\"descriptors\">\r\n                  <Button text=\"Skip\" onClick={handleSkip} />\r\n                </div>\r\n              )}\r\n            </div>\r\n            {selectedCard &&\r\n              showDescriptorImages &&\r\n              !showAgreementResult &&\r\n              riskAnswer && (\r\n                <div className=\"agreement-question\">\r\n                  <h3>How would you classify this technology?</h3>\r\n\r\n                  <div className=\"button-container\">\r\n                    <button onClick={() => handleRiskAnswer(\"Low\")}>\r\n                      Low Risk\r\n                    </button>\r\n                    <button onClick={() => handleRiskAnswer(\"High\")}>\r\n                      High Risk\r\n                    </button>\r\n                    <button onClick={() => handleRiskAnswer(\"Unacceptable\")}>\r\n                      Unacceptable Risk\r\n                    </button>\r\n                    <button onClick={() => handleRiskAnswer(\"Unsure\")}>\r\n                      Unsure\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n            {selectedCard && !riskAnswer && !agreementAnswer && (\r\n              <div className=\"agreement-question\">\r\n                <h3>Do most people agree with you?</h3>\r\n\r\n                <div className=\"button-container\">\r\n                  <button onClick={() => handleAgreementAnswer(\"yes\")}>\r\n                    Yes\r\n                  </button>\r\n                  <button onClick={() => handleAgreementAnswer(\"no\")}>\r\n                    No\r\n                  </button>\r\n                  <button onClick={() => handleAgreementAnswer(\"unsure\")}>\r\n                    Unsure\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n            {selectedCard && agreementAnswer && showAgreementResult && (\r\n              <div className=\"agreement-question\">\r\n                <h3>Do most people agree with you?</h3>\r\n\r\n                <div className=\"button-container\">\r\n                  <p\r\n                    className={\r\n                      agreementResult === \"Correct\" ? \"correct\" : \"incorrect\"\r\n                    }\r\n                  >\r\n                    {agreementResult}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            )}\r\n            {selectedCard &&\r\n              showDescriptorImages &&\r\n              !showAgreementResult &&\r\n              !riskAnswer && (\r\n                <MoralDescriptors\r\n                  moralDescriptors={moralDescriptors}\r\n                  handleNextCards={handleNextCards}\r\n                  setMoralChoices={setMoralChoices}\r\n                  selectedCard={selectedCard}\r\n                />\r\n              )}\r\n            <ScoreBar score={score} currentPairIndex={currentPairIndex} />\r\n          </div>\r\n        </>\r\n      )}\r\n      {gameOver && !skipDemographics && (\r\n        <DemographicCollection\r\n          finishGame={finishGame}\r\n          setDemographics={setDemographics}\r\n          sendToDemographicData={sendToDemographicData}\r\n          setOutputData={setOutputData}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default PairwiseGame;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}