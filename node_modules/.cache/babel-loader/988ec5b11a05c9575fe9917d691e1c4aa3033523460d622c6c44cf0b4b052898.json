{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lpana\\\\OneDrive\\\\Documents\\\\gameIterations\\\\scoreUpdate\\\\src\\\\components\\\\Rankings.js\";\nimport React from \"react\";\nimport Button from \"./Button\";\nimport \"./styles/Rankings.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Rankings = _ref => {\n  let {\n    rankings,\n    finishGame\n  } = _ref;\n  let qScores = {};\n  for (let tech in rankings) {\n    let w = rankings[tech].wins;\n    let l = rankings[tech].losses;\n    let t = rankings[tech].ties;\n    let total = w + l + t;\n\n    // If the technology hasn't been compared with any other, assign Q-score as 0\n    if (total === 0) {\n      qScores[tech] = 0;\n      continue;\n    }\n    let W = w / total;\n    let L = l / total;\n\n    // Calculate opponent Q-scores\n    let opponentW = 0;\n    let opponentL = 0;\n    let opponentCount = 0;\n    for (let opponent in rankings[tech].opponents) {\n      let oppStats = rankings[opponent];\n      let oppTotal = oppStats.wins + oppStats.losses + oppStats.ties;\n      if (oppTotal !== 0) {\n        let relationship = rankings[tech].opponents[opponent];\n        if (relationship > 0) {\n          // current tech has won against opponent\n          opponentW += oppStats.wins / oppTotal;\n        } else if (relationship < 0) {\n          // current tech has lost against opponent\n          opponentL += oppStats.losses / oppTotal;\n        }\n        opponentCount++;\n      }\n    }\n\n    // If the technology has opponents, average the Q-scores\n    if (opponentCount !== 0) {\n      opponentW /= opponentCount;\n      opponentL /= opponentCount;\n    }\n\n    // Calculate Q-score\n    let qScore = 10 / 3 * (W + opponentW - L - opponentL + 1);\n    qScores[tech] = qScore;\n  }\n  const sortedRankings = Object.keys(qScores).sort((a, b) => qScores[b] - qScores[a]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"rankings\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Ranking\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Most Acceptable\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      children: sortedRankings.map((tech, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: tech\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Least Acceptable\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      text: \"Finish Game\",\n      onClick: finishGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_c = Rankings;\nexport default Rankings;\nvar _c;\n$RefreshReg$(_c, \"Rankings\");","map":{"version":3,"names":["React","Button","jsxDEV","_jsxDEV","Rankings","_ref","rankings","finishGame","qScores","tech","w","wins","l","losses","t","ties","total","W","L","opponentW","opponentL","opponentCount","opponent","opponents","oppStats","oppTotal","relationship","qScore","sortedRankings","Object","keys","sort","a","b","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","idx","text","onClick","_c","$RefreshReg$"],"sources":["C:/Users/lpana/OneDrive/Documents/gameIterations/scoreUpdate/src/components/Rankings.js"],"sourcesContent":["import React from \"react\";\r\nimport Button from \"./Button\";\r\nimport \"./styles/Rankings.css\";\r\n\r\nconst Rankings = ({ rankings, finishGame }) => {\r\n  let qScores = {};\r\n\r\n  for (let tech in rankings) {\r\n    let w = rankings[tech].wins;\r\n    let l = rankings[tech].losses;\r\n    let t = rankings[tech].ties;\r\n    let total = w + l + t;\r\n\r\n    // If the technology hasn't been compared with any other, assign Q-score as 0\r\n    if (total === 0) {\r\n      qScores[tech] = 0;\r\n      continue;\r\n    }\r\n\r\n    let W = w / total;\r\n    let L = l / total;\r\n\r\n    // Calculate opponent Q-scores\r\n    let opponentW = 0;\r\n    let opponentL = 0;\r\n    let opponentCount = 0;\r\n\r\n    for (let opponent in rankings[tech].opponents) {\r\n      let oppStats = rankings[opponent];\r\n      let oppTotal = oppStats.wins + oppStats.losses + oppStats.ties;\r\n\r\n      if (oppTotal !== 0) {\r\n        let relationship = rankings[tech].opponents[opponent];\r\n\r\n        if (relationship > 0) {\r\n          // current tech has won against opponent\r\n          opponentW += oppStats.wins / oppTotal;\r\n        } else if (relationship < 0) {\r\n          // current tech has lost against opponent\r\n          opponentL += oppStats.losses / oppTotal;\r\n        }\r\n\r\n        opponentCount++;\r\n      }\r\n    }\r\n\r\n    // If the technology has opponents, average the Q-scores\r\n    if (opponentCount !== 0) {\r\n      opponentW /= opponentCount;\r\n      opponentL /= opponentCount;\r\n    }\r\n\r\n    // Calculate Q-score\r\n    let qScore = (10 / 3) * (W + opponentW - L - opponentL + 1);\r\n\r\n    qScores[tech] = qScore;\r\n  }\r\n\r\n  const sortedRankings = Object.keys(qScores).sort(\r\n    (a, b) => qScores[b] - qScores[a]\r\n  );\r\n\r\n  return (\r\n    <div className=\"rankings\">\r\n      <h1>Ranking</h1>\r\n      <h4>Most Acceptable</h4>\r\n      <ol>\r\n        {sortedRankings.map((tech, idx) => (\r\n          <li key={idx}>{tech}</li>\r\n        ))}\r\n      </ol>\r\n      <h4>Least Acceptable</h4>\r\n      <Button text=\"Finish Game\" onClick={finishGame} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Rankings;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}