{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lpana\\\\OneDrive\\\\Documents\\\\gameIterations\\\\scoreUpdate\\\\src\\\\components\\\\TwoScoreLine.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = {\n  0: {\n    low_score: 0,\n    average_score: 0,\n    high_score: 49\n  },\n  1: {\n    low_score: 0,\n    average_score: 19,\n    high_score: 49\n  },\n  2: {\n    low_score: 0,\n    average_score: 38,\n    high_score: 98\n  },\n  3: {\n    low_score: 0,\n    average_score: 55,\n    high_score: 147\n  },\n  4: {\n    low_score: 0,\n    average_score: 70,\n    high_score: 179\n  },\n  5: {\n    low_score: 0,\n    average_score: 85,\n    high_score: 228\n  },\n  6: {\n    low_score: 0,\n    average_score: 102,\n    high_score: 272\n  }\n};\nconst maxHighScore = 102; // Game finishes when the score reaches 102\n\nfunction TwoScoreLine(_ref) {\n  _s();\n  let {\n    userScore,\n    stage,\n    onFinish\n  } = _ref;\n  const ref = useRef();\n  const [finishedGame, setFinishedGame] = useState(false);\n  const [previousScore, setPreviousScore] = useState(userScore);\n  const [scoreChangeMsg, setScoreChangeMsg] = useState(null); // New state variable\n\n  useEffect(() => {\n    if (userScore !== previousScore) {\n      const diff = userScore - previousScore;\n      setScoreChangeMsg(`You agree with ${100 - diff}%. Your score increased by 100 - ${100 - diff} = ${diff}`);\n      setPreviousScore(userScore);\n    }\n  }, [userScore]);\n  useEffect(() => {\n    const svg = d3.select(ref.current);\n    const svgWidth = +svg.node().getBoundingClientRect().width;\n    const xScale = d3.scaleLinear().domain([0, maxHighScore]).range([0, svgWidth]);\n    const score = data[stage];\n\n    // Background lines and labels\n    const lineInfo = [{\n      y: 100,\n      class: \"user\",\n      color: \"green\",\n      label: \"You\",\n      score: userScore\n    }, {\n      y: 170,\n      class: \"avg\",\n      color: \"black\",\n      label: \"Others\",\n      score: score.average_score\n    }];\n    lineInfo.forEach(line => {\n      if (svg.select(`.${line.class}-bg-line`).empty()) {\n        // Background line\n        svg.append(\"line\").attr(\"class\", `${line.class}-bg-line`).attr(\"x1\", xScale(0)).attr(\"x2\", xScale(maxHighScore)).attr(\"y1\", line.y).attr(\"y2\", line.y).attr(\"stroke\", \"#ddd\").attr(\"stroke-width\", 2);\n\n        // Label\n        svg.append(\"text\").attr(\"class\", `${line.class}-label`).attr(\"x\", 0).attr(\"y\", line.y).attr(\"dy\", \"-1em\").text(line.label);\n\n        // Tick mark\n        svg.append(\"circle\").attr(\"class\", `${line.class}-tick`).attr(\"cx\", xScale(line.score)).attr(\"cy\", line.y).attr(\"r\", 5).attr(\"fill\", line.color);\n\n        // Tick text\n        svg.append(\"text\").attr(\"class\", `${line.class}-tick-text`).attr(\"x\", xScale(line.score)).attr(\"y\", line.y).attr(\"dx\", \"1em\").attr(\"dy\", \"1em\").text(line.score);\n      }\n    });\n\n    // Update elements\n    svg.selectAll(\".user-tick\").data([userScore]).transition().duration(1000).attr(\"cx\", d => xScale(Math.min(d, maxHighScore)));\n    svg.selectAll(\".avg-tick\").data([score.average_score]).transition().duration(1000).attr(\"cx\", d => xScale(Math.min(d, maxHighScore)));\n    svg.selectAll(\".user-tick-text\").data([userScore]).transition().duration(1000).attr(\"x\", d => xScale(Math.min(d, maxHighScore))).text(d => d);\n    svg.selectAll(\".avg-tick-text\").data([score.average_score]).transition().duration(1000).attr(\"x\", d => xScale(Math.min(d, maxHighScore))).text(d => d);\n\n    // Check if game is finished\n    if ((userScore >= maxHighScore || score.average_score >= maxHighScore) && !finishedGame) {\n      setFinishedGame(true);\n      onFinish === null || onFinish === void 0 ? void 0 : onFinish();\n    }\n  }, [userScore, stage, finishedGame, onFinish]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scoreLines\",\n    children: [scoreChangeMsg && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: scoreChangeMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 26\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: ref,\n      style: {\n        width: \"100%\",\n        height: \"200px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n}\n_s(TwoScoreLine, \"v+zPpBB7J1fw2RyUTChQi674i2g=\");\n_c = TwoScoreLine;\nexport default TwoScoreLine;\nvar _c;\n$RefreshReg$(_c, \"TwoScoreLine\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","data","low_score","average_score","high_score","maxHighScore","TwoScoreLine","_ref","_s","userScore","stage","onFinish","ref","finishedGame","setFinishedGame","previousScore","setPreviousScore","scoreChangeMsg","setScoreChangeMsg","diff","svg","select","current","svgWidth","node","getBoundingClientRect","width","xScale","scaleLinear","domain","range","score","lineInfo","y","class","color","label","forEach","line","empty","append","attr","text","selectAll","transition","duration","d","Math","min","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","height","_c","$RefreshReg$"],"sources":["C:/Users/lpana/OneDrive/Documents/gameIterations/scoreUpdate/src/components/TwoScoreLine.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst data = {\r\n  0: { low_score: 0, average_score: 0, high_score: 49 },\r\n  1: { low_score: 0, average_score: 19, high_score: 49 },\r\n  2: { low_score: 0, average_score: 38, high_score: 98 },\r\n  3: { low_score: 0, average_score: 55, high_score: 147 },\r\n  4: { low_score: 0, average_score: 70, high_score: 179 },\r\n  5: { low_score: 0, average_score: 85, high_score: 228 },\r\n  6: { low_score: 0, average_score: 102, high_score: 272 },\r\n};\r\n\r\nconst maxHighScore = 102; // Game finishes when the score reaches 102\r\n\r\nfunction TwoScoreLine({ userScore, stage, onFinish }) {\r\n  const ref = useRef();\r\n  const [finishedGame, setFinishedGame] = useState(false);\r\n  const [previousScore, setPreviousScore] = useState(userScore);\r\n  const [scoreChangeMsg, setScoreChangeMsg] = useState(null); // New state variable\r\n\r\n  useEffect(() => {\r\n    if (userScore !== previousScore) {\r\n      const diff = userScore - previousScore;\r\n      setScoreChangeMsg(\r\n        `You agree with ${100 - diff}%. Your score increased by 100 - ${\r\n          100 - diff\r\n        } = ${diff}`\r\n      );\r\n      setPreviousScore(userScore);\r\n    }\r\n  }, [userScore]);\r\n\r\n  useEffect(() => {\r\n    const svg = d3.select(ref.current);\r\n    const svgWidth = +svg.node().getBoundingClientRect().width;\r\n    const xScale = d3\r\n      .scaleLinear()\r\n      .domain([0, maxHighScore])\r\n      .range([0, svgWidth]);\r\n    const score = data[stage];\r\n\r\n    // Background lines and labels\r\n    const lineInfo = [\r\n      { y: 100, class: \"user\", color: \"green\", label: \"You\", score: userScore },\r\n      {\r\n        y: 170,\r\n        class: \"avg\",\r\n        color: \"black\",\r\n        label: \"Others\",\r\n        score: score.average_score,\r\n      },\r\n    ];\r\n\r\n    lineInfo.forEach((line) => {\r\n      if (svg.select(`.${line.class}-bg-line`).empty()) {\r\n        // Background line\r\n        svg\r\n          .append(\"line\")\r\n          .attr(\"class\", `${line.class}-bg-line`)\r\n          .attr(\"x1\", xScale(0))\r\n          .attr(\"x2\", xScale(maxHighScore))\r\n          .attr(\"y1\", line.y)\r\n          .attr(\"y2\", line.y)\r\n          .attr(\"stroke\", \"#ddd\")\r\n          .attr(\"stroke-width\", 2);\r\n\r\n        // Label\r\n        svg\r\n          .append(\"text\")\r\n          .attr(\"class\", `${line.class}-label`)\r\n          .attr(\"x\", 0)\r\n          .attr(\"y\", line.y)\r\n          .attr(\"dy\", \"-1em\")\r\n          .text(line.label);\r\n\r\n        // Tick mark\r\n        svg\r\n          .append(\"circle\")\r\n          .attr(\"class\", `${line.class}-tick`)\r\n          .attr(\"cx\", xScale(line.score))\r\n          .attr(\"cy\", line.y)\r\n          .attr(\"r\", 5)\r\n          .attr(\"fill\", line.color);\r\n\r\n        // Tick text\r\n        svg\r\n          .append(\"text\")\r\n          .attr(\"class\", `${line.class}-tick-text`)\r\n          .attr(\"x\", xScale(line.score))\r\n          .attr(\"y\", line.y)\r\n          .attr(\"dx\", \"1em\")\r\n          .attr(\"dy\", \"1em\")\r\n          .text(line.score);\r\n      }\r\n    });\r\n\r\n    // Update elements\r\n    svg\r\n      .selectAll(\".user-tick\")\r\n      .data([userScore])\r\n      .transition()\r\n      .duration(1000)\r\n      .attr(\"cx\", (d) => xScale(Math.min(d, maxHighScore)));\r\n\r\n    svg\r\n      .selectAll(\".avg-tick\")\r\n      .data([score.average_score])\r\n      .transition()\r\n      .duration(1000)\r\n      .attr(\"cx\", (d) => xScale(Math.min(d, maxHighScore)));\r\n\r\n    svg\r\n      .selectAll(\".user-tick-text\")\r\n      .data([userScore])\r\n      .transition()\r\n      .duration(1000)\r\n      .attr(\"x\", (d) => xScale(Math.min(d, maxHighScore)))\r\n      .text((d) => d);\r\n\r\n    svg\r\n      .selectAll(\".avg-tick-text\")\r\n      .data([score.average_score])\r\n      .transition()\r\n      .duration(1000)\r\n      .attr(\"x\", (d) => xScale(Math.min(d, maxHighScore)))\r\n      .text((d) => d);\r\n\r\n    // Check if game is finished\r\n    if (\r\n      (userScore >= maxHighScore || score.average_score >= maxHighScore) &&\r\n      !finishedGame\r\n    ) {\r\n      setFinishedGame(true);\r\n      onFinish?.();\r\n    }\r\n  }, [userScore, stage, finishedGame, onFinish]);\r\n\r\n  return (\r\n    <div className=\"scoreLines\">\r\n      {scoreChangeMsg && <div>{scoreChangeMsg}</div>}\r\n      <svg ref={ref} style={{ width: \"100%\", height: \"200px\" }} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TwoScoreLine;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}