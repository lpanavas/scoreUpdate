[{"C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\index.js":"1","C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\reportWebVitals.js":"2","C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\App.js":"3","C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\pages\\LandingPage.js":"4","C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\pages\\StoryGamePage.js":"5","C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\pages\\StoryPage.js":"6","C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\pages\\GamePage.js":"7","C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\components\\Choices.js":"8","C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\components\\Dialogue.js":"9","C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\components\\PairwiseGame.js":"10","C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\components\\ScoreBar.js":"11","C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\components\\TechnologyCard.js":"12","C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\components\\Rankings.js":"13","C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\components\\ScoreLine.js":"14","C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\components\\TwoScoreLine.js":"15","C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\components\\MoralDescriptors.js":"16","C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\components\\Button.js":"17","C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\components\\DemographicCollection.js":"18","C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\pages\\ResultsPage.js":"19","C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\components\\Countries.js":"20"},{"size":609,"mtime":1687949595053,"results":"21","hashOfConfig":"22"},{"size":375,"mtime":1687865374121,"results":"23","hashOfConfig":"22"},{"size":2483,"mtime":1689770151200,"results":"24","hashOfConfig":"22"},{"size":2143,"mtime":1689602919668,"results":"25","hashOfConfig":"22"},{"size":747,"mtime":1687957742265,"results":"26","hashOfConfig":"22"},{"size":1570,"mtime":1687865375188,"results":"27","hashOfConfig":"22"},{"size":1633,"mtime":1689612047482,"results":"28","hashOfConfig":"22"},{"size":996,"mtime":1687865374204,"results":"29","hashOfConfig":"22"},{"size":914,"mtime":1687865374232,"results":"30","hashOfConfig":"22"},{"size":16104,"mtime":1689766003590,"results":"31","hashOfConfig":"22"},{"size":1623,"mtime":1689069922165,"results":"32","hashOfConfig":"22"},{"size":3172,"mtime":1689069608654,"results":"33","hashOfConfig":"22"},{"size":15838,"mtime":1689756474546,"results":"34","hashOfConfig":"22"},{"size":3334,"mtime":1687865374375,"results":"35","hashOfConfig":"22"},{"size":4273,"mtime":1687865374432,"results":"36","hashOfConfig":"22"},{"size":6209,"mtime":1689164169091,"results":"37","hashOfConfig":"22"},{"size":274,"mtime":1687865374177,"results":"38","hashOfConfig":"22"},{"size":6573,"mtime":1689752847070,"results":"39","hashOfConfig":"22"},{"size":531,"mtime":1689587736808,"results":"40","hashOfConfig":"22"},{"size":9446,"mtime":1689694661164,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"6pv3g0",{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"62"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"45"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"45"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"45"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"45"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"45"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"45"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\index.js",[],[],[],"C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\reportWebVitals.js",[],[],"C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\App.js",["113"],[],"import React, { useState, useEffect } from \"react\";\r\nimport LandingPage from \"./pages/LandingPage\";\r\nimport GamePage from \"./pages/GamePage\";\r\nimport ResultsPage from \"./pages/ResultsPage\";\r\nimport cards from \"./data/cards.json\";\r\nimport \"./components/styles/App.css\";\r\nimport axios from \"axios\";\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\nconsole.log(API_URL);\r\nfunction generateID(length = 16) {\r\n  return Math.random().toString(36).substr(2, length);\r\n}\r\nfunction App() {\r\n  const [userID, setUserID] = useState(generateID());\r\n\r\n  const [currentPage, setCurrentPage] = useState(\"landing\");\r\n  const [selectedCards, setSelectedCards] = useState([]);\r\n  const [outputData, setOutputData] = useState([]);\r\n  const [skipDemographics, setSkipDemographics] = useState(null);\r\n  const [demographics, setDemographics] = useState(null);\r\n\r\n  const handleStartGame = () => {\r\n    const shuffledCards = [...cards].sort(() => 0.5 - Math.random());\r\n    setSelectedCards(shuffledCards.slice(0, 5));\r\n    setCurrentPage(\"game\");\r\n  };\r\n\r\n  const handleRestartGame = () => {\r\n    const shuffledCards = [...cards].sort(() => 0.5 - Math.random());\r\n    setSelectedCards(shuffledCards.slice(0, 5));\r\n    setCurrentPage(\"game\");\r\n  };\r\n\r\n  const saveGameData = (userID, outputData) => {\r\n    console.log(userID, outputData);\r\n    axios\r\n      .post(`${API_URL}/data/add`, { userID, outputData })\r\n      .then((res) => console.log(res.data))\r\n      .catch((err) => console.log(\"Error: \" + err));\r\n  };\r\n  useEffect(() => {\r\n    if (currentPage === \"results\") {\r\n      saveGameData(userID, outputData);\r\n    }\r\n  }, [outputData, currentPage, userID]);\r\n  const finishGame = () => {\r\n    setSkipDemographics(true);\r\n    setCurrentPage(\"results\");\r\n  };\r\n  return (\r\n    <div className=\"app\">\r\n      {currentPage === \"landing\" && (\r\n        <LandingPage onStartGame={handleStartGame} />\r\n      )}\r\n      {currentPage === \"game\" && (\r\n        <GamePage\r\n          gameCards={selectedCards}\r\n          finishGame={finishGame}\r\n          setOutputData={setOutputData}\r\n          skipDemographics={skipDemographics}\r\n          demographics={demographics}\r\n          setDemographics={setDemographics}\r\n          userID={userID}\r\n        />\r\n      )}\r\n      {currentPage === \"results\" && (\r\n        <ResultsPage\r\n          onRestartGame={handleRestartGame}\r\n          outputData={outputData}\r\n          selectedCards={selectedCards}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\pages\\LandingPage.js",[],[],"C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\pages\\StoryGamePage.js",["114","115"],[],"C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\pages\\StoryPage.js",[],[],[],"C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\pages\\GamePage.js",[],[],"C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\components\\Choices.js",["116"],[],"import React, { useState, useEffect } from \"react\";\r\nimport \"./styles/Choices.css\";\r\n\r\nfunction Choices({ choices, onClick }) {\r\n  const [isChoiceClickable, setIsChoiceClickable] = useState(true);\r\n\r\n  const handleChoiceClick = (index) => {\r\n    if (isChoiceClickable) {\r\n      setIsChoiceClickable(false);\r\n      onClick(index);\r\n\r\n      // Delay the appearance of the next choice by 1 second (1000 milliseconds)\r\n      setTimeout(() => {\r\n        setIsChoiceClickable(true);\r\n        const nextIndex = index + 1;\r\n        if (nextIndex < choices.length) {\r\n          onClick(nextIndex);\r\n        }\r\n      }, 1000);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"choices\">\r\n      {choices.map((choice, index) => (\r\n        <button\r\n          className=\"button\"\r\n          key={index}\r\n          onClick={() => handleChoiceClick(index)}\r\n          disabled={!isChoiceClickable}\r\n        >\r\n          {choice.option}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Choices;\r\n","C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\components\\Dialogue.js",[],[],"C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\components\\PairwiseGame.js",["117","118","119","120","121","122","123","124","125","126","127","128","129"],[],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport TechnologyCard from \"./TechnologyCard\";\r\nimport Rankings from \"./Rankings\";\r\nimport ScoreBar from \"./ScoreBar\";\r\nimport Comparisons from \"../data/comparisons.json\";\r\n\r\nimport MoralDescriptors from \"./MoralDescriptors\";\r\nimport Button from \"./Button\";\r\nimport DemographicCollection from \"./DemographicCollection\";\r\nimport \"./styles/PairwiseGame.css\";\r\n\r\nconst moralDescriptors = [\"Authority\", \"Fair\", \"Harm\", \"Loyalty\", \"Purity\"];\r\n\r\nconst PairwiseGame = ({\r\n  technologies,\r\n  pairwiseData,\r\n  finishGame,\r\n  skipDemographics,\r\n  demographics,\r\n  setDemographics,\r\n  setOutputData,\r\n  userID,\r\n}) => {\r\n  const [shuffledTechnologies, setShuffledTechnologies] = useState([]);\r\n\r\n  const [currentPairIndex, setCurrentPairIndex] = useState(0);\r\n  const [rankings, setRankings] = useState({});\r\n  const [selectedDescriptors, setSelectedDescriptors] = useState([]);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [selectedCard, setSelectedCard] = useState(null);\r\n  const [unselectedCard, setUnselectedCard] = useState(null);\r\n  const [descriptorStage, setDescriptorStage] = useState(\"firstDescriptors\");\r\n  const [progress, setProgress] = useState(0);\r\n  const [selectionMade, setSelectionMade] = useState(false);\r\n  const [selectedPercent, setSelectedPercent] = useState(0);\r\n  const [unselectedPercent, setUnselectedPercent] = useState(0);\r\n  const [firstClickTime, setFirstClickTime] = useState(null);\r\n  const [descriptorClickTimes, setDescriptorClickTimes] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n  const [selectedIndex, setSelectedIndex] = useState(null);\r\n  const [scoreIndex, setScoreIndex] = useState(0);\r\n  const [agreementAnswer, setAgreementAnswer] = useState(null);\r\n  const [showDescriptorImages, setShowDescriptorImages] = useState(false);\r\n  const [agreementResult, setAgreementResult] = useState(null);\r\n  const [showAgreementResult, setShowAgreementResult] = useState(false);\r\n  // Add these to your current list of useState calls\r\n  const [cardMatchups, setCardMatchups] = useState([]);\r\n  const [moralChoices, setMoralChoices] = useState({});\r\n  const [sendToDemographicData, setSendToDemographicData] = useState();\r\n  const [riskAnswer, setRiskAnswer] = useState(null);\r\n  const [riskAnswerOuput, setRiskAnswerOutput] = useState({});\r\n\r\n  useEffect(() => {\r\n    if (technologies.length > 0) {\r\n      // Shuffle technologies array\r\n      let shuffledTechnologies = [...technologies];\r\n\r\n      for (let i = shuffledTechnologies.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n        [shuffledTechnologies[i], shuffledTechnologies[j]] = [\r\n          shuffledTechnologies[j],\r\n          shuffledTechnologies[i],\r\n        ];\r\n      }\r\n\r\n      let tempShuffledTechnologies = [];\r\n      for (let i = 0; i < shuffledTechnologies.length; i++) {\r\n        let pair1 = [\r\n          shuffledTechnologies[i],\r\n          shuffledTechnologies[\r\n            (i - 1 + shuffledTechnologies.length) % shuffledTechnologies.length\r\n          ],\r\n        ];\r\n        tempShuffledTechnologies.push(pair1);\r\n      }\r\n\r\n      // Shuffle tempShuffledTechnologies\r\n      for (let i = tempShuffledTechnologies.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n        [tempShuffledTechnologies[i], tempShuffledTechnologies[j]] = [\r\n          tempShuffledTechnologies[j],\r\n          tempShuffledTechnologies[i],\r\n        ];\r\n      }\r\n\r\n      setShuffledTechnologies(tempShuffledTechnologies);\r\n\r\n      // Use the original technologies array for the initial rankings\r\n      let initialRankings = {};\r\n      technologies.forEach((tech) => {\r\n        initialRankings[tech.title] = {\r\n          descriptors: [],\r\n          wins: 0,\r\n          losses: 0,\r\n          ties: 0,\r\n          opponents: {}, // Keep track of wins, losses, and ties against each opponent\r\n        };\r\n      });\r\n      setRankings(initialRankings);\r\n    }\r\n  }, [technologies]);\r\n\r\n  useEffect(() => {\r\n    if (currentPairIndex >= technologies.length) {\r\n      setSendToDemographicData({\r\n        UserID: userID, // this should be fetched dynamically\r\n        demographics: demographics,\r\n        risk: riskAnswerOuput,\r\n\r\n        CardMatchups: cardMatchups,\r\n        Moral: moralChoices,\r\n      });\r\n\r\n      // Output the final JSON\r\n      if (skipDemographics && currentPairIndex >= shuffledTechnologies.length) {\r\n        const finalData = {\r\n          UserID: userID, // this should be fetched dynamically\r\n          demographics: demographics,\r\n          risk: riskAnswerOuput,\r\n          CardMatchups: cardMatchups,\r\n          Moral: moralChoices,\r\n        };\r\n\r\n        setOutputData(finalData);\r\n        finishGame(); // Call the finishGame function\r\n      }\r\n      setGameOver(true);\r\n    }\r\n  }, [\r\n    currentPairIndex,\r\n    technologies.length,\r\n    shuffledTechnologies.length,\r\n    skipDemographics,\r\n    finishGame,\r\n  ]);\r\n  useEffect(() => {\r\n    calculateProgress();\r\n  }, [currentPairIndex]);\r\n\r\n  const calculateProgress = () => {\r\n    const totalPairs = Math.floor(technologies.length);\r\n    const currentProgress = (currentPairIndex / totalPairs) * 100;\r\n    setProgress(currentProgress);\r\n  };\r\n\r\n  const handleChoice = (chosenIndex) => {\r\n    // Adjustments to handle new shuffledTechnologies format\r\n    setDescriptorClickTimes([]);\r\n    setFirstClickTime(Date.now());\r\n\r\n    if (selectedCard !== null) {\r\n      return; // If a card is already selected, do nothing\r\n    }\r\n\r\n    const chosenCard = chosenIndex % 2 === 0 ? 0 : 1;\r\n\r\n    setSelectedCard(shuffledTechnologies[currentPairIndex][chosenCard]);\r\n\r\n    setSelectedIndex(chosenIndex);\r\n\r\n    setUnselectedCard(\r\n      shuffledTechnologies[currentPairIndex][(chosenCard + 1) % 2]\r\n    );\r\n\r\n    setSelectionMade(true);\r\n    setAgreementAnswer(null);\r\n  };\r\n\r\n  const renderTechnologyCard = () => {\r\n    const tech1 = shuffledTechnologies[currentPairIndex][0];\r\n    const tech2 = shuffledTechnologies[currentPairIndex][1];\r\n    // Define default percents\r\n    let selectedPercent = 50;\r\n    let unselectedPercent = 50;\r\n\r\n    // The current pair from shuffledTechnologies\r\n    let selectedPercent1 = 50;\r\n    let unselectedPercent1 = 50;\r\n\r\n    let selectedPercent2 = 50;\r\n    let unselectedPercent2 = 50;\r\n\r\n    const currentPair = shuffledTechnologies[currentPairIndex].map(\r\n      (tech) => tech.ID\r\n    );\r\n\r\n    for (let i = 0; i < pairwiseData.data.length; i++) {\r\n      const pair = pairwiseData.data[i].pair;\r\n\r\n      if (pair.sort().join(\",\") === currentPair.sort().join(\",\")) {\r\n        const percentages = pairwiseData.data[i].percentages;\r\n\r\n        selectedPercent1 = percentages[tech1.ID];\r\n        unselectedPercent1 = 100 - selectedPercent1;\r\n\r\n        selectedPercent2 = percentages[tech2.ID];\r\n        unselectedPercent2 = 100 - selectedPercent2;\r\n\r\n        break;\r\n      }\r\n    }\r\n\r\n    return (\r\n      <TechnologyCard\r\n        key={`${tech1.title}-${tech2.title}`}\r\n        tech1={tech1}\r\n        tech2={tech2}\r\n        handleChoice={handleChoice}\r\n        percent1={{\r\n          selectedCard: selectedPercent1,\r\n          unselectedCard: unselectedPercent1,\r\n        }}\r\n        percent2={{\r\n          selectedCard: selectedPercent2,\r\n          unselectedCard: unselectedPercent2,\r\n        }}\r\n        selectionMade={selectionMade}\r\n        agreementAnswer={agreementAnswer}\r\n        isClicked1={0 === selectedIndex}\r\n        isClicked2={1 === selectedIndex}\r\n      />\r\n    );\r\n  };\r\n\r\n  const handleRiskAnswer = (answer) => {\r\n    setRiskAnswerOutput((prevAnswers) => {\r\n      const updatedAnswers = { ...prevAnswers, [selectedCard.ID]: answer };\r\n      return updatedAnswers;\r\n    });\r\n    setRiskAnswer(null);\r\n  };\r\n\r\n  const handleAgreementAnswer = (answer) => {\r\n    let AgreementResult;\r\n    let selectedPercent, unselectedPercent;\r\n\r\n    // search the pairwiseData\r\n    for (let i = 0; i < pairwiseData.data.length; i++) {\r\n      let pair = pairwiseData.data[i].pair;\r\n\r\n      // if we found the right pair\r\n      if (pair.includes(selectedCard.ID) && pair.includes(unselectedCard.ID)) {\r\n        let percentages = pairwiseData.data[i].percentages;\r\n\r\n        if (selectedCard.ID === \"unsure\" || answer === \"unsure\") {\r\n          AgreementResult = null;\r\n        } else if (\r\n          percentages[selectedCard.ID] === 50 ||\r\n          (percentages[selectedCard.ID] > 50 && answer === \"yes\") ||\r\n          (percentages[selectedCard.ID] < 50 && answer === \"no\")\r\n        ) {\r\n          AgreementResult = \"correct\";\r\n        } else {\r\n          AgreementResult = \"incorrect\";\r\n        }\r\n\r\n        // get the percentages from the data\r\n        selectedPercent = percentages[selectedCard.ID];\r\n        unselectedPercent = percentages[unselectedCard.ID];\r\n\r\n        break;\r\n      }\r\n    }\r\n\r\n    // If AgreementResult is undefined, then there was no match found\r\n    if (AgreementResult === undefined) {\r\n      throw new Error(\"No match found for selected card in pairwise data.\");\r\n    }\r\n\r\n    if (AgreementResult === \"correct\") {\r\n      setAgreementResult(\"Correct\");\r\n      setScore((prevScore) => prevScore + 10);\r\n    } else {\r\n      setAgreementResult(\"Incorrect\");\r\n      // setScore remains unchanged\r\n    }\r\n\r\n    // set the percentages to the actual percentages from the data\r\n    setSelectedPercent(selectedPercent);\r\n    setUnselectedPercent(unselectedPercent);\r\n\r\n    setRiskAnswer(\"show\");\r\n\r\n    setCardMatchups([\r\n      ...cardMatchups,\r\n      {\r\n        Card1: shuffledTechnologies[currentPairIndex][0].ID,\r\n        Card2: shuffledTechnologies[currentPairIndex][1].ID,\r\n        Answer: selectedCard.ID,\r\n        Majority: answer,\r\n      },\r\n    ]);\r\n\r\n    setShowAgreementResult(true); // Initially set showAgreementResult to true\r\n    setTimeout(() => {\r\n      setShowAgreementResult(false); // After a second, set showAgreementResult back to false\r\n    }, 2000);\r\n\r\n    setShowDescriptorImages(true);\r\n    setAgreementAnswer(answer);\r\n  };\r\n\r\n  const handleNextCards = () => {\r\n    let updatedRankings = { ...rankings };\r\n    // Check if we should move onto the next stage or finish this round\r\n\r\n    const selectedTech = selectedCard.title;\r\n    const unselectedTech = unselectedCard.title;\r\n\r\n    // Update wins, losses, and opponents\r\n    updatedRankings[selectedTech].wins += 1;\r\n    updatedRankings[unselectedTech].losses += 1;\r\n    updatedRankings[selectedTech].opponents[unselectedTech] =\r\n      (updatedRankings[selectedTech].opponents[unselectedTech] || 0) + 1;\r\n    updatedRankings[unselectedTech].opponents[selectedTech] =\r\n      (updatedRankings[unselectedTech].opponents[selectedTech] || 0) - 1;\r\n\r\n    // Update the descriptors\r\n    setRankings(updatedRankings);\r\n    setSelectedDescriptors([]);\r\n    setSelectedCard(null);\r\n    setUnselectedCard(null);\r\n    setCurrentPairIndex(currentPairIndex + 1);\r\n    setSelectionMade(false);\r\n    setSelectedIndex(null);\r\n    setAgreementAnswer(null);\r\n    setShowDescriptorImages(false);\r\n    setRiskAnswer(null);\r\n\r\n    // Now the effect that triggers game over will run if necessary\r\n  };\r\n\r\n  const handleSkip = () => {\r\n    let updatedRankings = { ...rankings };\r\n    const firstTech = shuffledTechnologies[currentPairIndex][0].title;\r\n    const secondTech = shuffledTechnologies[currentPairIndex][1].title;\r\n\r\n    setCardMatchups([\r\n      ...cardMatchups,\r\n      {\r\n        Card1: shuffledTechnologies[currentPairIndex][0].ID,\r\n        Card2: shuffledTechnologies[currentPairIndex][1].ID,\r\n        Answer: \"Skip\",\r\n        Majority: \"Skip\",\r\n      },\r\n    ]);\r\n\r\n    // Update ties and opponents\r\n    updatedRankings[firstTech].ties += 1;\r\n    updatedRankings[secondTech].ties += 1;\r\n    updatedRankings[firstTech].opponents[secondTech] =\r\n      updatedRankings[firstTech].opponents[secondTech] || 0;\r\n    updatedRankings[secondTech].opponents[firstTech] =\r\n      updatedRankings[secondTech].opponents[firstTech] || 0;\r\n\r\n    setScoreIndex((scoreIndex) => scoreIndex + 1);\r\n    setRankings(updatedRankings);\r\n    setSelectedDescriptors([]);\r\n    setSelectedCard(null);\r\n    setUnselectedCard(null);\r\n    setCurrentPairIndex(currentPairIndex + 1);\r\n    setDescriptorStage(\"firstDescriptors\"); // Reset the descriptor stage\r\n    setSelectionMade(false);\r\n    setAgreementAnswer(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"pairwise-game\">\r\n      {!gameOver && (\r\n        <div className=\"progress-bar\">\r\n          <div\r\n            className=\"progress-bar-inner\"\r\n            style={{ width: `${progress}%` }}\r\n          ></div>\r\n        </div>\r\n      )}\r\n\r\n      {!gameOver && (\r\n        <>\r\n          <h2>Which technology worries you more?</h2>\r\n          <div className=\"bottomHalf\">\r\n            <div className=\"technology-pair\">\r\n              {currentPairIndex < shuffledTechnologies.length && (\r\n                <>{renderTechnologyCard()}</>\r\n              )}\r\n              {selectedCard ? null : (\r\n                <div className=\"descriptors\">\r\n                  <Button text=\"Skip\" onClick={handleSkip} />\r\n                </div>\r\n              )}\r\n            </div>\r\n            {selectedCard &&\r\n              showDescriptorImages &&\r\n              !showAgreementResult &&\r\n              riskAnswer && (\r\n                <div className=\"agreement-question\">\r\n                  <h3>How would you classify this technology?</h3>\r\n\r\n                  <div className=\"button-container\">\r\n                    <button onClick={() => handleRiskAnswer(\"Low\")}>\r\n                      Low Risk\r\n                    </button>\r\n                    <button onClick={() => handleRiskAnswer(\"High\")}>\r\n                      High Risk\r\n                    </button>\r\n                    <button onClick={() => handleRiskAnswer(\"Unacceptable\")}>\r\n                      Unacceptable Risk\r\n                    </button>\r\n                    <button onClick={() => handleRiskAnswer(\"Unsure\")}>\r\n                      Unsure\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n            {selectedCard && !riskAnswer && !agreementAnswer && (\r\n              <div className=\"agreement-question\">\r\n                <h3>Do most people agree with you?</h3>\r\n\r\n                <div className=\"button-container\">\r\n                  <button onClick={() => handleAgreementAnswer(\"yes\")}>\r\n                    Yes\r\n                  </button>\r\n                  <button onClick={() => handleAgreementAnswer(\"no\")}>\r\n                    No\r\n                  </button>\r\n                  <button onClick={() => handleAgreementAnswer(\"unsure\")}>\r\n                    Unsure\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n            {selectedCard && agreementAnswer && showAgreementResult && (\r\n              <div className=\"agreement-question\">\r\n                <h3>Do most people agree with you?</h3>\r\n\r\n                <div className=\"button-container\">\r\n                  <p\r\n                    className={\r\n                      agreementResult === \"Correct\" ? \"correct\" : \"incorrect\"\r\n                    }\r\n                  >\r\n                    {agreementResult}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            )}\r\n            {selectedCard &&\r\n              showDescriptorImages &&\r\n              !showAgreementResult &&\r\n              !riskAnswer && (\r\n                <MoralDescriptors\r\n                  moralDescriptors={moralDescriptors}\r\n                  handleNextCards={handleNextCards}\r\n                  setMoralChoices={setMoralChoices}\r\n                  selectedCard={selectedCard}\r\n                />\r\n              )}\r\n            <ScoreBar score={score} currentPairIndex={currentPairIndex} />\r\n          </div>\r\n        </>\r\n      )}\r\n      {gameOver && !skipDemographics && (\r\n        <DemographicCollection\r\n          finishGame={finishGame}\r\n          setDemographics={setDemographics}\r\n          sendToDemographicData={sendToDemographicData}\r\n          setOutputData={setOutputData}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default PairwiseGame;\r\n","C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\components\\ScoreBar.js",["130","131"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { useSpring, animated as a } from \"react-spring\";\r\nimport \"./styles/ScoreBar.css\";\r\n\r\nconst ScoreBar = ({ score, currentPairIndex }) => {\r\n  const [previousScore, setPreviousScore] = useState(score);\r\n  const [maxScore, setMaxScore] = useState(currentPairIndex * 10);\r\n  const [scoreChange, setScoreChange] = useState(0);\r\n  const [displayChange, setDisplayChange] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const difference = score - previousScore;\r\n    if (difference === 0) {\r\n      return; // Don't do anything if score hasn't changed\r\n    }\r\n\r\n    setScoreChange(difference);\r\n    setPreviousScore(score);\r\n    setDisplayChange(true);\r\n    const timeout = setTimeout(() => setDisplayChange(false), 2000);\r\n    const maxScore = (currentPairIndex + 1) * 10;\r\n    setMaxScore(maxScore);\r\n    return () => clearTimeout(timeout);\r\n  }, [score, currentPairIndex]);\r\n\r\n  const barProps = useSpring({\r\n    backgroundColor: displayChange ? \"#26925F\" : \"#7758FF\",\r\n    config: { tension: 210, friction: 20 },\r\n  });\r\n\r\n  const scoreChangeProps = useSpring({\r\n    opacity: displayChange ? 1 : 0,\r\n    transform: displayChange ? \"translateY(0)\" : \"translateY(-20px)\",\r\n    config: { tension: 210, friction: 20 },\r\n  });\r\n\r\n  return (\r\n    <a.div style={barProps} className=\"score-bar\">\r\n      <span>Score: {score} / 50</span>\r\n      {displayChange && (\r\n        <a.div style={scoreChangeProps} className=\"score-change\">\r\n          {scoreChange > 0 ? \"+\" : \"\"}\r\n          {scoreChange}\r\n        </a.div>\r\n      )}\r\n    </a.div>\r\n  );\r\n};\r\n\r\nexport default ScoreBar;\r\n","C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\components\\TechnologyCard.js",[],[],"C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\components\\Rankings.js",["132","133","134","135","136","137","138","139","140","141"],[],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Button from \"./Button\";\r\nimport FlipMove from \"react-flip-move\";\r\nimport Modal from \"react-modal\";\r\n\r\nimport \"./styles/Rankings.css\";\r\nimport chroma from \"chroma-js\";\r\nModal.setAppElement(\"#root\");\r\n\r\nconst Rankings = ({ outputData, selectedCards }) => {\r\n  const [rankings, setRankings] = useState(null);\r\n  const [userRankings, setUserRankings] = useState(null);\r\n  const [publicRankings, setPublicRankings] = useState(null);\r\n  const [demographic, setDemographic] = useState({ type: \"\", value: \"\" });\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [selectedCardData, setSelectedCardData] = useState({});\r\n  const [flippedCardId, setFlippedCardId] = useState(null);\r\n  const [flippedCardIds, setFlippedCardIds] = useState([]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"outputData changed:\", outputData);\r\n  }, [outputData]);\r\n\r\n  useEffect(() => {\r\n    const cardIds = selectedCards.map((card) => card.ID);\r\n\r\n    axios\r\n      .post(\"/data/rankings\", { cards: cardIds, demographics: demographic })\r\n      .then((response) => {\r\n        const sortedPublicRankings = Object.entries(response.data.ratings).sort(\r\n          (a, b) => b[1] - a[1]\r\n        );\r\n        setRankings(sortedPublicRankings);\r\n        setPublicRankings(sortedPublicRankings);\r\n        console.log(sortedPublicRankings);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error:\", error);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let rankings = {};\r\n    let ratings = {};\r\n    const K = 40;\r\n    const cards = selectedCards.map((card) => card.ID);\r\n    // Initialize rankings object and ratings with player's cards\r\n    cards.forEach((card) => {\r\n      rankings[card] = { wins: 0, losses: 0, ties: 0, opponents: {} };\r\n      ratings[card] = 1800; // default rating\r\n    });\r\n\r\n    const matchups = outputData.CardMatchups;\r\n\r\n    // Iterate through all the matchups\r\n    matchups.forEach((matchup) => {\r\n      // Initialize the opponents\r\n      if (rankings[matchup.Card1] && rankings[matchup.Card2]) {\r\n        if (!rankings[matchup.Card1].opponents[matchup.Card2]) {\r\n          rankings[matchup.Card1].opponents[matchup.Card2] = {\r\n            wins: 0,\r\n            losses: 0,\r\n            ties: 0,\r\n          };\r\n        }\r\n\r\n        if (!rankings[matchup.Card2].opponents[matchup.Card1]) {\r\n          rankings[matchup.Card2].opponents[matchup.Card1] = {\r\n            wins: 0,\r\n            losses: 0,\r\n            ties: 0,\r\n          };\r\n        }\r\n\r\n        if (matchup.Answer === \"Skip\") {\r\n          // It's a tie\r\n          rankings[matchup.Card1].ties += 1;\r\n          rankings[matchup.Card2].ties += 1;\r\n          rankings[matchup.Card1].opponents[matchup.Card2].ties += 1;\r\n          rankings[matchup.Card2].opponents[matchup.Card1].ties += 1;\r\n        } else {\r\n          // There is a winner\r\n          const winner = matchup.Answer;\r\n          const loser =\r\n            winner === matchup.Card1 ? matchup.Card2 : matchup.Card1;\r\n\r\n          rankings[winner].wins += 1;\r\n          rankings[loser].losses += 1;\r\n\r\n          rankings[winner].opponents[loser].losses += 1;\r\n          rankings[loser].opponents[winner].wins += 1;\r\n        }\r\n      }\r\n    });\r\n\r\n    // Calculate ratings using the relative logistic method\r\n    const numPlayers = cards.length;\r\n\r\n    for (let i = 0; i < numPlayers; i++) {\r\n      const playerA = cards[i];\r\n\r\n      for (let j = 0; j < numPlayers; j++) {\r\n        if (i !== j) {\r\n          const playerB = cards[j];\r\n\r\n          if (rankings[playerA].opponents[playerB]) {\r\n            const totalGamesAgainstOpponent =\r\n              rankings[playerA].opponents[playerB].wins +\r\n              rankings[playerA].opponents[playerB].losses +\r\n              rankings[playerA].opponents[playerB].ties;\r\n\r\n            const winRatio =\r\n              rankings[playerA].opponents[playerB].wins /\r\n              totalGamesAgainstOpponent;\r\n            const lossRatio =\r\n              rankings[playerA].opponents[playerB].losses /\r\n              totalGamesAgainstOpponent;\r\n\r\n            const ratingDifference = ratings[playerB] - ratings[playerA];\r\n            const expectedScore = pnorm(ratingDifference, 0, 2000 / 7, 1);\r\n            const actualScore =\r\n              winRatio +\r\n              (0.5 * rankings[playerA].opponents[playerB].ties) /\r\n                totalGamesAgainstOpponent;\r\n\r\n            const delta = K * (actualScore - expectedScore);\r\n            ratings[playerA] += delta;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const sortedUserRankings = Object.entries(ratings).sort(\r\n      (a, b) => b[1] - a[1]\r\n    );\r\n\r\n    setUserRankings(sortedUserRankings);\r\n  }, [outputData]);\r\n\r\n  function pnorm(x, mean, sd, upperTail) {\r\n    const q = (x - mean) / sd;\r\n    return upperTail\r\n      ? (1 - Math.atan(q) / Math.PI) * 0.5\r\n      : Math.atan(q) / Math.PI + 0.5;\r\n  }\r\n\r\n  useEffect(() => {\r\n    // Convert selected cards to an array of card IDs\r\n    const cardIds = selectedCards.map((card) => card.ID);\r\n\r\n    // Define the demographics\r\n    const demographics = {\r\n      [demographic.type]: demographic.value,\r\n    };\r\n\r\n    // Check if both type and value are set\r\n    if (demographic.type && demographic.value) {\r\n      // Send request to server\r\n      axios\r\n        .post(\"/data/rankings\", { cards: cardIds, demographics: demographics })\r\n        .then((response) => {\r\n          const sortedPublicRankings = Object.entries(\r\n            response.data.ratings\r\n          ).sort((a, b) => a[1] - b[1]);\r\n          setRankings(sortedPublicRankings);\r\n          setPublicRankings(sortedPublicRankings);\r\n          console.log(sortedPublicRankings);\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error:\", error);\r\n        });\r\n    }\r\n  }, [selectedCards, demographic.type, demographic.value]);\r\n\r\n  const cardIdToTitle = {};\r\n  selectedCards.forEach((card) => {\r\n    cardIdToTitle[card.ID] = card.title;\r\n  });\r\n  // Create a color scale\r\n  const colorScale = chroma\r\n    .scale([\"#9780FF\", \"#ff5c97\"])\r\n    .mode(\"lch\")\r\n    .colors(userRankings ? userRankings.length : 0);\r\n\r\n  const cardIdToColor = {};\r\n  if (userRankings) {\r\n    userRankings.forEach(([id], index) => {\r\n      cardIdToColor[id] = colorScale[index];\r\n    });\r\n  }\r\n\r\n  const openModal = (cardData) => {\r\n    const matchingCard = selectedCards.find((card) => card.ID === cardData.id);\r\n    console.log(outputData);\r\n    setSelectedCardData(matchingCard);\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  const flipCard = (id) => {\r\n    setFlippedCardIds((prevFlippedCardIds) => {\r\n      if (prevFlippedCardIds.includes(id)) {\r\n        return prevFlippedCardIds.filter((cardId) => cardId !== id);\r\n      } else {\r\n        return [...prevFlippedCardIds, id];\r\n      }\r\n    });\r\n  };\r\n\r\n  const findCard = (id) => {\r\n    const matchingCard = selectedCards.find((card) => card.ID === id);\r\n    return matchingCard;\r\n  };\r\n\r\n  return (\r\n    <div className=\"rankings\">\r\n      <div className=\"rankings-header\">\r\n        <h1>Results</h1>\r\n        <h3>\r\n          Explore your game results and see how you compare with others. See how\r\n          you ranked the technologies and how it matches up to others. Click any\r\n          card in Your Rankings to find out the risk level!\r\n        </h3>\r\n      </div>\r\n\r\n      <div className=\"middle-rankings\">\r\n        <div className=\"middle-rankings-single-column\">\r\n          <div className=\"middle-rankings-columns\">\r\n            <div className=\"demographic-selection\">\r\n              <label htmlFor=\"demographicType\"></label>\r\n              <select\r\n                className=\"rankings-selection\"\r\n                id=\"demographicType\"\r\n                value={demographic.type}\r\n                onChange={(e) =>\r\n                  setDemographic({\r\n                    ...demographic,\r\n                    type: e.target.value,\r\n                    value: \"\",\r\n                  })\r\n                }\r\n              >\r\n                <option value=\"\">Select Demographic Type</option>\r\n\r\n                <option value=\"Gender\">Gender</option>\r\n                <option value=\"Age\">Age</option>\r\n                <option value=\"Race\">Race</option>\r\n                <option value=\"Education\">Education Level</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <div className=\"middle-rankings-columns\">\r\n            {demographic.type && (\r\n              <div className=\"demographic-selection\">\r\n                <label htmlFor=\"demographicValue\"></label>\r\n                {demographic.type === \"Gender\" && (\r\n                  <select\r\n                    className=\"rankings-selection\"\r\n                    id=\"demographicValue\"\r\n                    value={demographic.value}\r\n                    onChange={(e) =>\r\n                      setDemographic({ ...demographic, value: e.target.value })\r\n                    }\r\n                  >\r\n                    <option value=\"\">Select Gender</option>\r\n                    <option value=\"Male\">Male</option>\r\n                    <option value=\"Female\">Female</option>\r\n                    <option value=\"Non-binary\">Non-binary/ third gender</option>\r\n                    <option value=\"Other\">Other</option>\r\n                    <option value=\"Prefer not to say\">Prefer not to say</option>\r\n                  </select>\r\n                )}\r\n                {demographic.type === \"Race\" && (\r\n                  <select\r\n                    className=\"rankings-selection\"\r\n                    id=\"demographicValue\"\r\n                    value={demographic.value}\r\n                    onChange={(e) =>\r\n                      setDemographic({ ...demographic, value: e.target.value })\r\n                    }\r\n                  >\r\n                    <option value=\"\">Select Race</option>\r\n                    <option value=\"White\">White</option>\r\n                    <option value=\"Black\">Black</option>\r\n                    <option value=\"Asian\">Asian</option>\r\n                    <option value=\"Hispanic\">Hispanic</option>\r\n                    <option value=\"Mixed\">Mixed</option>\r\n                    <option value=\"Other\">Other</option>\r\n                  </select>\r\n                )}\r\n                {demographic.type === \"Age\" && (\r\n                  <select\r\n                    className=\"rankings-selection\"\r\n                    id=\"demographicValue\"\r\n                    value={demographic.value}\r\n                    onChange={(e) =>\r\n                      setDemographic({ ...demographic, value: e.target.value })\r\n                    }\r\n                  >\r\n                    <option value=\"\">Select Age</option>\r\n                    <option value=\"<18\">Under 18</option>\r\n                    <option value=\"18-24\">18-24</option>\r\n                    <option value=\"25-34\">25-34</option>\r\n                    <option value=\"35-44\">35-44</option>\r\n                    <option value=\"45-54\">45-54</option>\r\n                    <option value=\"55-64\">55-64</option>\r\n                    <option value=\"65+\">65+</option>\r\n                  </select>\r\n                )}\r\n\r\n                {demographic.type === \"Education\" && (\r\n                  <select\r\n                    className=\"rankings-selection\"\r\n                    id=\"demographicValue\"\r\n                    value={demographic.value}\r\n                    onChange={(e) =>\r\n                      setDemographic({ ...demographic, value: e.target.value })\r\n                    }\r\n                  >\r\n                    <option value=\"\">Select Education Level</option>\r\n                    <option value=\"High School\">High School</option>\r\n                    <option value=\"Bachelors\">Bachelors</option>\r\n                    <option value=\"Masters\">Masters</option>\r\n                    <option value=\"PhD\">PhD</option>\r\n                  </select>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"top-rankings\">\r\n          <div className=\"top-rankings-columns\">\r\n            <h3>Your Rankings</h3>\r\n          </div>\r\n          <div className=\"top-rankings-columns\">\r\n            <h3>Public Rankings</h3>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"bottom-rankings\">\r\n        <div className=\"rankings-columns\">\r\n          <p className=\"card-text\">Most Acceptable</p>\r\n          {userRankings ? (\r\n            userRankings.map(([id, rank]) => (\r\n              <div\r\n                className={`card-ranking ${\r\n                  flippedCardIds.includes(id) ? \"flipped\" : \"\"\r\n                }`}\r\n                key={id}\r\n                onClick={() => flipCard(id)}\r\n                style={{\r\n                  borderColor: cardIdToColor[id],\r\n                  borderWidth: \".5vw\",\r\n                  borderStyle: \"solid\",\r\n                }}\r\n              >\r\n                {flippedCardIds.includes(id) ? (\r\n                  <div className=\"card-text\">\r\n                    <p>Legislation Risk: {findCard(id).classification}</p>\r\n                    <p>\r\n                      Your Risk:{\" \"}\r\n                      {outputData.risk[cardIdToTitle[id]] || \"No choice made\"}\r\n                    </p>\r\n                  </div>\r\n                ) : (\r\n                  <p className=\"card-text\">\r\n                    {cardIdToTitle[id].replace(\"AI system designed for \", \"\")}\r\n                  </p>\r\n                )}\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <p>Loading...</p>\r\n          )}{\" \"}\r\n          <p className=\"card-text\">Least Acceptable</p>\r\n        </div>\r\n        <FlipMove className=\"rankings-columns\">\r\n          <p className=\"card-text\">Most Acceptable</p>\r\n\r\n          {publicRankings ? (\r\n            publicRankings.map(([id, rank]) => (\r\n              <div\r\n                className=\"card-ranking\"\r\n                key={id}\r\n                onClick={() => openModal({ id })}\r\n                style={{\r\n                  borderColor: cardIdToColor[id],\r\n                  borderWidth: \".5vw\",\r\n                  borderStyle: \"solid\",\r\n                }}\r\n              >\r\n                <p className=\"card-text\">\r\n                  {cardIdToTitle[id].replace(\"AI system designed for \", \"\")}\r\n                </p>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <p>Loading...</p>\r\n          )}\r\n\r\n          <p className=\"card-text\">Least Acceptable</p>\r\n        </FlipMove>\r\n      </div>\r\n      {/* <Modal\r\n        isOpen={isModalOpen}\r\n        onRequestClose={closeModal}\r\n        contentLabel=\"Card Information\"\r\n        // className=\"my-modal\"\r\n        // overlayClassName=\"my-modal-overlay\"\r\n        style={{\r\n          overlay: {\r\n            backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n          },\r\n          content: {\r\n            top: \"50%\",\r\n            left: \"50%\",\r\n            right: \"auto\",\r\n            bottom: \"auto\",\r\n            marginRight: \"-50%\",\r\n            transform: \"translate(-50%, -50%)\",\r\n            width: \"60vw\",\r\n            height: \"70vh\",\r\n            borderRadius: \"1em\",\r\n          },\r\n        }}\r\n      >\r\n        <h2 className=\"modal-title\">Title: {selectedCardData.title}</h2>\r\n        <p className=\"modal-text\">\r\n          <b>Legislation text:</b> {selectedCardData.reference}\r\n        </p>\r\n        <p className=\"modal-text\">\r\n          {\" \"}\r\n          <b>Risk Assigned:</b> {selectedCardData.classification}\r\n        </p>\r\n        <p className=\"modal-text\">\r\n          <b>Your Risk Score: </b>\r\n          {outputData.risk[selectedCardData.title] || \"No choice made\"}\r\n        </p>\r\n        <button className=\"modal-close-btn\" onClick={closeModal}>\r\n          X\r\n        </button>\r\n      </Modal> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Rankings;\r\n","C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\components\\ScoreLine.js",[],[],"C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\components\\TwoScoreLine.js",["142"],[],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst data = {\r\n  0: { low_score: 0, average_score: 0, high_score: 49 },\r\n  1: { low_score: 0, average_score: 19, high_score: 49 },\r\n  2: { low_score: 0, average_score: 38, high_score: 98 },\r\n  3: { low_score: 0, average_score: 55, high_score: 147 },\r\n  4: { low_score: 0, average_score: 70, high_score: 179 },\r\n  5: { low_score: 0, average_score: 85, high_score: 228 },\r\n  6: { low_score: 0, average_score: 102, high_score: 272 },\r\n};\r\n\r\nconst maxHighScore = 102; // Game finishes when the score reaches 102\r\n\r\nfunction TwoScoreLine({ userScore, stage, onFinish }) {\r\n  const ref = useRef();\r\n  const [finishedGame, setFinishedGame] = useState(false);\r\n  const [previousScore, setPreviousScore] = useState(userScore);\r\n  const [scoreChangeMsg, setScoreChangeMsg] = useState(null); // New state variable\r\n\r\n  useEffect(() => {\r\n    if (userScore !== previousScore) {\r\n      const diff = userScore - previousScore;\r\n      setScoreChangeMsg(\r\n        `You agree with ${100 - diff}%. Your score increased by 100 - ${\r\n          100 - diff\r\n        } = ${diff}`\r\n      );\r\n      setPreviousScore(userScore);\r\n    }\r\n  }, [userScore]);\r\n\r\n  useEffect(() => {\r\n    const svg = d3.select(ref.current);\r\n    const svgWidth = +svg.node().getBoundingClientRect().width;\r\n    const xScale = d3\r\n      .scaleLinear()\r\n      .domain([0, maxHighScore])\r\n      .range([0, svgWidth]);\r\n    const score = data[stage];\r\n\r\n    // Background lines and labels\r\n    const lineInfo = [\r\n      { y: 100, class: \"user\", color: \"green\", label: \"You\", score: userScore },\r\n      {\r\n        y: 170,\r\n        class: \"avg\",\r\n        color: \"black\",\r\n        label: \"Others\",\r\n        score: score.average_score,\r\n      },\r\n    ];\r\n\r\n    lineInfo.forEach((line) => {\r\n      if (svg.select(`.${line.class}-bg-line`).empty()) {\r\n        // Background line\r\n        svg\r\n          .append(\"line\")\r\n          .attr(\"class\", `${line.class}-bg-line`)\r\n          .attr(\"x1\", xScale(0))\r\n          .attr(\"x2\", xScale(maxHighScore))\r\n          .attr(\"y1\", line.y)\r\n          .attr(\"y2\", line.y)\r\n          .attr(\"stroke\", \"#ddd\")\r\n          .attr(\"stroke-width\", 2);\r\n\r\n        // Label\r\n        svg\r\n          .append(\"text\")\r\n          .attr(\"class\", `${line.class}-label`)\r\n          .attr(\"x\", 0)\r\n          .attr(\"y\", line.y)\r\n          .attr(\"dy\", \"-1em\")\r\n          .text(line.label);\r\n\r\n        // Tick mark\r\n        svg\r\n          .append(\"circle\")\r\n          .attr(\"class\", `${line.class}-tick`)\r\n          .attr(\"cx\", xScale(line.score))\r\n          .attr(\"cy\", line.y)\r\n          .attr(\"r\", 5)\r\n          .attr(\"fill\", line.color);\r\n\r\n        // Tick text\r\n        svg\r\n          .append(\"text\")\r\n          .attr(\"class\", `${line.class}-tick-text`)\r\n          .attr(\"x\", xScale(line.score))\r\n          .attr(\"y\", line.y)\r\n          .attr(\"dx\", \"1em\")\r\n          .attr(\"dy\", \"1em\")\r\n          .text(line.score);\r\n      }\r\n    });\r\n\r\n    // Update elements\r\n    svg\r\n      .selectAll(\".user-tick\")\r\n      .data([userScore])\r\n      .transition()\r\n      .duration(1000)\r\n      .attr(\"cx\", (d) => xScale(Math.min(d, maxHighScore)));\r\n\r\n    svg\r\n      .selectAll(\".avg-tick\")\r\n      .data([score.average_score])\r\n      .transition()\r\n      .duration(1000)\r\n      .attr(\"cx\", (d) => xScale(Math.min(d, maxHighScore)));\r\n\r\n    svg\r\n      .selectAll(\".user-tick-text\")\r\n      .data([userScore])\r\n      .transition()\r\n      .duration(1000)\r\n      .attr(\"x\", (d) => xScale(Math.min(d, maxHighScore)))\r\n      .text((d) => d);\r\n\r\n    svg\r\n      .selectAll(\".avg-tick-text\")\r\n      .data([score.average_score])\r\n      .transition()\r\n      .duration(1000)\r\n      .attr(\"x\", (d) => xScale(Math.min(d, maxHighScore)))\r\n      .text((d) => d);\r\n\r\n    // Check if game is finished\r\n    if (\r\n      (userScore >= maxHighScore || score.average_score >= maxHighScore) &&\r\n      !finishedGame\r\n    ) {\r\n      setFinishedGame(true);\r\n      onFinish?.();\r\n    }\r\n  }, [userScore, stage, finishedGame, onFinish]);\r\n\r\n  return (\r\n    <div className=\"scoreLines\">\r\n      {scoreChangeMsg && <div>{scoreChangeMsg}</div>}\r\n      <svg ref={ref} style={{ width: \"100%\", height: \"200px\" }} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TwoScoreLine;\r\n","C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\components\\MoralDescriptors.js",["143"],[],"import React, { useState } from \"react\";\r\nimport { useSpring, useTransition, animated as a } from \"react-spring\";\r\nimport \"./styles/MoralDescriptors.css\";\r\nimport authorityPositive from \"../images/AuthorityPositive.jpg\";\r\nimport authorityNegative from \"../images/AuthorityNegative.jpg\";\r\nimport fairPositive from \"../images/FairPositive.jpg\";\r\nimport fairNegative from \"../images/FairNegative.jpg\";\r\nimport loyaltyPositive from \"../images/LoyaltyPositive.jpg\";\r\nimport loyaltyNegative from \"../images/LoyaltyNegative.jpg\";\r\nimport harmNegative from \"../images/HarmNegative.jpg\";\r\nimport harmPositive from \"../images/HarmPositive.jpg\";\r\nimport purityPositive from \"../images/PurityPositive.jpg\";\r\nimport purityNegative from \"../images/PurityNegative.jpg\";\r\n\r\nconst shuffleArray = (array) => {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]]; // destructuring assignment to swap values\r\n  }\r\n  return array;\r\n};\r\n\r\nconst MoralDescriptors = ({\r\n  moralDescriptors,\r\n  handleNextCards,\r\n  setMoralChoices,\r\n  selectedCard,\r\n}) => {\r\n  const [currentDescriptorIndex, setCurrentDescriptorIndex] = useState(0);\r\n  const [selectedImages, setSelectedImages] = useState({\r\n    positive: null,\r\n    negative: null,\r\n  });\r\n\r\n  const handleImageSelection = (selectedImage) => {\r\n    if (selectedImage === \"positive\") {\r\n      setSelectedImages({\r\n        ...selectedImages,\r\n        positive: moralDescriptors[currentDescriptorIndex],\r\n      });\r\n    } else if (selectedImage === \"negative\") {\r\n      setSelectedImages({\r\n        ...selectedImages,\r\n        negative: moralDescriptors[currentDescriptorIndex],\r\n      });\r\n    }\r\n\r\n    if (currentDescriptorIndex === moralDescriptors.length - 1) {\r\n      handleNextCards();\r\n    } else {\r\n      setCurrentDescriptorIndex(currentDescriptorIndex + 1);\r\n    }\r\n  };\r\n  const getImageSource = (descriptor) => {\r\n    switch (descriptor) {\r\n      case \"Authority\":\r\n        return {\r\n          positive: {\r\n            source: authorityPositive,\r\n            description: \"Respectful\",\r\n          },\r\n          negative: {\r\n            source: authorityNegative,\r\n            description: \"Disobedient\",\r\n          },\r\n        };\r\n      case \"Fair\":\r\n        return {\r\n          positive: {\r\n            source: fairPositive,\r\n            description: \"Fair\",\r\n          },\r\n          negative: {\r\n            source: fairNegative,\r\n            description: \"Unjust\",\r\n          },\r\n        };\r\n      case \"Loyalty\":\r\n        return {\r\n          positive: {\r\n            source: loyaltyPositive,\r\n            description: \"Loyal\",\r\n          },\r\n          negative: {\r\n            source: loyaltyNegative,\r\n            description: \"Traitor\",\r\n          },\r\n        };\r\n      case \"Harm\":\r\n        return {\r\n          positive: {\r\n            source: harmPositive,\r\n            description: \"Protective\",\r\n          },\r\n          negative: {\r\n            source: harmNegative,\r\n            description: \"Harmful\",\r\n          },\r\n        };\r\n      case \"Purity\":\r\n        return {\r\n          positive: {\r\n            source: purityPositive,\r\n            description: \"Decent\",\r\n          },\r\n          negative: {\r\n            source: purityNegative,\r\n            description: \"Indecent\",\r\n          },\r\n        };\r\n      default:\r\n        return {\r\n          positive: { source: \"\", description: \"\" },\r\n          negative: { source: \"\", description: \"\" },\r\n        };\r\n    }\r\n  };\r\n\r\n  const currentDescriptor = moralDescriptors[currentDescriptorIndex];\r\n  const imageSources = getImageSource(currentDescriptor);\r\n\r\n  // setup transition for images\r\n  const transitions = useTransition(currentDescriptorIndex, {\r\n    from: { opacity: 0, transform: \"scale(0)\" },\r\n    enter: { opacity: 1, transform: \"scale(1)\" },\r\n    config: { tension: 210, friction: 20 },\r\n  });\r\n\r\n  // setup spring for button\r\n  const [buttonProps, setButtonProps] = useSpring(() => ({\r\n    scale: 1,\r\n    config: { tension: 210, friction: 20 },\r\n  }));\r\n\r\n  const handleButtonClick = (selectedImage) => {\r\n    setButtonProps({ scale: 1.1 });\r\n    handleImageSelection(selectedImage);\r\n    setMoralChoices((prevChoices) => ({\r\n      ...prevChoices,\r\n      [selectedCard.ID]: {\r\n        ...(prevChoices[selectedCard.ID] || {}),\r\n        [currentDescriptor]: selectedImage,\r\n      },\r\n    }));\r\n\r\n    // Reset the button scale after a short period of time\r\n    setTimeout(() => setButtonProps({ scale: 1 }), 150);\r\n  };\r\n\r\n  return (\r\n    <div className=\"moral-descriptors\">\r\n      <h3>How would you describe this technology?</h3>\r\n      <div className=\"image-container\">\r\n        {transitions((style, item) => (\r\n          <>\r\n            <div className=\"image-wrapper\">\r\n              <a.button\r\n                style={buttonProps}\r\n                onClick={() => handleButtonClick(\"positive\")}\r\n              >\r\n                <img\r\n                  src={imageSources.positive.source}\r\n                  alt=\"Positive\"\r\n                  className={\r\n                    selectedImages.positive === moralDescriptors[item]\r\n                      ? \"image-pop-up\"\r\n                      : \"\"\r\n                  }\r\n                />\r\n                <p>{imageSources.positive.description}</p>\r\n              </a.button>\r\n            </div>\r\n            <div className=\"image-wrapper\">\r\n              <a.button\r\n                style={buttonProps}\r\n                onClick={() => handleButtonClick(\"negative\")}\r\n              >\r\n                <img\r\n                  src={imageSources.negative.source}\r\n                  alt=\"Negative\"\r\n                  className={\r\n                    selectedImages.negative === moralDescriptors[item]\r\n                      ? \"image-pop-up\"\r\n                      : \"\"\r\n                  }\r\n                />\r\n                <p>{imageSources.negative.description}</p>\r\n              </a.button>\r\n            </div>\r\n          </>\r\n        ))}\r\n      </div>\r\n      <button\r\n        className=\"unsure-button\"\r\n        onClick={() => handleImageSelection(\"unsure\")}\r\n      >\r\n        Unsure\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MoralDescriptors;\r\n","C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\components\\Button.js",[],[],"C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\components\\DemographicCollection.js",["144"],[],"import React, { useState } from \"react\";\r\nimport \"./styles/Demographic.css\";\r\nimport Select from \"react-select\";\r\nimport countries from \"./Countries\";\r\n\r\nconst DemographicCollection = ({\r\n  finishGame,\r\n  setDemographics,\r\n  sendToDemographicData,\r\n  setOutputData,\r\n}) => {\r\n  const [gender, setGender] = useState(\"\");\r\n  const [age, setAge] = useState(\"\");\r\n  const [race, setRace] = useState(\"\");\r\n  const [country, setCountry] = useState(\"\");\r\n  const [income, setIncome] = useState(\"\");\r\n  const [tech, setTech] = useState(\"\");\r\n  const [education, setEducation] = useState(\"\");\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const demographicData = {\r\n      Gender: gender,\r\n      Age: age,\r\n      Race: race,\r\n      Country: country,\r\n      Income: income,\r\n      Tech: tech,\r\n      Education: education,\r\n    };\r\n\r\n    setDemographics(demographicData);\r\n    sendToDemographicData.demographics = demographicData;\r\n    setOutputData(sendToDemographicData);\r\n\r\n    finishGame();\r\n  };\r\n\r\n  const allFieldsFilled = gender && age && race && country && tech && education;\r\n  const customStyles = {\r\n    control: (provided, state) => ({\r\n      ...provided,\r\n      width: \"60vw\",\r\n      marginBottom: \"1em\",\r\n      fontFamily: \"Montserrat\",\r\n      borderRadius: \"1em\",\r\n      margin: \".2em 4vw\",\r\n      color: \"black\",\r\n      fontSize: \"calc(.6rem + .7vw)\",\r\n    }),\r\n    singleValue: (provided, state) => {\r\n      const textAlign = \"left\";\r\n      return { ...provided, textAlign };\r\n    },\r\n    option: (provided, state) => ({\r\n      ...provided,\r\n      fontFamily: \"Montserrat\",\r\n      fontSize: \"calc(.6rem + .7vw)\",\r\n    }),\r\n    menu: (provided, state) => ({\r\n      ...provided,\r\n      fontFamily: \"Montserrat\",\r\n      fontSize: \"calc(.6rem + .7vw)\",\r\n    }),\r\n  };\r\n\r\n  const genders = [\r\n    { value: \"\", label: \"Select Gender\" },\r\n    { value: \"Male\", label: \"Male\" },\r\n    { value: \"Female\", label: \"Female\" },\r\n    { value: \"Non-binary\", label: \"Non-binary/ third gender\" },\r\n    { value: \"Other\", label: \"Other\" },\r\n    { value: \"Prefer not to say\", label: \"Prefer not to say\" },\r\n  ];\r\n\r\n  const ages = [\r\n    { value: \"\", label: \"Select Age Range\" },\r\n    { value: \"<18\", label: \"Under 18\" },\r\n    { value: \"18-24\", label: \"18-24\" },\r\n    { value: \"25-34\", label: \"25-34\" },\r\n    { value: \"35-44\", label: \"35-44\" },\r\n    { value: \"45-54\", label: \"45-54\" },\r\n    { value: \"55-64\", label: \"55-64\" },\r\n    { value: \"65+\", label: \"65+\" },\r\n  ];\r\n\r\n  const educations = [\r\n    { value: \"\", label: \"Select Education Level\" },\r\n    { value: \"SomePrimary\", label: \"Some Primary Education\" },\r\n    { value: \"CompletedPrimary\", label: \"Completed Primary\" },\r\n    { value: \"SomeSecondary\", label: \"Some Secondary Education\" },\r\n    { value: \"CompletedSecondary\", label: \"Completed Secondary\" },\r\n    { value: \"Vocational\", label: \"Vocational or Similar\" },\r\n    {\r\n      value: \"NoDegree\",\r\n      label: \"Some university but no degree\",\r\n    },\r\n    {\r\n      value: \"Bachelors\",\r\n      label: \"University Bachelors degree\",\r\n    },\r\n    {\r\n      value: \"Graduate\",\r\n      label: \"Graduate or professional degree (MA, MS, MBA, PhD, JD, MD, DDS)\",\r\n    },\r\n    { value: \"Prefer\", label: \"Prefer not to say\" },\r\n  ];\r\n\r\n  const races = [\r\n    { value: \"\", label: \"Select Ethnicity\" },\r\n    { value: \"White\", label: \"White\" },\r\n    { value: \"Black\", label: \"Black/African/Caribbean\" },\r\n    {\r\n      value: \"Asian\",\r\n      label:\r\n        \"Asian (Indian, Pakistani, Bangladeshi, Chinese, any other Asian background)\",\r\n    },\r\n    { value: \"Hispanic\", label: \"Hispanic\" },\r\n    { value: \"Mixed\", label: \"Mixed two or more ethnic groups\" },\r\n    { value: \"Other\", label: \"Other (Arab or any others)\" },\r\n    { value: \"Prefer\", label: \"Prefer not to say\" },\r\n  ];\r\n\r\n  const techExperience = [\r\n    { value: \"\", label: \"Select Technology Experience\" },\r\n    { value: \"Course\", label: \"Taken at least one CS-related course\" },\r\n    {\r\n      value: \"Undergrad\",\r\n      label: \"Undergraduate degree in CS or Engineering\",\r\n    },\r\n    { value: \"Graduate\", label: \"Graduate degree in CS or Engineering\" },\r\n    { value: \"Programming\", label: \"Have programming experience\" },\r\n    { value: \"None\", label: \"None of the above experiences\" },\r\n  ];\r\n\r\n  // Similar arrays for age, education, race, and tech, following the pattern above\r\n\r\n  return (\r\n    <div className=\"demographicQuestions\">\r\n      <h2>\r\n        Please fill out the following demographic information to see your\r\n        results. All fields are required:\r\n      </h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <Select\r\n          className=\"genderSelect\"\r\n          styles={customStyles}\r\n          options={genders}\r\n          value={genders.find((obj) => obj.value === gender)}\r\n          onChange={(selectedOption) => setGender(selectedOption.value)}\r\n          isSearchable\r\n        />\r\n\r\n        <Select\r\n          className=\"ageSelect\"\r\n          styles={customStyles}\r\n          options={ages}\r\n          value={ages.find((obj) => obj.value === age)}\r\n          onChange={(selectedOption) => setAge(selectedOption.value)}\r\n          isSearchable\r\n        />\r\n\r\n        <Select\r\n          className=\"educationSelect\"\r\n          styles={customStyles}\r\n          options={educations}\r\n          value={educations.find((obj) => obj.value === education)}\r\n          onChange={(selectedOption) => setEducation(selectedOption.value)}\r\n          isSearchable\r\n        />\r\n\r\n        <Select\r\n          className=\"raceSelect\"\r\n          styles={customStyles}\r\n          options={races}\r\n          value={races.find((obj) => obj.value === race)}\r\n          onChange={(selectedOption) => setRace(selectedOption.value)}\r\n          isSearchable\r\n        />\r\n        <Select\r\n          className=\"techSelect\"\r\n          styles={customStyles}\r\n          options={techExperience}\r\n          value={techExperience.find((option) => option.value === tech)}\r\n          onChange={(selectedOption) => setTech(selectedOption.value)}\r\n          isSearchable\r\n        />\r\n\r\n        <Select\r\n          className=\"countrySelect\"\r\n          styles={customStyles}\r\n          options={countries}\r\n          value={countries.find((obj) => obj.value === country)}\r\n          onChange={(selectedOption) => setCountry(selectedOption.value)}\r\n          isSearchable\r\n        />\r\n      </form>\r\n      {allFieldsFilled && (\r\n        <button className=\"demographicButton\" onClick={handleSubmit}>\r\n          See your Results!\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DemographicCollection;\r\n","C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\pages\\ResultsPage.js",["145","146","147"],[],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Rankings from \"../components/Rankings\";\r\nimport \"../components/styles/ResultsPage.css\";\r\n\r\nconst ResultsPage = ({ onRestartGame, outputData, selectedCards }) => {\r\n  return (\r\n    <div className=\"results-page\">\r\n      <Rankings outputData={outputData} selectedCards={selectedCards} />\r\n      <button className=\"restart-game\" onClick={onRestartGame}>\r\n        Restart Game\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResultsPage;\r\n","C:\\Users\\lpana\\OneDrive\\Documents\\gameIterations\\scoreUpdate\\src\\components\\Countries.js",[],[],{"ruleId":"148","severity":1,"message":"149","line":15,"column":18,"nodeType":"150","messageId":"151","endLine":15,"endColumn":27},{"ruleId":"148","severity":1,"message":"152","line":1,"column":17,"nodeType":"150","messageId":"151","endLine":1,"endColumn":26},{"ruleId":"148","severity":1,"message":"153","line":6,"column":10,"nodeType":"150","messageId":"151","endLine":6,"endColumn":20},{"ruleId":"148","severity":1,"message":"152","line":1,"column":27,"nodeType":"150","messageId":"151","endLine":1,"endColumn":36},{"ruleId":"148","severity":1,"message":"154","line":4,"column":8,"nodeType":"150","messageId":"151","endLine":4,"endColumn":16},{"ruleId":"148","severity":1,"message":"155","line":6,"column":8,"nodeType":"150","messageId":"151","endLine":6,"endColumn":19},{"ruleId":"148","severity":1,"message":"156","line":29,"column":10,"nodeType":"150","messageId":"151","endLine":29,"endColumn":29},{"ruleId":"148","severity":1,"message":"157","line":33,"column":10,"nodeType":"150","messageId":"151","endLine":33,"endColumn":25},{"ruleId":"148","severity":1,"message":"158","line":36,"column":10,"nodeType":"150","messageId":"151","endLine":36,"endColumn":25},{"ruleId":"148","severity":1,"message":"159","line":37,"column":10,"nodeType":"150","messageId":"151","endLine":37,"endColumn":27},{"ruleId":"148","severity":1,"message":"160","line":38,"column":10,"nodeType":"150","messageId":"151","endLine":38,"endColumn":24},{"ruleId":"148","severity":1,"message":"161","line":39,"column":10,"nodeType":"150","messageId":"151","endLine":39,"endColumn":30},{"ruleId":"148","severity":1,"message":"162","line":42,"column":10,"nodeType":"150","messageId":"151","endLine":42,"endColumn":20},{"ruleId":"163","severity":1,"message":"164","line":130,"column":6,"nodeType":"165","endLine":136,"endColumn":4,"suggestions":"166"},{"ruleId":"163","severity":1,"message":"167","line":139,"column":6,"nodeType":"165","endLine":139,"endColumn":24,"suggestions":"168"},{"ruleId":"148","severity":1,"message":"158","line":174,"column":9,"nodeType":"150","messageId":"151","endLine":174,"endColumn":24},{"ruleId":"148","severity":1,"message":"159","line":175,"column":9,"nodeType":"150","messageId":"151","endLine":175,"endColumn":26},{"ruleId":"148","severity":1,"message":"169","line":7,"column":10,"nodeType":"150","messageId":"151","endLine":7,"endColumn":18},{"ruleId":"163","severity":1,"message":"170","line":24,"column":6,"nodeType":"165","endLine":24,"endColumn":31,"suggestions":"171"},{"ruleId":"148","severity":1,"message":"172","line":3,"column":8,"nodeType":"150","messageId":"151","endLine":3,"endColumn":14},{"ruleId":"148","severity":1,"message":"173","line":12,"column":10,"nodeType":"150","messageId":"151","endLine":12,"endColumn":18},{"ruleId":"148","severity":1,"message":"174","line":16,"column":10,"nodeType":"150","messageId":"151","endLine":16,"endColumn":21},{"ruleId":"148","severity":1,"message":"175","line":17,"column":10,"nodeType":"150","messageId":"151","endLine":17,"endColumn":26},{"ruleId":"148","severity":1,"message":"176","line":18,"column":10,"nodeType":"150","messageId":"151","endLine":18,"endColumn":23},{"ruleId":"148","severity":1,"message":"177","line":18,"column":25,"nodeType":"150","messageId":"151","endLine":18,"endColumn":41},{"ruleId":"163","severity":1,"message":"178","line":41,"column":6,"nodeType":"165","endLine":41,"endColumn":8,"suggestions":"179"},{"ruleId":"148","severity":1,"message":"180","line":116,"column":19,"nodeType":"150","messageId":"151","endLine":116,"endColumn":28},{"ruleId":"163","severity":1,"message":"181","line":138,"column":6,"nodeType":"165","endLine":138,"endColumn":18,"suggestions":"182"},{"ruleId":"148","severity":1,"message":"183","line":199,"column":9,"nodeType":"150","messageId":"151","endLine":199,"endColumn":19},{"ruleId":"163","severity":1,"message":"170","line":32,"column":6,"nodeType":"165","endLine":32,"endColumn":17,"suggestions":"184"},{"ruleId":"148","severity":1,"message":"185","line":15,"column":7,"nodeType":"150","messageId":"151","endLine":15,"endColumn":19},{"ruleId":"148","severity":1,"message":"186","line":16,"column":18,"nodeType":"150","messageId":"151","endLine":16,"endColumn":27},{"ruleId":"148","severity":1,"message":"152","line":1,"column":17,"nodeType":"150","messageId":"151","endLine":1,"endColumn":26},{"ruleId":"148","severity":1,"message":"187","line":1,"column":28,"nodeType":"150","messageId":"151","endLine":1,"endColumn":36},{"ruleId":"148","severity":1,"message":"188","line":2,"column":8,"nodeType":"150","messageId":"151","endLine":2,"endColumn":13},"no-unused-vars","'setUserID' is assigned a value but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'isFinished' is assigned a value but never used.","'Rankings' is defined but never used.","'Comparisons' is defined but never used.","'selectedDescriptors' is assigned a value but never used.","'descriptorStage' is assigned a value but never used.","'selectedPercent' is assigned a value but never used.","'unselectedPercent' is assigned a value but never used.","'firstClickTime' is assigned a value but never used.","'descriptorClickTimes' is assigned a value but never used.","'scoreIndex' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'cardMatchups', 'demographics', 'moralChoices', 'riskAnswerOuput', 'setOutputData', and 'userID'. Either include them or remove the dependency array. If 'setOutputData' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["189"],"React Hook useEffect has a missing dependency: 'calculateProgress'. Either include it or remove the dependency array.",["190"],"'maxScore' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'previousScore'. Either include it or remove the dependency array.",["191"],"'Button' is defined but never used.","'rankings' is assigned a value but never used.","'isModalOpen' is assigned a value but never used.","'selectedCardData' is assigned a value but never used.","'flippedCardId' is assigned a value but never used.","'setFlippedCardId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'demographic' and 'selectedCards'. Either include them or remove the dependency array.",["192"],"'lossRatio' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'selectedCards'. Either include it or remove the dependency array.",["193"],"'closeModal' is assigned a value but never used.",["194"],"'shuffleArray' is assigned a value but never used.","'setIncome' is assigned a value but never used.","'useState' is defined but never used.","'axios' is defined but never used.",{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},"Update the dependencies array to be: [currentPairIndex, technologies.length, shuffledTechnologies.length, skipDemographics, finishGame, userID, demographics, riskAnswerOuput, cardMatchups, moralChoices, setOutputData]",{"range":"207","text":"208"},"Update the dependencies array to be: [calculateProgress, currentPairIndex]",{"range":"209","text":"210"},"Update the dependencies array to be: [score, currentPairIndex, previousScore]",{"range":"211","text":"212"},"Update the dependencies array to be: [demographic, selectedCards]",{"range":"213","text":"214"},"Update the dependencies array to be: [outputData, selectedCards]",{"range":"215","text":"216"},"Update the dependencies array to be: [previousScore, userScore]",{"range":"217","text":"218"},[4822,4951],"[currentPairIndex, technologies.length, shuffledTechnologies.length, skipDemographics, finishGame, userID, demographics, riskAnswerOuput, cardMatchups, moralChoices, setOutputData]",[5007,5025],"[calculateProgress, currentPairIndex]",[900,925],"[score, currentPairIndex, previousScore]",[1496,1498],"[demographic, selectedCards]",[4721,4733],"[outputData, selectedCards]",[1207,1218],"[previousScore, userScore]"]